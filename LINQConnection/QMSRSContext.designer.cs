#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQConnection
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QMSRSToolsEN")]
	public partial class QMSRSContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertPositionStatus(PositionStatus instance);
    partial void UpdatePositionStatus(PositionStatus instance);
    partial void DeletePositionStatus(PositionStatus instance);
    partial void InsertOrganizationLevel(OrganizationLevel instance);
    partial void UpdateOrganizationLevel(OrganizationLevel instance);
    partial void DeleteOrganizationLevel(OrganizationLevel instance);
    partial void InsertPhoneNumberType(PhoneNumberType instance);
    partial void UpdatePhoneNumberType(PhoneNumberType instance);
    partial void DeletePhoneNumberType(PhoneNumberType instance);
    partial void InsertDocumentStatus(DocumentStatus instance);
    partial void UpdateDocumentStatus(DocumentStatus instance);
    partial void DeleteDocumentStatus(DocumentStatus instance);
    partial void InsertPeriod(Period instance);
    partial void UpdatePeriod(Period instance);
    partial void DeletePeriod(Period instance);
    partial void InsertChangeControlType(ChangeControlType instance);
    partial void UpdateChangeControlType(ChangeControlType instance);
    partial void DeleteChangeControlType(ChangeControlType instance);
    partial void InsertApprovalStatus(ApprovalStatus instance);
    partial void UpdateApprovalStatus(ApprovalStatus instance);
    partial void DeleteApprovalStatus(ApprovalStatus instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCustomerAddress(CustomerAddress instance);
    partial void UpdateCustomerAddress(CustomerAddress instance);
    partial void DeleteCustomerAddress(CustomerAddress instance);
    partial void InsertMaritalStatus(MaritalStatus instance);
    partial void UpdateMaritalStatus(MaritalStatus instance);
    partial void DeleteMaritalStatus(MaritalStatus instance);
    partial void InsertReligion(Religion instance);
    partial void UpdateReligion(Religion instance);
    partial void DeleteReligion(Religion instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertContractType(ContractType instance);
    partial void UpdateContractType(ContractType instance);
    partial void DeleteContractType(ContractType instance);
    partial void InsertContractStatus(ContractStatus instance);
    partial void UpdateContractStatus(ContractStatus instance);
    partial void DeleteContractStatus(ContractStatus instance);
    partial void InsertEmployeeCitizenship(EmployeeCitizenship instance);
    partial void UpdateEmployeeCitizenship(EmployeeCitizenship instance);
    partial void DeleteEmployeeCitizenship(EmployeeCitizenship instance);
    partial void InsertTitle(Title instance);
    partial void UpdateTitle(Title instance);
    partial void DeleteTitle(Title instance);
    partial void InsertOrganizationAssignment(OrganizationAssignment instance);
    partial void UpdateOrganizationAssignment(OrganizationAssignment instance);
    partial void DeleteOrganizationAssignment(OrganizationAssignment instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertPositionSkill(PositionSkill instance);
    partial void UpdatePositionSkill(PositionSkill instance);
    partial void DeletePositionSkill(PositionSkill instance);
    partial void InsertCause(Cause instance);
    partial void UpdateCause(Cause instance);
    partial void DeleteCause(Cause instance);
    partial void InsertApprovalMemberType(ApprovalMemberType instance);
    partial void UpdateApprovalMemberType(ApprovalMemberType instance);
    partial void DeleteApprovalMemberType(ApprovalMemberType instance);
    partial void InsertISOProcess(ISOProcess instance);
    partial void UpdateISOProcess(ISOProcess instance);
    partial void DeleteISOProcess(ISOProcess instance);
    partial void InsertRAGCondition(RAGCondition instance);
    partial void UpdateRAGCondition(RAGCondition instance);
    partial void DeleteRAGCondition(RAGCondition instance);
    partial void InsertRAGConditionSymbol(RAGConditionSymbol instance);
    partial void UpdateRAGConditionSymbol(RAGConditionSymbol instance);
    partial void DeleteRAGConditionSymbol(RAGConditionSymbol instance);
    partial void InsertAT_RAGParameter(AT_RAGParameter instance);
    partial void UpdateAT_RAGParameter(AT_RAGParameter instance);
    partial void DeleteAT_RAGParameter(AT_RAGParameter instance);
    partial void InsertAT_SMTPserver(AT_SMTPserver instance);
    partial void UpdateAT_SMTPserver(AT_SMTPserver instance);
    partial void DeleteAT_SMTPserver(AT_SMTPserver instance);
    partial void InsertAT_EmailRecipient(AT_EmailRecipient instance);
    partial void UpdateAT_EmailRecipient(AT_EmailRecipient instance);
    partial void DeleteAT_EmailRecipient(AT_EmailRecipient instance);
    partial void InsertAT_TreeNodeSecurityKey(AT_TreeNodeSecurityKey instance);
    partial void UpdateAT_TreeNodeSecurityKey(AT_TreeNodeSecurityKey instance);
    partial void DeleteAT_TreeNodeSecurityKey(AT_TreeNodeSecurityKey instance);
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertAT_ModulesAction(AT_ModulesAction instance);
    partial void UpdateAT_ModulesAction(AT_ModulesAction instance);
    partial void DeleteAT_ModulesAction(AT_ModulesAction instance);
    partial void InsertChangeControlNoteStatus(ChangeControlNoteStatus instance);
    partial void UpdateChangeControlNoteStatus(ChangeControlNoteStatus instance);
    partial void DeleteChangeControlNoteStatus(ChangeControlNoteStatus instance);
    partial void InsertSystemUserPermission(SystemUserPermission instance);
    partial void UpdateSystemUserPermission(SystemUserPermission instance);
    partial void DeleteSystemUserPermission(SystemUserPermission instance);
    partial void InsertChangeControlApprovalMember(ChangeControlApprovalMember instance);
    partial void UpdateChangeControlApprovalMember(ChangeControlApprovalMember instance);
    partial void DeleteChangeControlApprovalMember(ChangeControlApprovalMember instance);
    partial void InsertAT_EmailsTemplate(AT_EmailsTemplate instance);
    partial void UpdateAT_EmailsTemplate(AT_EmailsTemplate instance);
    partial void DeleteAT_EmailsTemplate(AT_EmailsTemplate instance);
    partial void InsertCustomerContact(CustomerContact instance);
    partial void UpdateCustomerContact(CustomerContact instance);
    partial void DeleteCustomerContact(CustomerContact instance);
    partial void InsertSeverity(Severity instance);
    partial void UpdateSeverity(Severity instance);
    partial void DeleteSeverity(Severity instance);
    partial void InsertProblemStatus(ProblemStatus instance);
    partial void UpdateProblemStatus(ProblemStatus instance);
    partial void DeleteProblemStatus(ProblemStatus instance);
    partial void InsertProblemActionType(ProblemActionType instance);
    partial void UpdateProblemActionType(ProblemActionType instance);
    partial void DeleteProblemActionType(ProblemActionType instance);
    partial void InsertProblemRiskSubCategory(ProblemRiskSubCategory instance);
    partial void UpdateProblemRiskSubCategory(ProblemRiskSubCategory instance);
    partial void DeleteProblemRiskSubCategory(ProblemRiskSubCategory instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertProblemAction(ProblemAction instance);
    partial void UpdateProblemAction(ProblemAction instance);
    partial void DeleteProblemAction(ProblemAction instance);
    partial void InsertAT_TreeNode(AT_TreeNode instance);
    partial void UpdateAT_TreeNode(AT_TreeNode instance);
    partial void DeleteAT_TreeNode(AT_TreeNode instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertProjectStatus(ProjectStatus instance);
    partial void UpdateProjectStatus(ProjectStatus instance);
    partial void DeleteProjectStatus(ProjectStatus instance);
    partial void InsertProjectInformation(ProjectInformation instance);
    partial void UpdateProjectInformation(ProjectInformation instance);
    partial void DeleteProjectInformation(ProjectInformation instance);
    partial void InsertManagementStatus(ManagementStatus instance);
    partial void UpdateManagementStatus(ManagementStatus instance);
    partial void DeleteManagementStatus(ManagementStatus instance);
    partial void InsertRelatedReviewUnit(RelatedReviewUnit instance);
    partial void UpdateRelatedReviewUnit(RelatedReviewUnit instance);
    partial void DeleteRelatedReviewUnit(RelatedReviewUnit instance);
    partial void InsertManagementRepresentative(ManagementRepresentative instance);
    partial void UpdateManagementRepresentative(ManagementRepresentative instance);
    partial void DeleteManagementRepresentative(ManagementRepresentative instance);
    partial void InsertReviewAction(ReviewAction instance);
    partial void UpdateReviewAction(ReviewAction instance);
    partial void DeleteReviewAction(ReviewAction instance);
    partial void InsertAuditStatus(AuditStatus instance);
    partial void UpdateAuditStatus(AuditStatus instance);
    partial void DeleteAuditStatus(AuditStatus instance);
    partial void InsertAuditType(AuditType instance);
    partial void UpdateAuditType(AuditType instance);
    partial void DeleteAuditType(AuditType instance);
    partial void InsertCheckList(CheckList instance);
    partial void UpdateCheckList(CheckList instance);
    partial void DeleteCheckList(CheckList instance);
    partial void InsertAuditor(Auditor instance);
    partial void UpdateAuditor(Auditor instance);
    partial void DeleteAuditor(Auditor instance);
    partial void InsertRelatedAuditUnit(RelatedAuditUnit instance);
    partial void UpdateRelatedAuditUnit(RelatedAuditUnit instance);
    partial void DeleteRelatedAuditUnit(RelatedAuditUnit instance);
    partial void InsertFinding(Finding instance);
    partial void UpdateFinding(Finding instance);
    partial void DeleteFinding(Finding instance);
    partial void InsertAuditAction(AuditAction instance);
    partial void UpdateAuditAction(AuditAction instance);
    partial void DeleteAuditAction(AuditAction instance);
    partial void InsertSystemUserType(SystemUserType instance);
    partial void UpdateSystemUserType(SystemUserType instance);
    partial void DeleteSystemUserType(SystemUserType instance);
    partial void InsertAssetDepreciation(AssetDepreciation instance);
    partial void UpdateAssetDepreciation(AssetDepreciation instance);
    partial void DeleteAssetDepreciation(AssetDepreciation instance);
    partial void InsertOrganizationUnit(OrganizationUnit instance);
    partial void UpdateOrganizationUnit(OrganizationUnit instance);
    partial void DeleteOrganizationUnit(OrganizationUnit instance);
    partial void InsertAssetCalibrationStatus(AssetCalibrationStatus instance);
    partial void UpdateAssetCalibrationStatus(AssetCalibrationStatus instance);
    partial void DeleteAssetCalibrationStatus(AssetCalibrationStatus instance);
    partial void InsertFindingType(FindingType instance);
    partial void UpdateFindingType(FindingType instance);
    partial void DeleteFindingType(FindingType instance);
    partial void InsertAuditActionType(AuditActionType instance);
    partial void UpdateAuditActionType(AuditActionType instance);
    partial void DeleteAuditActionType(AuditActionType instance);
    partial void InsertActionType(ActionType instance);
    partial void UpdateActionType(ActionType instance);
    partial void DeleteActionType(ActionType instance);
    partial void InsertReviewCategory(ReviewCategory instance);
    partial void UpdateReviewCategory(ReviewCategory instance);
    partial void DeleteReviewCategory(ReviewCategory instance);
    partial void InsertTrainingCourseStatus(TrainingCourseStatus instance);
    partial void UpdateTrainingCourseStatus(TrainingCourseStatus instance);
    partial void DeleteTrainingCourseStatus(TrainingCourseStatus instance);
    partial void InsertEnrollerLevel(EnrollerLevel instance);
    partial void UpdateEnrollerLevel(EnrollerLevel instance);
    partial void DeleteEnrollerLevel(EnrollerLevel instance);
    partial void InsertInstructorType(InstructorType instance);
    partial void UpdateInstructorType(InstructorType instance);
    partial void DeleteInstructorType(InstructorType instance);
    partial void InsertTrainingCourseLocation(TrainingCourseLocation instance);
    partial void UpdateTrainingCourseLocation(TrainingCourseLocation instance);
    partial void DeleteTrainingCourseLocation(TrainingCourseLocation instance);
    partial void InsertTrainingCourseSchedule(TrainingCourseSchedule instance);
    partial void UpdateTrainingCourseSchedule(TrainingCourseSchedule instance);
    partial void DeleteTrainingCourseSchedule(TrainingCourseSchedule instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertAssetMaintenanceStatus(AssetMaintenanceStatus instance);
    partial void UpdateAssetMaintenanceStatus(AssetMaintenanceStatus instance);
    partial void DeleteAssetMaintenanceStatus(AssetMaintenanceStatus instance);
    partial void InsertCourseAttendanceStatus(CourseAttendanceStatus instance);
    partial void UpdateCourseAttendanceStatus(CourseAttendanceStatus instance);
    partial void DeleteCourseAttendanceStatus(CourseAttendanceStatus instance);
    partial void InsertRecordMode(RecordMode instance);
    partial void UpdateRecordMode(RecordMode instance);
    partial void DeleteRecordMode(RecordMode instance);
    partial void InsertAssetElectricalTestStatus(AssetElectricalTestStatus instance);
    partial void UpdateAssetElectricalTestStatus(AssetElectricalTestStatus instance);
    partial void DeleteAssetElectricalTestStatus(AssetElectricalTestStatus instance);
    partial void InsertTrainingCourseQuestion(TrainingCourseQuestion instance);
    partial void UpdateTrainingCourseQuestion(TrainingCourseQuestion instance);
    partial void DeleteTrainingCourseQuestion(TrainingCourseQuestion instance);
    partial void InsertCourseFeedBack(CourseFeedBack instance);
    partial void UpdateCourseFeedBack(CourseFeedBack instance);
    partial void DeleteCourseFeedBack(CourseFeedBack instance);
    partial void InsertDocumentFileType(DocumentFileType instance);
    partial void UpdateDocumentFileType(DocumentFileType instance);
    partial void DeleteDocumentFileType(DocumentFileType instance);
    partial void InsertDocumentType(DocumentType instance);
    partial void UpdateDocumentType(DocumentType instance);
    partial void DeleteDocumentType(DocumentType instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertChangeControlNote(ChangeControlNote instance);
    partial void UpdateChangeControlNote(ChangeControlNote instance);
    partial void DeleteChangeControlNote(ChangeControlNote instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertAssetCalibration(AssetCalibration instance);
    partial void UpdateAssetCalibration(AssetCalibration instance);
    partial void DeleteAssetCalibration(AssetCalibration instance);
    partial void InsertAssetMaintenance(AssetMaintenance instance);
    partial void UpdateAssetMaintenance(AssetMaintenance instance);
    partial void DeleteAssetMaintenance(AssetMaintenance instance);
    partial void InsertAssetElectricalTest(AssetElectricalTest instance);
    partial void UpdateAssetElectricalTest(AssetElectricalTest instance);
    partial void DeleteAssetElectricalTest(AssetElectricalTest instance);
    partial void InsertAssetStatus(AssetStatus instance);
    partial void UpdateAssetStatus(AssetStatus instance);
    partial void DeleteAssetStatus(AssetStatus instance);
    partial void InsertQuestionMode(QuestionMode instance);
    partial void UpdateQuestionMode(QuestionMode instance);
    partial void DeleteQuestionMode(QuestionMode instance);
    partial void InsertCourseQuestion(CourseQuestion instance);
    partial void UpdateCourseQuestion(CourseQuestion instance);
    partial void DeleteCourseQuestion(CourseQuestion instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertResidencePermit(ResidencePermit instance);
    partial void UpdateResidencePermit(ResidencePermit instance);
    partial void DeleteResidencePermit(ResidencePermit instance);
    partial void InsertResidencePermitStatus(ResidencePermitStatus instance);
    partial void UpdateResidencePermitStatus(ResidencePermitStatus instance);
    partial void DeleteResidencePermitStatus(ResidencePermitStatus instance);
    partial void InsertResidencePermitType(ResidencePermitType instance);
    partial void UpdateResidencePermitType(ResidencePermitType instance);
    partial void DeleteResidencePermitType(ResidencePermitType instance);
    partial void InsertContractExtension(ContractExtension instance);
    partial void UpdateContractExtension(ContractExtension instance);
    partial void DeleteContractExtension(ContractExtension instance);
    partial void InsertContractGroup(ContractGroup instance);
    partial void UpdateContractGroup(ContractGroup instance);
    partial void DeleteContractGroup(ContractGroup instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertContactDetail(ContactDetail instance);
    partial void UpdateContactDetail(ContactDetail instance);
    partial void DeleteContactDetail(ContactDetail instance);
    partial void InsertEducationDegree(EducationDegree instance);
    partial void UpdateEducationDegree(EducationDegree instance);
    partial void DeleteEducationDegree(EducationDegree instance);
    partial void InsertStudyMode(StudyMode instance);
    partial void UpdateStudyMode(StudyMode instance);
    partial void DeleteStudyMode(StudyMode instance);
    partial void InsertGradeSystem(GradeSystem instance);
    partial void UpdateGradeSystem(GradeSystem instance);
    partial void DeleteGradeSystem(GradeSystem instance);
    partial void InsertEducation(Education instance);
    partial void UpdateEducation(Education instance);
    partial void DeleteEducation(Education instance);
    partial void InsertDependant(Dependant instance);
    partial void UpdateDependant(Dependant instance);
    partial void DeleteDependant(Dependant instance);
    partial void InsertDependantRelation(DependantRelation instance);
    partial void UpdateDependantRelation(DependantRelation instance);
    partial void DeleteDependantRelation(DependantRelation instance);
    partial void InsertTrainingCourseEnrollment(TrainingCourseEnrollment instance);
    partial void UpdateTrainingCourseEnrollment(TrainingCourseEnrollment instance);
    partial void DeleteTrainingCourseEnrollment(TrainingCourseEnrollment instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertProblemType(ProblemType instance);
    partial void UpdateProblemType(ProblemType instance);
    partial void DeleteProblemType(ProblemType instance);
    partial void InsertAT_RAGSign(AT_RAGSign instance);
    partial void UpdateAT_RAGSign(AT_RAGSign instance);
    partial void DeleteAT_RAGSign(AT_RAGSign instance);
    partial void InsertRAGLinkedAction(RAGLinkedAction instance);
    partial void UpdateRAGLinkedAction(RAGLinkedAction instance);
    partial void DeleteRAGLinkedAction(RAGLinkedAction instance);
    partial void InsertRiskFormulaParameter(RiskFormulaParameter instance);
    partial void UpdateRiskFormulaParameter(RiskFormulaParameter instance);
    partial void DeleteRiskFormulaParameter(RiskFormulaParameter instance);
    partial void InsertRiskFormula(RiskFormula instance);
    partial void UpdateRiskFormula(RiskFormula instance);
    partial void DeleteRiskFormula(RiskFormula instance);
    partial void InsertRiskImpactProbabilityMatrix(RiskImpactProbabilityMatrix instance);
    partial void UpdateRiskImpactProbabilityMatrix(RiskImpactProbabilityMatrix instance);
    partial void DeleteRiskImpactProbabilityMatrix(RiskImpactProbabilityMatrix instance);
    partial void InsertRiskCategory(RiskCategory instance);
    partial void UpdateRiskCategory(RiskCategory instance);
    partial void DeleteRiskCategory(RiskCategory instance);
    partial void InsertRiskSubCategory(RiskSubCategory instance);
    partial void UpdateRiskSubCategory(RiskSubCategory instance);
    partial void DeleteRiskSubCategory(RiskSubCategory instance);
    partial void InsertRiskImpact(RiskImpact instance);
    partial void UpdateRiskImpact(RiskImpact instance);
    partial void DeleteRiskImpact(RiskImpact instance);
    partial void InsertImpactType(ImpactType instance);
    partial void UpdateImpactType(ImpactType instance);
    partial void DeleteImpactType(ImpactType instance);
    partial void InsertStandardCostImpact(StandardCostImpact instance);
    partial void UpdateStandardCostImpact(StandardCostImpact instance);
    partial void DeleteStandardCostImpact(StandardCostImpact instance);
    partial void InsertRiskCriteria(RiskCriteria instance);
    partial void UpdateRiskCriteria(RiskCriteria instance);
    partial void DeleteRiskCriteria(RiskCriteria instance);
    partial void InsertISO14001AssessmentCategory(ISO14001AssessmentCategory instance);
    partial void UpdateISO14001AssessmentCategory(ISO14001AssessmentCategory instance);
    partial void DeleteISO14001AssessmentCategory(ISO14001AssessmentCategory instance);
    partial void InsertISOStandard(ISOStandard instance);
    partial void UpdateISOStandard(ISOStandard instance);
    partial void DeleteISOStandard(ISOStandard instance);
    partial void InsertRiskType(RiskType instance);
    partial void UpdateRiskType(RiskType instance);
    partial void DeleteRiskType(RiskType instance);
    partial void InsertRiskStatus(RiskStatus instance);
    partial void UpdateRiskStatus(RiskStatus instance);
    partial void DeleteRiskStatus(RiskStatus instance);
    partial void InsertRiskMode(RiskMode instance);
    partial void UpdateRiskMode(RiskMode instance);
    partial void DeleteRiskMode(RiskMode instance);
    partial void InsertRiskScoreCriteria(RiskScoreCriteria instance);
    partial void UpdateRiskScoreCriteria(RiskScoreCriteria instance);
    partial void DeleteRiskScoreCriteria(RiskScoreCriteria instance);
    partial void InsertRiskRatingCriteria(RiskRatingCriteria instance);
    partial void UpdateRiskRatingCriteria(RiskRatingCriteria instance);
    partial void DeleteRiskRatingCriteria(RiskRatingCriteria instance);
    partial void InsertISO14001AssessmentGuideline(ISO14001AssessmentGuideline instance);
    partial void UpdateISO14001AssessmentGuideline(ISO14001AssessmentGuideline instance);
    partial void DeleteISO14001AssessmentGuideline(ISO14001AssessmentGuideline instance);
    partial void InsertRiskProbability(RiskProbability instance);
    partial void UpdateRiskProbability(RiskProbability instance);
    partial void DeleteRiskProbability(RiskProbability instance);
    partial void InsertTrainingCourse(TrainingCourse instance);
    partial void UpdateTrainingCourse(TrainingCourse instance);
    partial void DeleteTrainingCourse(TrainingCourse instance);
    partial void InsertQualityRecordStatus(QualityRecordStatus instance);
    partial void UpdateQualityRecordStatus(QualityRecordStatus instance);
    partial void DeleteQualityRecordStatus(QualityRecordStatus instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    partial void InsertRisk(Risk instance);
    partial void UpdateRisk(Risk instance);
    partial void DeleteRisk(Risk instance);
    partial void InsertRiskMitigationAction(RiskMitigationAction instance);
    partial void UpdateRiskMitigationAction(RiskMitigationAction instance);
    partial void DeleteRiskMitigationAction(RiskMitigationAction instance);
    partial void InsertRiskMitigationType(RiskMitigationType instance);
    partial void UpdateRiskMitigationType(RiskMitigationType instance);
    partial void DeleteRiskMitigationType(RiskMitigationType instance);
    partial void InsertSystemUser(SystemUser instance);
    partial void UpdateSystemUser(SystemUser instance);
    partial void DeleteSystemUser(SystemUser instance);
    partial void InsertAssetAcquisitionMethod(AssetAcquisitionMethod instance);
    partial void UpdateAssetAcquisitionMethod(AssetAcquisitionMethod instance);
    partial void DeleteAssetAcquisitionMethod(AssetAcquisitionMethod instance);
    partial void InsertAssetDepreciationMethod(AssetDepreciationMethod instance);
    partial void UpdateAssetDepreciationMethod(AssetDepreciationMethod instance);
    partial void DeleteAssetDepreciationMethod(AssetDepreciationMethod instance);
    partial void InsertCustomerType(CustomerType instance);
    partial void UpdateCustomerType(CustomerType instance);
    partial void DeleteCustomerType(CustomerType instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertAssetCategory(AssetCategory instance);
    partial void UpdateAssetCategory(AssetCategory instance);
    partial void DeleteAssetCategory(AssetCategory instance);
    partial void InsertBillingCategory(BillingCategory instance);
    partial void UpdateBillingCategory(BillingCategory instance);
    partial void DeleteBillingCategory(BillingCategory instance);
    partial void InsertAffectedPartyType(AffectedPartyType instance);
    partial void UpdateAffectedPartyType(AffectedPartyType instance);
    partial void DeleteAffectedPartyType(AffectedPartyType instance);
    partial void InsertProblemApprovalMember(ProblemApprovalMember instance);
    partial void UpdateProblemApprovalMember(ProblemApprovalMember instance);
    partial void DeleteProblemApprovalMember(ProblemApprovalMember instance);
    partial void InsertProblem(Problem instance);
    partial void UpdateProblem(Problem instance);
    partial void DeleteProblem(Problem instance);
    partial void InsertAudit(Audit instance);
    partial void UpdateAudit(Audit instance);
    partial void DeleteAudit(Audit instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertCostCentre(CostCentre instance);
    partial void UpdateCostCentre(CostCentre instance);
    partial void DeleteCostCentre(CostCentre instance);
    partial void InsertAsset(Asset instance);
    partial void UpdateAsset(Asset instance);
    partial void DeleteAsset(Asset instance);
    partial void InsertRecipient(Recipient instance);
    partial void UpdateRecipient(Recipient instance);
    partial void DeleteRecipient(Recipient instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    #endregion
		
		public QMSRSContextDataContext() : 
				base(global::LINQConnection.Properties.Settings.Default.AdminToolsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QMSRSContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QMSRSContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QMSRSContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QMSRSContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<PositionStatus> PositionStatus
		{
			get
			{
				return this.GetTable<PositionStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationLevel> OrganizationLevels
		{
			get
			{
				return this.GetTable<OrganizationLevel>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNumberType> PhoneNumberTypes
		{
			get
			{
				return this.GetTable<PhoneNumberType>();
			}
		}
		
		public System.Data.Linq.Table<DocumentStatus> DocumentStatus
		{
			get
			{
				return this.GetTable<DocumentStatus>();
			}
		}
		
		public System.Data.Linq.Table<Period> Periods
		{
			get
			{
				return this.GetTable<Period>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlType> ChangeControlTypes
		{
			get
			{
				return this.GetTable<ChangeControlType>();
			}
		}
		
		public System.Data.Linq.Table<ApprovalStatus> ApprovalStatus
		{
			get
			{
				return this.GetTable<ApprovalStatus>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<CustomerAddress> CustomerAddresses
		{
			get
			{
				return this.GetTable<CustomerAddress>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatus> MaritalStatus
		{
			get
			{
				return this.GetTable<MaritalStatus>();
			}
		}
		
		public System.Data.Linq.Table<Religion> Religions
		{
			get
			{
				return this.GetTable<Religion>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<ContractType> ContractTypes
		{
			get
			{
				return this.GetTable<ContractType>();
			}
		}
		
		public System.Data.Linq.Table<ContractStatus> ContractStatus
		{
			get
			{
				return this.GetTable<ContractStatus>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeCitizenship> EmployeeCitizenships
		{
			get
			{
				return this.GetTable<EmployeeCitizenship>();
			}
		}
		
		public System.Data.Linq.Table<Title> Titles
		{
			get
			{
				return this.GetTable<Title>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationAssignment> OrganizationAssignments
		{
			get
			{
				return this.GetTable<OrganizationAssignment>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<PositionSkill> PositionSkills
		{
			get
			{
				return this.GetTable<PositionSkill>();
			}
		}
		
		public System.Data.Linq.Table<Cause> Causes
		{
			get
			{
				return this.GetTable<Cause>();
			}
		}
		
		public System.Data.Linq.Table<ApprovalMemberType> ApprovalMemberTypes
		{
			get
			{
				return this.GetTable<ApprovalMemberType>();
			}
		}
		
		public System.Data.Linq.Table<ISOProcess> ISOProcesses
		{
			get
			{
				return this.GetTable<ISOProcess>();
			}
		}
		
		public System.Data.Linq.Table<RAGCondition> RAGConditions
		{
			get
			{
				return this.GetTable<RAGCondition>();
			}
		}
		
		public System.Data.Linq.Table<RAGConditionSymbol> RAGConditionSymbols
		{
			get
			{
				return this.GetTable<RAGConditionSymbol>();
			}
		}
		
		public System.Data.Linq.Table<AT_RAGParameter> AT_RAGParameters
		{
			get
			{
				return this.GetTable<AT_RAGParameter>();
			}
		}
		
		public System.Data.Linq.Table<AT_SMTPserver> AT_SMTPservers
		{
			get
			{
				return this.GetTable<AT_SMTPserver>();
			}
		}
		
		public System.Data.Linq.Table<AT_EmailRecipient> AT_EmailRecipients
		{
			get
			{
				return this.GetTable<AT_EmailRecipient>();
			}
		}
		
		public System.Data.Linq.Table<AT_TreeNodeSecurityKey> AT_TreeNodeSecurityKeys
		{
			get
			{
				return this.GetTable<AT_TreeNodeSecurityKey>();
			}
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<AT_ModulesAction> AT_ModulesActions
		{
			get
			{
				return this.GetTable<AT_ModulesAction>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlNoteStatus> ChangeControlNoteStatus
		{
			get
			{
				return this.GetTable<ChangeControlNoteStatus>();
			}
		}
		
		public System.Data.Linq.Table<SystemUserPermission> SystemUserPermissions
		{
			get
			{
				return this.GetTable<SystemUserPermission>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlApprovalMember> ChangeControlApprovalMembers
		{
			get
			{
				return this.GetTable<ChangeControlApprovalMember>();
			}
		}
		
		public System.Data.Linq.Table<AT_EmailsTemplate> AT_EmailsTemplates
		{
			get
			{
				return this.GetTable<AT_EmailsTemplate>();
			}
		}
		
		public System.Data.Linq.Table<CustomerContact> CustomerContacts
		{
			get
			{
				return this.GetTable<CustomerContact>();
			}
		}
		
		public System.Data.Linq.Table<Severity> Severities
		{
			get
			{
				return this.GetTable<Severity>();
			}
		}
		
		public System.Data.Linq.Table<ProblemStatus> ProblemStatus
		{
			get
			{
				return this.GetTable<ProblemStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProblemActionType> ProblemActionTypes
		{
			get
			{
				return this.GetTable<ProblemActionType>();
			}
		}
		
		public System.Data.Linq.Table<ProblemRiskSubCategory> ProblemRiskSubCategories
		{
			get
			{
				return this.GetTable<ProblemRiskSubCategory>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<ProblemAction> ProblemActions
		{
			get
			{
				return this.GetTable<ProblemAction>();
			}
		}
		
		public System.Data.Linq.Table<AT_TreeNode> AT_TreeNodes
		{
			get
			{
				return this.GetTable<AT_TreeNode>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<ProjectStatus> ProjectStatus
		{
			get
			{
				return this.GetTable<ProjectStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInformation> ProjectInformations
		{
			get
			{
				return this.GetTable<ProjectInformation>();
			}
		}
		
		public System.Data.Linq.Table<ManagementStatus> ManagementStatus
		{
			get
			{
				return this.GetTable<ManagementStatus>();
			}
		}
		
		public System.Data.Linq.Table<RelatedReviewUnit> RelatedReviewUnits
		{
			get
			{
				return this.GetTable<RelatedReviewUnit>();
			}
		}
		
		public System.Data.Linq.Table<ManagementRepresentative> ManagementRepresentatives
		{
			get
			{
				return this.GetTable<ManagementRepresentative>();
			}
		}
		
		public System.Data.Linq.Table<ReviewAction> ReviewActions
		{
			get
			{
				return this.GetTable<ReviewAction>();
			}
		}
		
		public System.Data.Linq.Table<AuditStatus> AuditStatus
		{
			get
			{
				return this.GetTable<AuditStatus>();
			}
		}
		
		public System.Data.Linq.Table<AuditType> AuditTypes
		{
			get
			{
				return this.GetTable<AuditType>();
			}
		}
		
		public System.Data.Linq.Table<CheckList> CheckLists
		{
			get
			{
				return this.GetTable<CheckList>();
			}
		}
		
		public System.Data.Linq.Table<Auditor> Auditors
		{
			get
			{
				return this.GetTable<Auditor>();
			}
		}
		
		public System.Data.Linq.Table<RelatedAuditUnit> RelatedAuditUnits
		{
			get
			{
				return this.GetTable<RelatedAuditUnit>();
			}
		}
		
		public System.Data.Linq.Table<Finding> Findings
		{
			get
			{
				return this.GetTable<Finding>();
			}
		}
		
		public System.Data.Linq.Table<AuditAction> AuditActions
		{
			get
			{
				return this.GetTable<AuditAction>();
			}
		}
		
		public System.Data.Linq.Table<SystemUserType> SystemUserTypes
		{
			get
			{
				return this.GetTable<SystemUserType>();
			}
		}
		
		public System.Data.Linq.Table<AssetDepreciation> AssetDepreciations
		{
			get
			{
				return this.GetTable<AssetDepreciation>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationUnit> OrganizationUnits
		{
			get
			{
				return this.GetTable<OrganizationUnit>();
			}
		}
		
		public System.Data.Linq.Table<AssetCalibrationStatus> AssetCalibrationStatus
		{
			get
			{
				return this.GetTable<AssetCalibrationStatus>();
			}
		}
		
		public System.Data.Linq.Table<FindingType> FindingTypes
		{
			get
			{
				return this.GetTable<FindingType>();
			}
		}
		
		public System.Data.Linq.Table<AuditActionType> AuditActionTypes
		{
			get
			{
				return this.GetTable<AuditActionType>();
			}
		}
		
		public System.Data.Linq.Table<ActionType> ActionTypes
		{
			get
			{
				return this.GetTable<ActionType>();
			}
		}
		
		public System.Data.Linq.Table<ReviewCategory> ReviewCategories
		{
			get
			{
				return this.GetTable<ReviewCategory>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseStatus> TrainingCourseStatus
		{
			get
			{
				return this.GetTable<TrainingCourseStatus>();
			}
		}
		
		public System.Data.Linq.Table<EnrollerLevel> EnrollerLevels
		{
			get
			{
				return this.GetTable<EnrollerLevel>();
			}
		}
		
		public System.Data.Linq.Table<InstructorType> InstructorTypes
		{
			get
			{
				return this.GetTable<InstructorType>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseLocation> TrainingCourseLocations
		{
			get
			{
				return this.GetTable<TrainingCourseLocation>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseSchedule> TrainingCourseSchedules
		{
			get
			{
				return this.GetTable<TrainingCourseSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<AssetMaintenanceStatus> AssetMaintenanceStatus
		{
			get
			{
				return this.GetTable<AssetMaintenanceStatus>();
			}
		}
		
		public System.Data.Linq.Table<CourseAttendanceStatus> CourseAttendanceStatus
		{
			get
			{
				return this.GetTable<CourseAttendanceStatus>();
			}
		}
		
		public System.Data.Linq.Table<RecordMode> RecordModes
		{
			get
			{
				return this.GetTable<RecordMode>();
			}
		}
		
		public System.Data.Linq.Table<AssetElectricalTestStatus> AssetElectricalTestStatus
		{
			get
			{
				return this.GetTable<AssetElectricalTestStatus>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseQuestion> TrainingCourseQuestions
		{
			get
			{
				return this.GetTable<TrainingCourseQuestion>();
			}
		}
		
		public System.Data.Linq.Table<CourseFeedBack> CourseFeedBacks
		{
			get
			{
				return this.GetTable<CourseFeedBack>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFileType> DocumentFileTypes
		{
			get
			{
				return this.GetTable<DocumentFileType>();
			}
		}
		
		public System.Data.Linq.Table<DocumentType> DocumentTypes
		{
			get
			{
				return this.GetTable<DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<ChangeControlNote> ChangeControlNotes
		{
			get
			{
				return this.GetTable<ChangeControlNote>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<AssetCalibration> AssetCalibrations
		{
			get
			{
				return this.GetTable<AssetCalibration>();
			}
		}
		
		public System.Data.Linq.Table<AssetMaintenance> AssetMaintenances
		{
			get
			{
				return this.GetTable<AssetMaintenance>();
			}
		}
		
		public System.Data.Linq.Table<AssetElectricalTest> AssetElectricalTests
		{
			get
			{
				return this.GetTable<AssetElectricalTest>();
			}
		}
		
		public System.Data.Linq.Table<AssetStatus> AssetStatus
		{
			get
			{
				return this.GetTable<AssetStatus>();
			}
		}
		
		public System.Data.Linq.Table<QuestionMode> QuestionModes
		{
			get
			{
				return this.GetTable<QuestionMode>();
			}
		}
		
		public System.Data.Linq.Table<CourseQuestion> CourseQuestions
		{
			get
			{
				return this.GetTable<CourseQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<ResidencePermit> ResidencePermits
		{
			get
			{
				return this.GetTable<ResidencePermit>();
			}
		}
		
		public System.Data.Linq.Table<ResidencePermitStatus> ResidencePermitStatus
		{
			get
			{
				return this.GetTable<ResidencePermitStatus>();
			}
		}
		
		public System.Data.Linq.Table<ResidencePermitType> ResidencePermitTypes
		{
			get
			{
				return this.GetTable<ResidencePermitType>();
			}
		}
		
		public System.Data.Linq.Table<ContractExtension> ContractExtensions
		{
			get
			{
				return this.GetTable<ContractExtension>();
			}
		}
		
		public System.Data.Linq.Table<ContractGroup> ContractGroups
		{
			get
			{
				return this.GetTable<ContractGroup>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}

        public System.Data.Linq.Table<ReviewRecipient> ReviewRecipients
        {
            get
            {
                return this.GetTable<ReviewRecipient>();
            }
        }
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<ContactDetail> ContactDetails
		{
			get
			{
				return this.GetTable<ContactDetail>();
			}
		}
		
		public System.Data.Linq.Table<EducationDegree> EducationDegrees
		{
			get
			{
				return this.GetTable<EducationDegree>();
			}
		}
		
		public System.Data.Linq.Table<StudyMode> StudyModes
		{
			get
			{
				return this.GetTable<StudyMode>();
			}
		}
		
		public System.Data.Linq.Table<GradeSystem> GradeSystems
		{
			get
			{
				return this.GetTable<GradeSystem>();
			}
		}
		
		public System.Data.Linq.Table<Education> Educations
		{
			get
			{
				return this.GetTable<Education>();
			}
		}
		
		public System.Data.Linq.Table<Dependant> Dependants
		{
			get
			{
				return this.GetTable<Dependant>();
			}
		}
		
		public System.Data.Linq.Table<DependantRelation> DependantRelations
		{
			get
			{
				return this.GetTable<DependantRelation>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourseEnrollment> TrainingCourseEnrollments
		{
			get
			{
				return this.GetTable<TrainingCourseEnrollment>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<ProblemType> ProblemTypes
		{
			get
			{
				return this.GetTable<ProblemType>();
			}
		}
		
		public System.Data.Linq.Table<AT_RAGSign> AT_RAGSigns
		{
			get
			{
				return this.GetTable<AT_RAGSign>();
			}
		}
		
		public System.Data.Linq.Table<RAGLinkedAction> RAGLinkedActions
		{
			get
			{
				return this.GetTable<RAGLinkedAction>();
			}
		}
		
		public System.Data.Linq.Table<RiskFormulaParameter> RiskFormulaParameters
		{
			get
			{
				return this.GetTable<RiskFormulaParameter>();
			}
		}
		
		public System.Data.Linq.Table<RiskFormula> RiskFormulas
		{
			get
			{
				return this.GetTable<RiskFormula>();
			}
		}
		
		public System.Data.Linq.Table<RiskImpactProbabilityMatrix> RiskImpactProbabilityMatrixes
		{
			get
			{
				return this.GetTable<RiskImpactProbabilityMatrix>();
			}
		}
		
		public System.Data.Linq.Table<RiskCategory> RiskCategories
		{
			get
			{
				return this.GetTable<RiskCategory>();
			}
		}
		
		public System.Data.Linq.Table<RiskSubCategory> RiskSubCategories
		{
			get
			{
				return this.GetTable<RiskSubCategory>();
			}
		}
		
		public System.Data.Linq.Table<RiskImpact> RiskImpacts
		{
			get
			{
				return this.GetTable<RiskImpact>();
			}
		}
		
		public System.Data.Linq.Table<ImpactType> ImpactTypes
		{
			get
			{
				return this.GetTable<ImpactType>();
			}
		}
		
		public System.Data.Linq.Table<StandardCostImpact> StandardCostImpacts
		{
			get
			{
				return this.GetTable<StandardCostImpact>();
			}
		}
		
		public System.Data.Linq.Table<RiskCriteria> RiskCriterias
		{
			get
			{
				return this.GetTable<RiskCriteria>();
			}
		}
		
		public System.Data.Linq.Table<ISO14001AssessmentCategory> ISO14001AssessmentCategories
		{
			get
			{
				return this.GetTable<ISO14001AssessmentCategory>();
			}
		}
		
		public System.Data.Linq.Table<ISOStandard> ISOStandards
		{
			get
			{
				return this.GetTable<ISOStandard>();
			}
		}
		
		public System.Data.Linq.Table<RiskType> RiskTypes
		{
			get
			{
				return this.GetTable<RiskType>();
			}
		}
		
		public System.Data.Linq.Table<RiskStatus> RiskStatus
		{
			get
			{
				return this.GetTable<RiskStatus>();
			}
		}
		
		public System.Data.Linq.Table<RiskMode> RiskModes
		{
			get
			{
				return this.GetTable<RiskMode>();
			}
		}
		
		public System.Data.Linq.Table<RiskScoreCriteria> RiskScoreCriterias
		{
			get
			{
				return this.GetTable<RiskScoreCriteria>();
			}
		}
		
		public System.Data.Linq.Table<RiskRatingCriteria> RiskRatingCriterias
		{
			get
			{
				return this.GetTable<RiskRatingCriteria>();
			}
		}
		
		public System.Data.Linq.Table<ISO14001AssessmentGuideline> ISO14001AssessmentGuidelines
		{
			get
			{
				return this.GetTable<ISO14001AssessmentGuideline>();
			}
		}
		
		public System.Data.Linq.Table<RiskProbability> RiskProbabilities
		{
			get
			{
				return this.GetTable<RiskProbability>();
			}
		}
		
		public System.Data.Linq.Table<TrainingCourse> TrainingCourses
		{
			get
			{
				return this.GetTable<TrainingCourse>();
			}
		}
		
		public System.Data.Linq.Table<QualityRecordStatus> QualityRecordStatus
		{
			get
			{
				return this.GetTable<QualityRecordStatus>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
		
		public System.Data.Linq.Table<Risk> Risks
		{
			get
			{
				return this.GetTable<Risk>();
			}
		}
		
		public System.Data.Linq.Table<RiskMitigationAction> RiskMitigationActions
		{
			get
			{
				return this.GetTable<RiskMitigationAction>();
			}
		}
		
		public System.Data.Linq.Table<RiskMitigationType> RiskMitigationTypes
		{
			get
			{
				return this.GetTable<RiskMitigationType>();
			}
		}
		
		public System.Data.Linq.Table<SystemUser> SystemUsers
		{
			get
			{
				return this.GetTable<SystemUser>();
			}
		}
		
		public System.Data.Linq.Table<AssetAcquisitionMethod> AssetAcquisitionMethods
		{
			get
			{
				return this.GetTable<AssetAcquisitionMethod>();
			}
		}
		
		public System.Data.Linq.Table<AssetDepreciationMethod> AssetDepreciationMethods
		{
			get
			{
				return this.GetTable<AssetDepreciationMethod>();
			}
		}
		
		public System.Data.Linq.Table<CustomerType> CustomerTypes
		{
			get
			{
				return this.GetTable<CustomerType>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<AssetCategory> AssetCategories
		{
			get
			{
				return this.GetTable<AssetCategory>();
			}
		}
		
		public System.Data.Linq.Table<BillingCategory> BillingCategories
		{
			get
			{
				return this.GetTable<BillingCategory>();
			}
		}
		
		public System.Data.Linq.Table<AffectedPartyType> AffectedPartyTypes
		{
			get
			{
				return this.GetTable<AffectedPartyType>();
			}
		}
		
		public System.Data.Linq.Table<ProblemApprovalMember> ProblemApprovalMembers
		{
			get
			{
				return this.GetTable<ProblemApprovalMember>();
			}
		}
		
		public System.Data.Linq.Table<Problem> Problems
		{
			get
			{
				return this.GetTable<Problem>();
			}
		}
		
		public System.Data.Linq.Table<Audit> Audits
		{
			get
			{
				return this.GetTable<Audit>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<CostCentre> CostCentres
		{
			get
			{
				return this.GetTable<CostCentre>();
			}
		}
		
		public System.Data.Linq.Table<Asset> Assets
		{
			get
			{
				return this.GetTable<Asset>();
			}
		}
		
		public System.Data.Linq.Table<Recipient> Recipients
		{
			get
			{
				return this.GetTable<Recipient>();
			}
		}

        public System.Data.Linq.Table<Region> Regions
        {
            get
            {
                return this.GetTable<Region>();
            }
        }

        public System.Data.Linq.Table<City> Cities
        {
            get
            {
                return this.GetTable<City>();
            }
        }
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HumanResources.fn_GetRootDepartmentEmployees", IsComposable=true)]
		public IQueryable<fn_GetRootDepartmentEmployeesResult> fn_GetRootDepartmentEmployees([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Department", DbType="NVarChar(100)")] string department)
		{
			return this.CreateMethodCallQuery<fn_GetRootDepartmentEmployeesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), department);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HumanResources.fn_GetRootDepartmentPositions", IsComposable=true)]
		public IQueryable<fn_GetRootDepartmentPositionsResult> fn_GetRootDepartmentPositions([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Department", DbType="NVarChar(100)")] string department)
		{
			return this.CreateMethodCallQuery<fn_GetRootDepartmentPositionsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), department);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HumanResources.fn_GetDepartmentEmployees", IsComposable=true)]
		public IQueryable<fn_GetDepartmentEmployeesResult> fn_GetDepartmentEmployees([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Department", DbType="NVarChar(100)")] string department)
		{
			return this.CreateMethodCallQuery<fn_GetDepartmentEmployeesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), department);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="CustomerComplaints.fn_getCauseChildTree", IsComposable=true)]
		public IQueryable<fn_getCauseChildTreeResult> fn_getCauseChildTree([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string complaint)
		{
			return this.CreateMethodCallQuery<fn_getCauseChildTreeResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), complaint);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HumanResources.fn_GetEmployees", IsComposable=true)]
		public IQueryable<fn_GetEmployeesResult> fn_GetEmployees()
		{
			return this.CreateMethodCallQuery<fn_GetEmployeesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_GetTableColumns", IsComposable=true)]
		public IQueryable<fn_GetTableColumnsResult> fn_GetTableColumns([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string schema, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string tablename)
		{
			return this.CreateMethodCallQuery<fn_GetTableColumnsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schema, tablename);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ChangeControl.fn_GetOriginationDateByMonth", IsComposable=true)]
		public IQueryable<fn_GetOriginationDateByMonthResult> fn_GetOriginationDateByMonth()
		{
			return this.CreateMethodCallQuery<fn_GetOriginationDateByMonthResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ProblemManagement.fn_getProblemCauseChildTree", IsComposable=true)]
		public IQueryable<fn_getProblemCauseChildTreeResult> fn_getProblemCauseChildTree([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> problemid)
		{
			return this.CreateMethodCallQuery<fn_getProblemCauseChildTreeResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), problemid);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ProblemManagement.fn_GetExecutives", IsComposable=true)]
		public IQueryable<fn_GetExecutivesResult> fn_GetExecutives()
		{
			return this.CreateMethodCallQuery<fn_GetExecutivesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ProblemManagement.fn_GetOriginators", IsComposable=true)]
		public IQueryable<fn_GetOriginatorsResult> fn_GetOriginators()
		{
			return this.CreateMethodCallQuery<fn_GetOriginatorsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ProblemManagement.fn_GetOwners", IsComposable=true)]
		public IQueryable<fn_GetOwnersResult> fn_GetOwners()
		{
			return this.CreateMethodCallQuery<fn_GetOwnersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HumanResources.fn_GetDepartmentManagers", IsComposable=true)]
		public IQueryable<fn_GetDepartmentManagersResult> fn_GetDepartmentManagers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Department", DbType="NVarChar(100)")] string department)
		{
			return this.CreateMethodCallQuery<fn_GetDepartmentManagersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), department);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ProjectManagement.fn_GetLeaders", IsComposable=true)]
		public IQueryable<fn_GetLeadersResult> fn_GetLeaders()
		{
			return this.CreateMethodCallQuery<fn_GetLeadersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="AuditManagement.fn_GetAuditors", IsComposable=true)]
		public IQueryable<fn_GetAuditorsResult> fn_GetAuditors()
		{
			return this.CreateMethodCallQuery<fn_GetAuditorsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="AuditManagement.fn_getFindingCauseChildTree", IsComposable=true)]
		public IQueryable<fn_getFindingCauseChildTreeResult> fn_getFindingCauseChildTree([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> findingid)
		{
			return this.CreateMethodCallQuery<fn_getFindingCauseChildTreeResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), findingid);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="AuditManagement.fn_GetActionees", IsComposable=true)]
		public IQueryable<fn_GetActioneesResult1> fn_GetActionees1()
		{
			return this.CreateMethodCallQuery<fn_GetActioneesResult1>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ProblemManagement.fn_GetActionees", IsComposable=true)]
		public IQueryable<fn_GetActioneesResult> fn_GetActionees()
		{
			return this.CreateMethodCallQuery<fn_GetActioneesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="EmployeeTraining.fn_GetStartDateByYear", IsComposable=true)]
		public IQueryable<fn_GetStartDateByYearResult> fn_GetStartDateByYear()
		{
			return this.CreateMethodCallQuery<fn_GetStartDateByYearResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ManagementReviews.fn_GetRepresentatives", IsComposable=true)]
		public IQueryable<fn_GetRepresentativesResult> fn_GetRepresentatives()
		{
			return this.CreateMethodCallQuery<fn_GetRepresentativesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ManagementReviews.fn_GetActionees", IsComposable=true)]
		public IQueryable<fn_GetActioneesResult2> fn_GetActionees2()
		{
			return this.CreateMethodCallQuery<fn_GetActioneesResult2>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="ManagementReviews.fn_GetPlannedClosedTasksByYear", IsComposable=true)]
		public IQueryable<fn_GetPlannedClosedTasksByYearResult> fn_GetPlannedClosedTasksByYear()
		{
			return this.CreateMethodCallQuery<fn_GetPlannedClosedTasksByYearResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="AssetManagement.fn_GetAssetOwner", IsComposable=true)]
		public IQueryable<fn_GetAssetOwnerResult> fn_GetAssetOwner()
		{
			return this.CreateMethodCallQuery<fn_GetAssetOwnerResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_getRootCauseChildTree", IsComposable=true)]
		public IQueryable<fn_getRootCauseChildTreeResult> fn_getRootCauseChildTree([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> causeid)
		{
			return this.CreateMethodCallQuery<fn_getRootCauseChildTreeResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), causeid);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_getCauseTreeHierarchy", IsComposable=true)]
		public IQueryable<fn_getCauseTreeHierarchyResult> fn_getCauseTreeHierarchy()
		{
			return this.CreateMethodCallQuery<fn_getCauseTreeHierarchyResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="RiskManagement.fn_GetActionees", IsComposable=true)]
		public IQueryable<fn_GetActioneesResult3> fn_GetActionees3()
		{
			return this.CreateMethodCallQuery<fn_GetActioneesResult3>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Grades")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeID;
		
		private string _GradeCode;
		
		private string _Grade1;
		
		private string _Step;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<OrganizationAssignment> _OrganizationAssignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnGradeCodeChanging(string value);
    partial void OnGradeCodeChanged();
    partial void OnGrade1Changing(string value);
    partial void OnGrade1Changed();
    partial void OnStepChanging(string value);
    partial void OnStepChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Grade()
		{
			this._OrganizationAssignments = new EntitySet<OrganizationAssignment>(new Action<OrganizationAssignment>(this.attach_OrganizationAssignments), new Action<OrganizationAssignment>(this.detach_OrganizationAssignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeCode", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GradeCode
		{
			get
			{
				return this._GradeCode;
			}
			set
			{
				if ((this._GradeCode != value))
				{
					this.OnGradeCodeChanging(value);
					this.SendPropertyChanging();
					this._GradeCode = value;
					this.SendPropertyChanged("GradeCode");
					this.OnGradeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Grade", Storage="_Grade1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Grade1
		{
			get
			{
				return this._Grade1;
			}
			set
			{
				if ((this._Grade1 != value))
				{
					this.OnGrade1Changing(value);
					this.SendPropertyChanging();
					this._Grade1 = value;
					this.SendPropertyChanged("Grade1");
					this.OnGrade1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Step", DbType="NVarChar(10)")]
		public string Step
		{
			get
			{
				return this._Step;
			}
			set
			{
				if ((this._Step != value))
				{
					this.OnStepChanging(value);
					this.SendPropertyChanging();
					this._Step = value;
					this.SendPropertyChanged("Step");
					this.OnStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_OrganizationAssignment", Storage="_OrganizationAssignments", ThisKey="GradeID", OtherKey="GradeID")]
		public EntitySet<OrganizationAssignment> OrganizationAssignments
		{
			get
			{
				return this._OrganizationAssignments;
			}
			set
			{
				this._OrganizationAssignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationAssignments(OrganizationAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_OrganizationAssignments(OrganizationAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.PositionStatus")]
	public partial class PositionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionStatusID;
		
		private string _PositionStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Position> _Positions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionStatusIDChanging(int value);
    partial void OnPositionStatusIDChanged();
    partial void OnPositionStatus1Changing(string value);
    partial void OnPositionStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public PositionStatus()
		{
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionStatusID
		{
			get
			{
				return this._PositionStatusID;
			}
			set
			{
				if ((this._PositionStatusID != value))
				{
					this.OnPositionStatusIDChanging(value);
					this.SendPropertyChanging();
					this._PositionStatusID = value;
					this.SendPropertyChanged("PositionStatusID");
					this.OnPositionStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PositionStatus", Storage="_PositionStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PositionStatus1
		{
			get
			{
				return this._PositionStatus1;
			}
			set
			{
				if ((this._PositionStatus1 != value))
				{
					this.OnPositionStatus1Changing(value);
					this.SendPropertyChanging();
					this._PositionStatus1 = value;
					this.SendPropertyChanged("PositionStatus1");
					this.OnPositionStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PositionStatus_Position", Storage="_Positions", ThisKey="PositionStatusID", OtherKey="PositionStatusID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.PositionStatus = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.PositionStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.OrganizationLevel")]
	public partial class OrganizationLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelID;
		
		private string _ORGLevel;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<OrganizationUnit> _OrganizationUnits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnORGLevelChanging(string value);
    partial void OnORGLevelChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public OrganizationLevel()
		{
			this._OrganizationUnits = new EntitySet<OrganizationUnit>(new Action<OrganizationUnit>(this.attach_OrganizationUnits), new Action<OrganizationUnit>(this.detach_OrganizationUnits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORGLevel", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ORGLevel
		{
			get
			{
				return this._ORGLevel;
			}
			set
			{
				if ((this._ORGLevel != value))
				{
					this.OnORGLevelChanging(value);
					this.SendPropertyChanging();
					this._ORGLevel = value;
					this.SendPropertyChanged("ORGLevel");
					this.OnORGLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL", IsDbGenerated=true)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationLevel_OrganizationUnit", Storage="_OrganizationUnits", ThisKey="LevelID", OtherKey="ORGLevelID")]
		public EntitySet<OrganizationUnit> OrganizationUnits
		{
			get
			{
				return this._OrganizationUnits;
			}
			set
			{
				this._OrganizationUnits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationUnits(OrganizationUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationLevel = this;
		}
		
		private void detach_OrganizationUnits(OrganizationUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.PhoneNumberType")]
	public partial class PhoneNumberType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PhoneNumberTypeId;
		
		private string _Name;
		
		private string _Name_Ar;
		
		private EntitySet<CustomerContact> _CustomerContacts;
		
		private EntitySet<ContactDetail> _ContactDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneNumberTypeIdChanging(long value);
    partial void OnPhoneNumberTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnName_ArChanging(string value);
    partial void OnName_ArChanged();
    #endregion
		
		public PhoneNumberType()
		{
			this._CustomerContacts = new EntitySet<CustomerContact>(new Action<CustomerContact>(this.attach_CustomerContacts), new Action<CustomerContact>(this.detach_CustomerContacts));
			this._ContactDetails = new EntitySet<ContactDetail>(new Action<ContactDetail>(this.attach_ContactDetails), new Action<ContactDetail>(this.detach_ContactDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberTypeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PhoneNumberTypeId
		{
			get
			{
				return this._PhoneNumberTypeId;
			}
			set
			{
				if ((this._PhoneNumberTypeId != value))
				{
					this.OnPhoneNumberTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberTypeId = value;
					this.SendPropertyChanged("PhoneNumberTypeId");
					this.OnPhoneNumberTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_Ar", DbType="NVarChar(50)")]
		public string Name_Ar
		{
			get
			{
				return this._Name_Ar;
			}
			set
			{
				if ((this._Name_Ar != value))
				{
					this.OnName_ArChanging(value);
					this.SendPropertyChanging();
					this._Name_Ar = value;
					this.SendPropertyChanged("Name_Ar");
					this.OnName_ArChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneNumberType_CustomerContact", Storage="_CustomerContacts", ThisKey="PhoneNumberTypeId", OtherKey="ContactTypeID")]
		public EntitySet<CustomerContact> CustomerContacts
		{
			get
			{
				return this._CustomerContacts;
			}
			set
			{
				this._CustomerContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneNumberType_ContactDetail", Storage="_ContactDetails", ThisKey="PhoneNumberTypeId", OtherKey="ContactTypeID")]
		public EntitySet<ContactDetail> ContactDetails
		{
			get
			{
				return this._ContactDetails;
			}
			set
			{
				this._ContactDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = this;
		}
		
		private void detach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = null;
		}
		
		private void attach_ContactDetails(ContactDetail entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = this;
		}
		
		private void detach_ContactDetails(ContactDetail entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="DocumentList.DocumentStatus")]
	public partial class DocumentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentStatusID;
		
		private string _DocumentStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentStatusIDChanging(int value);
    partial void OnDocumentStatusIDChanged();
    partial void OnDocumentStatus1Changing(string value);
    partial void OnDocumentStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public DocumentStatus()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentStatusID
		{
			get
			{
				return this._DocumentStatusID;
			}
			set
			{
				if ((this._DocumentStatusID != value))
				{
					this.OnDocumentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentStatusID = value;
					this.SendPropertyChanged("DocumentStatusID");
					this.OnDocumentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="DocumentStatus", Storage="_DocumentStatus1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DocumentStatus1
		{
			get
			{
				return this._DocumentStatus1;
			}
			set
			{
				if ((this._DocumentStatus1 != value))
				{
					this.OnDocumentStatus1Changing(value);
					this.SendPropertyChanging();
					this._DocumentStatus1 = value;
					this.SendPropertyChanged("DocumentStatus1");
					this.OnDocumentStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentStatus_Document", Storage="_Documents", ThisKey="DocumentStatusID", OtherKey="DocumentStatusID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentStatus = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Period")]
	public partial class Period : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeriodID;
		
		private string _Period1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<ContractExtension> _ContractExtensions;
		
		private EntitySet<ContractGroup> _ContractGroups;
		
		private EntitySet<TrainingCourse> _TrainingCourses;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<Record> _Records1;
		
		private EntitySet<Asset> _Assets;
		
		private EntitySet<Asset> _Assets1;
		
		private EntitySet<Asset> _Assets2;
		
		private EntitySet<Asset> _Assets3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodIDChanging(int value);
    partial void OnPeriodIDChanged();
    partial void OnPeriod1Changing(string value);
    partial void OnPeriod1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Period()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._ContractExtensions = new EntitySet<ContractExtension>(new Action<ContractExtension>(this.attach_ContractExtensions), new Action<ContractExtension>(this.detach_ContractExtensions));
			this._ContractGroups = new EntitySet<ContractGroup>(new Action<ContractGroup>(this.attach_ContractGroups), new Action<ContractGroup>(this.detach_ContractGroups));
			this._TrainingCourses = new EntitySet<TrainingCourse>(new Action<TrainingCourse>(this.attach_TrainingCourses), new Action<TrainingCourse>(this.detach_TrainingCourses));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Records1 = new EntitySet<Record>(new Action<Record>(this.attach_Records1), new Action<Record>(this.detach_Records1));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._Assets1 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets1), new Action<Asset>(this.detach_Assets1));
			this._Assets2 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets2), new Action<Asset>(this.detach_Assets2));
			this._Assets3 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets3), new Action<Asset>(this.detach_Assets3));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Period", Storage="_Period1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Period1
		{
			get
			{
				return this._Period1;
			}
			set
			{
				if ((this._Period1 != value))
				{
					this.OnPeriod1Changing(value);
					this.SendPropertyChanging();
					this._Period1 = value;
					this.SendPropertyChanged("Period1");
					this.OnPeriod1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Document", Storage="_Documents", ThisKey="PeriodID", OtherKey="PeriodID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_ContractExtension", Storage="_ContractExtensions", ThisKey="PeriodID", OtherKey="PeriodID")]
		public EntitySet<ContractExtension> ContractExtensions
		{
			get
			{
				return this._ContractExtensions;
			}
			set
			{
				this._ContractExtensions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_ContractGroup", Storage="_ContractGroups", ThisKey="PeriodID", OtherKey="PeriodID")]
		public EntitySet<ContractGroup> ContractGroups
		{
			get
			{
				return this._ContractGroups;
			}
			set
			{
				this._ContractGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_TrainingCourse", Storage="_TrainingCourses", ThisKey="PeriodID", OtherKey="PeriodID")]
		public EntitySet<TrainingCourse> TrainingCourses
		{
			get
			{
				return this._TrainingCourses;
			}
			set
			{
				this._TrainingCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Record", Storage="_Records", ThisKey="PeriodID", OtherKey="RetentionPeriodID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Record1", Storage="_Records1", ThisKey="PeriodID", OtherKey="ReviewPeriodID")]
		public EntitySet<Record> Records1
		{
			get
			{
				return this._Records1;
			}
			set
			{
				this._Records1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset", Storage="_Assets", ThisKey="PeriodID", OtherKey="CalibrationPeriodID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset1", Storage="_Assets1", ThisKey="PeriodID", OtherKey="ElectricalTestPeriodID")]
		public EntitySet<Asset> Assets1
		{
			get
			{
				return this._Assets1;
			}
			set
			{
				this._Assets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset2", Storage="_Assets2", ThisKey="PeriodID", OtherKey="MaintenancePeriodID")]
		public EntitySet<Asset> Assets2
		{
			get
			{
				return this._Assets2;
			}
			set
			{
				this._Assets2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset3", Storage="_Assets3", ThisKey="PeriodID", OtherKey="PeriodID")]
		public EntitySet<Asset> Assets3
		{
			get
			{
				return this._Assets3;
			}
			set
			{
				this._Assets3.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Period = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Period = null;
		}
		
		private void attach_ContractExtensions(ContractExtension entity)
		{
			this.SendPropertyChanging();
			entity.Period = this;
		}
		
		private void detach_ContractExtensions(ContractExtension entity)
		{
			this.SendPropertyChanging();
			entity.Period = null;
		}
		
		private void attach_ContractGroups(ContractGroup entity)
		{
			this.SendPropertyChanging();
			entity.Period = this;
		}
		
		private void detach_ContractGroups(ContractGroup entity)
		{
			this.SendPropertyChanging();
			entity.Period = null;
		}
		
		private void attach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.Period = this;
		}
		
		private void detach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.Period = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Period = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Period = null;
		}
		
		private void attach_Records1(Record entity)
		{
			this.SendPropertyChanging();
			entity.Period1 = this;
		}
		
		private void detach_Records1(Record entity)
		{
			this.SendPropertyChanging();
			entity.Period1 = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period = null;
		}
		
		private void attach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period1 = this;
		}
		
		private void detach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period1 = null;
		}
		
		private void attach_Assets2(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period2 = this;
		}
		
		private void detach_Assets2(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period2 = null;
		}
		
		private void attach_Assets3(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period3 = this;
		}
		
		private void detach_Assets3(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Period3 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ChangeControl.ChangeControlType")]
	public partial class ChangeControlType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CCNTypeID;
		
		private string _CCNType;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ChangeControlNote> _ChangeControlNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCNTypeIDChanging(int value);
    partial void OnCCNTypeIDChanged();
    partial void OnCCNTypeChanging(string value);
    partial void OnCCNTypeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ChangeControlType()
		{
			this._ChangeControlNotes = new EntitySet<ChangeControlNote>(new Action<ChangeControlNote>(this.attach_ChangeControlNotes), new Action<ChangeControlNote>(this.detach_ChangeControlNotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CCNTypeID
		{
			get
			{
				return this._CCNTypeID;
			}
			set
			{
				if ((this._CCNTypeID != value))
				{
					this.OnCCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CCNTypeID = value;
					this.SendPropertyChanged("CCNTypeID");
					this.OnCCNTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CCNType
		{
			get
			{
				return this._CCNType;
			}
			set
			{
				if ((this._CCNType != value))
				{
					this.OnCCNTypeChanging(value);
					this.SendPropertyChanging();
					this._CCNType = value;
					this.SendPropertyChanged("CCNType");
					this.OnCCNTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControlType_ChangeControlNote", Storage="_ChangeControlNotes", ThisKey="CCNTypeID", OtherKey="CCNTypeID")]
		public EntitySet<ChangeControlNote> ChangeControlNotes
		{
			get
			{
				return this._ChangeControlNotes;
			}
			set
			{
				this._ChangeControlNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControlType = this;
		}
		
		private void detach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControlType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApprovalStatus")]
	public partial class ApprovalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApprovalStatusID;
		
		private string _ApprovalStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ChangeControlApprovalMember> _ChangeControlApprovalMembers;
		
		private EntitySet<TrainingCourseEnrollment> _TrainingCourseEnrollments;
		
		private EntitySet<ProblemApprovalMember> _ProblemApprovalMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApprovalStatusIDChanging(int value);
    partial void OnApprovalStatusIDChanged();
    partial void OnApprovalStatus1Changing(string value);
    partial void OnApprovalStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ApprovalStatus()
		{
			this._ChangeControlApprovalMembers = new EntitySet<ChangeControlApprovalMember>(new Action<ChangeControlApprovalMember>(this.attach_ChangeControlApprovalMembers), new Action<ChangeControlApprovalMember>(this.detach_ChangeControlApprovalMembers));
			this._TrainingCourseEnrollments = new EntitySet<TrainingCourseEnrollment>(new Action<TrainingCourseEnrollment>(this.attach_TrainingCourseEnrollments), new Action<TrainingCourseEnrollment>(this.detach_TrainingCourseEnrollments));
			this._ProblemApprovalMembers = new EntitySet<ProblemApprovalMember>(new Action<ProblemApprovalMember>(this.attach_ProblemApprovalMembers), new Action<ProblemApprovalMember>(this.detach_ProblemApprovalMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApprovalStatusID
		{
			get
			{
				return this._ApprovalStatusID;
			}
			set
			{
				if ((this._ApprovalStatusID != value))
				{
					this.OnApprovalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatusID = value;
					this.SendPropertyChanged("ApprovalStatusID");
					this.OnApprovalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ApprovalStatus", Storage="_ApprovalStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ApprovalStatus1
		{
			get
			{
				return this._ApprovalStatus1;
			}
			set
			{
				if ((this._ApprovalStatus1 != value))
				{
					this.OnApprovalStatus1Changing(value);
					this.SendPropertyChanging();
					this._ApprovalStatus1 = value;
					this.SendPropertyChanged("ApprovalStatus1");
					this.OnApprovalStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalStatus_ChangeControlApprovalMember", Storage="_ChangeControlApprovalMembers", ThisKey="ApprovalStatusID", OtherKey="ApprovalStatusID")]
		public EntitySet<ChangeControlApprovalMember> ChangeControlApprovalMembers
		{
			get
			{
				return this._ChangeControlApprovalMembers;
			}
			set
			{
				this._ChangeControlApprovalMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalStatus_TrainingCourseEnrollment", Storage="_TrainingCourseEnrollments", ThisKey="ApprovalStatusID", OtherKey="ApprovalStatusID")]
		public EntitySet<TrainingCourseEnrollment> TrainingCourseEnrollments
		{
			get
			{
				return this._TrainingCourseEnrollments;
			}
			set
			{
				this._TrainingCourseEnrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalStatus_ProblemApprovalMember", Storage="_ProblemApprovalMembers", ThisKey="ApprovalStatusID", OtherKey="ApprovalStatusID")]
		public EntitySet<ProblemApprovalMember> ProblemApprovalMembers
		{
			get
			{
				return this._ProblemApprovalMembers;
			}
			set
			{
				this._ProblemApprovalMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = this;
		}
		
		private void detach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = null;
		}
		
		private void attach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = this;
		}
		
		private void detach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = null;
		}
		
		private void attach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = this;
		}
		
		private void detach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Territory.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private System.Nullable<int> _DialCode;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<CustomerAddress> _CustomerAddresses;
		
		private EntitySet<EmployeeCitizenship> _EmployeeCitizenships;
		
		private EntitySet<OrganizationUnit> _OrganizationUnits;
		
		private EntitySet<TrainingCourseLocation> _TrainingCourseLocations;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Education> _Educations;

        private EntitySet<Region> _Regions;

        private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnDialCodeChanging(System.Nullable<int> value);
    partial void OnDialCodeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Country()
		{
			this._CustomerAddresses = new EntitySet<CustomerAddress>(new Action<CustomerAddress>(this.attach_CustomerAddresses), new Action<CustomerAddress>(this.detach_CustomerAddresses));
			this._EmployeeCitizenships = new EntitySet<EmployeeCitizenship>(new Action<EmployeeCitizenship>(this.attach_EmployeeCitizenships), new Action<EmployeeCitizenship>(this.detach_EmployeeCitizenships));
			this._OrganizationUnits = new EntitySet<OrganizationUnit>(new Action<OrganizationUnit>(this.attach_OrganizationUnits), new Action<OrganizationUnit>(this.detach_OrganizationUnits));
			this._TrainingCourseLocations = new EntitySet<TrainingCourseLocation>(new Action<TrainingCourseLocation>(this.attach_TrainingCourseLocations), new Action<TrainingCourseLocation>(this.detach_TrainingCourseLocations));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
            this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
            this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DialCode", DbType="Int")]
		public System.Nullable<int> DialCode
		{
			get
			{
				return this._DialCode;
			}
			set
			{
				if ((this._DialCode != value))
				{
					this.OnDialCodeChanging(value);
					this.SendPropertyChanging();
					this._DialCode = value;
					this.SendPropertyChanged("DialCode");
					this.OnDialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_CustomerAddress", Storage="_CustomerAddresses", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<CustomerAddress> CustomerAddresses
		{
			get
			{
				return this._CustomerAddresses;
			}
			set
			{
				this._CustomerAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_EmployeeCitizenship", Storage="_EmployeeCitizenships", ThisKey="CountryID", OtherKey="NationalityID")]
		public EntitySet<EmployeeCitizenship> EmployeeCitizenships
		{
			get
			{
				return this._EmployeeCitizenships;
			}
			set
			{
				this._EmployeeCitizenships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_OrganizationUnit", Storage="_OrganizationUnits", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<OrganizationUnit> OrganizationUnits
		{
			get
			{
				return this._OrganizationUnits;
			}
			set
			{
				this._OrganizationUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_TrainingCourseLocation", Storage="_TrainingCourseLocations", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<TrainingCourseLocation> TrainingCourseLocations
		{
			get
			{
				return this._TrainingCourseLocations;
			}
			set
			{
				this._TrainingCourseLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Addresses", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Employee", Storage="_Employees", ThisKey="CountryID", OtherKey="CountryBirthID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Education", Storage="_Educations", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Country_Region", Storage = "_Regions", ThisKey = "CountryID", OtherKey = "CountryID")]
        public EntitySet<Region> Regions
        {
            get
            {
                return this._Regions;
            }
            set
            {
                this._Regions.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Country_City", Storage = "_Cities", ThisKey = "CountryID", OtherKey = "CountryID")]
        public EntitySet<City> Cities
        {
            get
            {
                return this._Cities;
            }
            set
            {
                this._Cities.Assign(value);
            }
        }
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_EmployeeCitizenships(EmployeeCitizenship entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_EmployeeCitizenships(EmployeeCitizenship entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_OrganizationUnits(OrganizationUnit entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_OrganizationUnits(OrganizationUnit entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_TrainingCourseLocations(TrainingCourseLocation entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_TrainingCourseLocations(TrainingCourseLocation entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}

        private void attach_Regions(Region entity)
        {
            this.SendPropertyChanging();
            entity.Country = this;
        }

        private void detach_Regions(Region entity)
        {
            this.SendPropertyChanging();
            entity.Country = null;
        }

        private void attach_Cities(City entity)
        {
            this.SendPropertyChanging();
            entity.Country = this;
        }

        private void detach_Cities(City entity)
        {
            this.SendPropertyChanging();
            entity.Country = null;
        }
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.CustomerAddress")]
	public partial class CustomerAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerAddressID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private System.Nullable<int> _CountryID;

        private System.Nullable<int> _StateID;

        private System.Nullable<int> _CityID;

		private string _City;
		
		private int _CustomerID;
		
		private string _PostalCode;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerAddressIDChanging(int value);
    partial void OnCustomerAddressIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CustomerAddress()
		{
			this._Country = default(EntityRef<Country>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerAddressID
		{
			get
			{
				return this._CustomerAddressID;
			}
			set
			{
				if ((this._CustomerAddressID != value))
				{
					this.OnCustomerAddressIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddressID = value;
					this.SendPropertyChanged("CustomerAddressID");
					this.OnCustomerAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="NVarChar(200)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateID", DbType = "Int")]
        public System.Nullable<int> StateID
        {
            get
            {
                return this._StateID;
            }
            set
            {
                if ((this._StateID != value))
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnStateIDChanging(value);
                    this.SendPropertyChanging();
                    this._StateID = value;
                    this.SendPropertyChanged("StateID");
                    this.OnStateIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CityID", DbType = "Int")]
        public System.Nullable<int> CityID
        {
            get
            {
                return this._CityID;
            }
            set
            {
                if ((this._CityID != value))
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCityIDChanging(value);
                    this.SendPropertyChanging();
                    this._CityID = value;
                    this.SendPropertyChanged("CityID");
                    this.OnCityIDChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(100)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_CustomerAddress", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.CustomerAddresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.CustomerAddresses.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAddress", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerAddresses.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerAddresses.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.MaritalStatus")]
	public partial class MaritalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaritalStatusID;
		
		private string _MaritalStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaritalStatusIDChanging(int value);
    partial void OnMaritalStatusIDChanged();
    partial void OnMaritalStatus1Changing(string value);
    partial void OnMaritalStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public MaritalStatus()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaritalStatusID
		{
			get
			{
				return this._MaritalStatusID;
			}
			set
			{
				if ((this._MaritalStatusID != value))
				{
					this.OnMaritalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusID = value;
					this.SendPropertyChanged("MaritalStatusID");
					this.OnMaritalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MaritalStatus", Storage="_MaritalStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MaritalStatus1
		{
			get
			{
				return this._MaritalStatus1;
			}
			set
			{
				if ((this._MaritalStatus1 != value))
				{
					this.OnMaritalStatus1Changing(value);
					this.SendPropertyChanging();
					this._MaritalStatus1 = value;
					this.SendPropertyChanged("MaritalStatus1");
					this.OnMaritalStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Employee", Storage="_Employees", ThisKey="MaritalStatusID", OtherKey="MaritalStatusID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Religions")]
	public partial class Religion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReligionID;
		
		private string _Religion1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReligionIDChanging(int value);
    partial void OnReligionIDChanged();
    partial void OnReligion1Changing(string value);
    partial void OnReligion1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Religion()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReligionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReligionID
		{
			get
			{
				return this._ReligionID;
			}
			set
			{
				if ((this._ReligionID != value))
				{
					this.OnReligionIDChanging(value);
					this.SendPropertyChanging();
					this._ReligionID = value;
					this.SendPropertyChanged("ReligionID");
					this.OnReligionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Religion", Storage="_Religion1", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Religion1
		{
			get
			{
				return this._Religion1;
			}
			set
			{
				if ((this._Religion1 != value))
				{
					this.OnReligion1Changing(value);
					this.SendPropertyChanging();
					this._Religion1 = value;
					this.SendPropertyChanged("Religion1");
					this.OnReligion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Religion_Employee", Storage="_Employees", ThisKey="ReligionID", OtherKey="ReligionID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Religion = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Religion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderID;
		
		private string _Gender1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnGender1Changing(string value);
    partial void OnGender1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Gender()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Gender", Storage="_Gender1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Gender1
		{
			get
			{
				return this._Gender1;
			}
			set
			{
				if ((this._Gender1 != value))
				{
					this.OnGender1Changing(value);
					this.SendPropertyChanging();
					this._Gender1 = value;
					this.SendPropertyChanged("Gender1");
					this.OnGender1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Employee", Storage="_Employees", ThisKey="GenderID", OtherKey="GenderID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ContractType")]
	public partial class ContractType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractTypeID;
		
		private string _ContractType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Contract> _Contracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractTypeIDChanging(int value);
    partial void OnContractTypeIDChanged();
    partial void OnContractType1Changing(string value);
    partial void OnContractType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ContractType()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContractTypeID
		{
			get
			{
				return this._ContractTypeID;
			}
			set
			{
				if ((this._ContractTypeID != value))
				{
					this.OnContractTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContractTypeID = value;
					this.SendPropertyChanged("ContractTypeID");
					this.OnContractTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ContractType", Storage="_ContractType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContractType1
		{
			get
			{
				return this._ContractType1;
			}
			set
			{
				if ((this._ContractType1 != value))
				{
					this.OnContractType1Changing(value);
					this.SendPropertyChanging();
					this._ContractType1 = value;
					this.SendPropertyChanged("ContractType1");
					this.OnContractType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractType_Contract", Storage="_Contracts", ThisKey="ContractTypeID", OtherKey="ContractTypeID")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractType = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ContractStatus")]
	public partial class ContractStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractStatusID;
		
		private string _ContractStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Contract> _Contracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractStatusIDChanging(int value);
    partial void OnContractStatusIDChanged();
    partial void OnContractStatus1Changing(string value);
    partial void OnContractStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ContractStatus()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContractStatusID
		{
			get
			{
				return this._ContractStatusID;
			}
			set
			{
				if ((this._ContractStatusID != value))
				{
					this.OnContractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ContractStatusID = value;
					this.SendPropertyChanged("ContractStatusID");
					this.OnContractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ContractStatus", Storage="_ContractStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContractStatus1
		{
			get
			{
				return this._ContractStatus1;
			}
			set
			{
				if ((this._ContractStatus1 != value))
				{
					this.OnContractStatus1Changing(value);
					this.SendPropertyChanging();
					this._ContractStatus1 = value;
					this.SendPropertyChanged("ContractStatus1");
					this.OnContractStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractStatus_Contract", Storage="_Contracts", ThisKey="ContractStatusID", OtherKey="ContractStatusID")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractStatus = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.EmployeeCitizenship")]
	public partial class EmployeeCitizenship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CitizenshipID;
		
		private string _PassportNo;
		
		private System.DateTime _IssueDate;
		
		private System.DateTime _ExpiryDate;
		
		private int _NationalityID;
		
		private int _EmployeeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCitizenshipIDChanging(int value);
    partial void OnCitizenshipIDChanged();
    partial void OnPassportNoChanging(string value);
    partial void OnPassportNoChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnExpiryDateChanging(System.DateTime value);
    partial void OnExpiryDateChanged();
    partial void OnNationalityIDChanging(int value);
    partial void OnNationalityIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public EmployeeCitizenship()
		{
			this._Country = default(EntityRef<Country>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CitizenshipID
		{
			get
			{
				return this._CitizenshipID;
			}
			set
			{
				if ((this._CitizenshipID != value))
				{
					this.OnCitizenshipIDChanging(value);
					this.SendPropertyChanging();
					this._CitizenshipID = value;
					this.SendPropertyChanged("CitizenshipID");
					this.OnCitizenshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassportNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PassportNo
		{
			get
			{
				return this._PassportNo;
			}
			set
			{
				if ((this._PassportNo != value))
				{
					this.OnPassportNoChanging(value);
					this.SendPropertyChanging();
					this._PassportNo = value;
					this.SendPropertyChanged("PassportNo");
					this.OnPassportNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityID", DbType="Int NOT NULL")]
		public int NationalityID
		{
			get
			{
				return this._NationalityID;
			}
			set
			{
				if ((this._NationalityID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityIDChanging(value);
					this.SendPropertyChanging();
					this._NationalityID = value;
					this.SendPropertyChanged("NationalityID");
					this.OnNationalityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_EmployeeCitizenship", Storage="_Country", ThisKey="NationalityID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.EmployeeCitizenships.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.EmployeeCitizenships.Add(this);
						this._NationalityID = value.CountryID;
					}
					else
					{
						this._NationalityID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeCitizenship", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeCitizenships.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeCitizenships.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Titles")]
	public partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TitleID;
		
		private string _Title1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Dependant> _Dependants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnTitle1Changing(string value);
    partial void OnTitle1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Title()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Dependants = new EntitySet<Dependant>(new Action<Dependant>(this.attach_Dependants), new Action<Dependant>(this.detach_Dependants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Title", Storage="_Title1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title1
		{
			get
			{
				return this._Title1;
			}
			set
			{
				if ((this._Title1 != value))
				{
					this.OnTitle1Changing(value);
					this.SendPropertyChanging();
					this._Title1 = value;
					this.SendPropertyChanged("Title1");
					this.OnTitle1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Employee", Storage="_Employees", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Dependant", Storage="_Dependants", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<Dependant> Dependants
		{
			get
			{
				return this._Dependants;
			}
			set
			{
				this._Dependants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
		
		private void attach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.OrganizationAssignment")]
	public partial class OrganizationAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssignmentID;
		
		private System.Nullable<int> _PositionID;
		
		private System.Nullable<int> _GradeID;
		
		private System.DateTime _DateofAssignment;
		
		private int _ContractID;
		
		private bool _ActiveFlag;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignmentIDChanging(int value);
    partial void OnAssignmentIDChanged();
    partial void OnPositionIDChanging(System.Nullable<int> value);
    partial void OnPositionIDChanged();
    partial void OnGradeIDChanging(System.Nullable<int> value);
    partial void OnGradeIDChanged();
    partial void OnDateofAssignmentChanging(System.DateTime value);
    partial void OnDateofAssignmentChanged();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public OrganizationAssignment()
		{
			this._Grade = default(EntityRef<Grade>);
			this._Position = default(EntityRef<Position>);
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssignmentID
		{
			get
			{
				return this._AssignmentID;
			}
			set
			{
				if ((this._AssignmentID != value))
				{
					this.OnAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssignmentID = value;
					this.SendPropertyChanged("AssignmentID");
					this.OnAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int")]
		public System.Nullable<int> PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int")]
		public System.Nullable<int> GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofAssignment", DbType="DateTime NOT NULL")]
		public System.DateTime DateofAssignment
		{
			get
			{
				return this._DateofAssignment;
			}
			set
			{
				if ((this._DateofAssignment != value))
				{
					this.OnDateofAssignmentChanging(value);
					this.SendPropertyChanging();
					this._DateofAssignment = value;
					this.SendPropertyChanged("DateofAssignment");
					this.OnDateofAssignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL")]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL", IsDbGenerated=true)]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_OrganizationAssignment", Storage="_Grade", ThisKey="GradeID", OtherKey="GradeID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.OrganizationAssignments.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.OrganizationAssignments.Add(this);
						this._GradeID = value.GradeID;
					}
					else
					{
						this._GradeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_OrganizationAssignment", Storage="_Position", ThisKey="PositionID", OtherKey="PositionID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.OrganizationAssignments.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.OrganizationAssignments.Add(this);
						this._PositionID = value.PositionID;
					}
					else
					{
						this._PositionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_OrganizationAssignment", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.OrganizationAssignments.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.OrganizationAssignments.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Skills")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SkillID;
		
		private string _SkillKey;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<PositionSkill> _PositionSkills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    partial void OnSkillKeyChanging(string value);
    partial void OnSkillKeyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Skill()
		{
			this._PositionSkills = new EntitySet<PositionSkill>(new Action<PositionSkill>(this.attach_PositionSkills), new Action<PositionSkill>(this.detach_PositionSkills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillKey", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SkillKey
		{
			get
			{
				return this._SkillKey;
			}
			set
			{
				if ((this._SkillKey != value))
				{
					this.OnSkillKeyChanging(value);
					this.SendPropertyChanging();
					this._SkillKey = value;
					this.SendPropertyChanged("SkillKey");
					this.OnSkillKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_PositionSkill", Storage="_PositionSkills", ThisKey="SkillID", OtherKey="SkillID")]
		public EntitySet<PositionSkill> PositionSkills
		{
			get
			{
				return this._PositionSkills;
			}
			set
			{
				this._PositionSkills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PositionSkills(PositionSkill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_PositionSkills(PositionSkill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.PositionSkills")]
	public partial class PositionSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionID;
		
		private int _SkillID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Skill> _Skill;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public PositionSkill()
		{
			this._Skill = default(EntityRef<Skill>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_PositionSkill", Storage="_Skill", ThisKey="SkillID", OtherKey="SkillID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.PositionSkills.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.PositionSkills.Add(this);
						this._SkillID = value.SkillID;
					}
					else
					{
						this._SkillID = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_PositionSkill", Storage="_Position", ThisKey="PositionID", OtherKey="PositionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.PositionSkills.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.PositionSkills.Add(this);
						this._PositionID = value.PositionID;
					}
					else
					{
						this._PositionID = default(int);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Causes")]
	public partial class Cause : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CauseID;
		
		private string _CauseName;
		
		private string _Description;
		
		private System.Nullable<int> _RootCauseID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Cause> _Causes;
		
		private EntitySet<Finding> _Findings;
		
		private EntitySet<Problem> _Problems;
		
		private EntityRef<Cause> _Cause1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCauseIDChanging(int value);
    partial void OnCauseIDChanged();
    partial void OnCauseNameChanging(string value);
    partial void OnCauseNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRootCauseIDChanging(System.Nullable<int> value);
    partial void OnRootCauseIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Cause()
		{
			this._Causes = new EntitySet<Cause>(new Action<Cause>(this.attach_Causes), new Action<Cause>(this.detach_Causes));
			this._Findings = new EntitySet<Finding>(new Action<Finding>(this.attach_Findings), new Action<Finding>(this.detach_Findings));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Cause1 = default(EntityRef<Cause>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					this.OnCauseIDChanging(value);
					this.SendPropertyChanging();
					this._CauseID = value;
					this.SendPropertyChanged("CauseID");
					this.OnCauseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CauseName
		{
			get
			{
				return this._CauseName;
			}
			set
			{
				if ((this._CauseName != value))
				{
					this.OnCauseNameChanging(value);
					this.SendPropertyChanging();
					this._CauseName = value;
					this.SendPropertyChanged("CauseName");
					this.OnCauseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootCauseID", DbType="Int")]
		public System.Nullable<int> RootCauseID
		{
			get
			{
				return this._RootCauseID;
			}
			set
			{
				if ((this._RootCauseID != value))
				{
					if (this._Cause1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootCauseIDChanging(value);
					this.SendPropertyChanging();
					this._RootCauseID = value;
					this.SendPropertyChanged("RootCauseID");
					this.OnRootCauseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cause_Cause", Storage="_Causes", ThisKey="CauseID", OtherKey="RootCauseID")]
		public EntitySet<Cause> Causes
		{
			get
			{
				return this._Causes;
			}
			set
			{
				this._Causes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cause_Finding", Storage="_Findings", ThisKey="CauseID", OtherKey="RootCauseID")]
		public EntitySet<Finding> Findings
		{
			get
			{
				return this._Findings;
			}
			set
			{
				this._Findings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cause_Problem", Storage="_Problems", ThisKey="CauseID", OtherKey="CauseID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cause_Cause", Storage="_Cause1", ThisKey="RootCauseID", OtherKey="CauseID", IsForeignKey=true)]
		public Cause Cause1
		{
			get
			{
				return this._Cause1.Entity;
			}
			set
			{
				Cause previousValue = this._Cause1.Entity;
				if (((previousValue != value) 
							|| (this._Cause1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cause1.Entity = null;
						previousValue.Causes.Remove(this);
					}
					this._Cause1.Entity = value;
					if ((value != null))
					{
						value.Causes.Add(this);
						this._RootCauseID = value.CauseID;
					}
					else
					{
						this._RootCauseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cause1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Causes(Cause entity)
		{
			this.SendPropertyChanging();
			entity.Cause1 = this;
		}
		
		private void detach_Causes(Cause entity)
		{
			this.SendPropertyChanging();
			entity.Cause1 = null;
		}
		
		private void attach_Findings(Finding entity)
		{
			this.SendPropertyChanging();
			entity.Cause = this;
		}
		
		private void detach_Findings(Finding entity)
		{
			this.SendPropertyChanging();
			entity.Cause = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Cause = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Cause = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApprovalMemberType")]
	public partial class ApprovalMemberType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberTypeID;
		
		private string _MemberType;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ChangeControlApprovalMember> _ChangeControlApprovalMembers;
		
		private EntitySet<ProblemApprovalMember> _ProblemApprovalMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberTypeIDChanging(int value);
    partial void OnMemberTypeIDChanged();
    partial void OnMemberTypeChanging(string value);
    partial void OnMemberTypeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ApprovalMemberType()
		{
			this._ChangeControlApprovalMembers = new EntitySet<ChangeControlApprovalMember>(new Action<ChangeControlApprovalMember>(this.attach_ChangeControlApprovalMembers), new Action<ChangeControlApprovalMember>(this.detach_ChangeControlApprovalMembers));
			this._ProblemApprovalMembers = new EntitySet<ProblemApprovalMember>(new Action<ProblemApprovalMember>(this.attach_ProblemApprovalMembers), new Action<ProblemApprovalMember>(this.detach_ProblemApprovalMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MemberType
		{
			get
			{
				return this._MemberType;
			}
			set
			{
				if ((this._MemberType != value))
				{
					this.OnMemberTypeChanging(value);
					this.SendPropertyChanging();
					this._MemberType = value;
					this.SendPropertyChanged("MemberType");
					this.OnMemberTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalMemberType_ChangeControlApprovalMember", Storage="_ChangeControlApprovalMembers", ThisKey="MemberTypeID", OtherKey="MemberTypeID")]
		public EntitySet<ChangeControlApprovalMember> ChangeControlApprovalMembers
		{
			get
			{
				return this._ChangeControlApprovalMembers;
			}
			set
			{
				this._ChangeControlApprovalMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalMemberType_ProblemApprovalMember", Storage="_ProblemApprovalMembers", ThisKey="MemberTypeID", OtherKey="MemberTypeID")]
		public EntitySet<ProblemApprovalMember> ProblemApprovalMembers
		{
			get
			{
				return this._ProblemApprovalMembers;
			}
			set
			{
				this._ProblemApprovalMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalMemberType = this;
		}
		
		private void detach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalMemberType = null;
		}
		
		private void attach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalMemberType = this;
		}
		
		private void detach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ApprovalMemberType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISOProcesses")]
	public partial class ISOProcess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ISOProcessID;
		
		private string _Tag;
		
		private int _ISOStandardID;
		
		private string _Process;
		
		private string _Description;
		
		private System.Nullable<int> _ParentProcessID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ISOProcess> _ISOProcesses;
		
		private EntitySet<CheckList> _CheckLists;
		
		private EntityRef<ISOProcess> _ISOProcess1;
		
		private EntityRef<ISOStandard> _ISOStandard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnISOProcessIDChanging(int value);
    partial void OnISOProcessIDChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnISOStandardIDChanging(int value);
    partial void OnISOStandardIDChanged();
    partial void OnProcessChanging(string value);
    partial void OnProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentProcessIDChanging(System.Nullable<int> value);
    partial void OnParentProcessIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ISOProcess()
		{
			this._ISOProcesses = new EntitySet<ISOProcess>(new Action<ISOProcess>(this.attach_ISOProcesses), new Action<ISOProcess>(this.detach_ISOProcesses));
			this._CheckLists = new EntitySet<CheckList>(new Action<CheckList>(this.attach_CheckLists), new Action<CheckList>(this.detach_CheckLists));
			this._ISOProcess1 = default(EntityRef<ISOProcess>);
			this._ISOStandard = default(EntityRef<ISOStandard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOProcessID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ISOProcessID
		{
			get
			{
				return this._ISOProcessID;
			}
			set
			{
				if ((this._ISOProcessID != value))
				{
					this.OnISOProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ISOProcessID = value;
					this.SendPropertyChanged("ISOProcessID");
					this.OnISOProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="NChar(10)")]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOStandardID", DbType="Int NOT NULL")]
		public int ISOStandardID
		{
			get
			{
				return this._ISOStandardID;
			}
			set
			{
				if ((this._ISOStandardID != value))
				{
					if (this._ISOStandard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISOStandardIDChanging(value);
					this.SendPropertyChanging();
					this._ISOStandardID = value;
					this.SendPropertyChanged("ISOStandardID");
					this.OnISOStandardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Process", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Process
		{
			get
			{
				return this._Process;
			}
			set
			{
				if ((this._Process != value))
				{
					this.OnProcessChanging(value);
					this.SendPropertyChanging();
					this._Process = value;
					this.SendPropertyChanged("Process");
					this.OnProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentProcessID", DbType="Int")]
		public System.Nullable<int> ParentProcessID
		{
			get
			{
				return this._ParentProcessID;
			}
			set
			{
				if ((this._ParentProcessID != value))
				{
					if (this._ISOProcess1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ParentProcessID = value;
					this.SendPropertyChanged("ParentProcessID");
					this.OnParentProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISOProcess_ISOProcess", Storage="_ISOProcesses", ThisKey="ISOProcessID", OtherKey="ParentProcessID")]
		public EntitySet<ISOProcess> ISOProcesses
		{
			get
			{
				return this._ISOProcesses;
			}
			set
			{
				this._ISOProcesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISOProcess_CheckList", Storage="_CheckLists", ThisKey="ISOProcessID", OtherKey="ISOProcessID")]
		public EntitySet<CheckList> CheckLists
		{
			get
			{
				return this._CheckLists;
			}
			set
			{
				this._CheckLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISOProcess_ISOProcess", Storage="_ISOProcess1", ThisKey="ParentProcessID", OtherKey="ISOProcessID", IsForeignKey=true)]
		public ISOProcess ISOProcess1
		{
			get
			{
				return this._ISOProcess1.Entity;
			}
			set
			{
				ISOProcess previousValue = this._ISOProcess1.Entity;
				if (((previousValue != value) 
							|| (this._ISOProcess1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISOProcess1.Entity = null;
						previousValue.ISOProcesses.Remove(this);
					}
					this._ISOProcess1.Entity = value;
					if ((value != null))
					{
						value.ISOProcesses.Add(this);
						this._ParentProcessID = value.ISOProcessID;
					}
					else
					{
						this._ParentProcessID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISOProcess1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISOStandard_ISOProcess", Storage="_ISOStandard", ThisKey="ISOStandardID", OtherKey="ISOStandardID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ISOStandard ISOStandard
		{
			get
			{
				return this._ISOStandard.Entity;
			}
			set
			{
				ISOStandard previousValue = this._ISOStandard.Entity;
				if (((previousValue != value) 
							|| (this._ISOStandard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISOStandard.Entity = null;
						previousValue.ISOProcesses.Remove(this);
					}
					this._ISOStandard.Entity = value;
					if ((value != null))
					{
						value.ISOProcesses.Add(this);
						this._ISOStandardID = value.ISOStandardID;
					}
					else
					{
						this._ISOStandardID = default(int);
					}
					this.SendPropertyChanged("ISOStandard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISOProcesses(ISOProcess entity)
		{
			this.SendPropertyChanging();
			entity.ISOProcess1 = this;
		}
		
		private void detach_ISOProcesses(ISOProcess entity)
		{
			this.SendPropertyChanging();
			entity.ISOProcess1 = null;
		}
		
		private void attach_CheckLists(CheckList entity)
		{
			this.SendPropertyChanging();
			entity.ISOProcess = this;
		}
		
		private void detach_CheckLists(CheckList entity)
		{
			this.SendPropertyChanging();
			entity.ISOProcess = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RAGCondition")]
	public partial class RAGCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RAGConditionID;
		
		private long _ModuleID;
		
		private int _RAGSymbolID;
		
		private string _Condition;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RAGLinkedAction> _RAGLinkedActions;
		
		private EntityRef<RAGConditionSymbol> _RAGConditionSymbol;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRAGConditionIDChanging(int value);
    partial void OnRAGConditionIDChanged();
    partial void OnModuleIDChanging(long value);
    partial void OnModuleIDChanged();
    partial void OnRAGSymbolIDChanging(int value);
    partial void OnRAGSymbolIDChanged();
    partial void OnConditionChanging(string value);
    partial void OnConditionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RAGCondition()
		{
			this._RAGLinkedActions = new EntitySet<RAGLinkedAction>(new Action<RAGLinkedAction>(this.attach_RAGLinkedActions), new Action<RAGLinkedAction>(this.detach_RAGLinkedActions));
			this._RAGConditionSymbol = default(EntityRef<RAGConditionSymbol>);
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAGConditionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RAGConditionID
		{
			get
			{
				return this._RAGConditionID;
			}
			set
			{
				if ((this._RAGConditionID != value))
				{
					this.OnRAGConditionIDChanging(value);
					this.SendPropertyChanging();
					this._RAGConditionID = value;
					this.SendPropertyChanged("RAGConditionID");
					this.OnRAGConditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleID", DbType="BigInt NOT NULL")]
		public long ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAGSymbolID", DbType="Int NOT NULL")]
		public int RAGSymbolID
		{
			get
			{
				return this._RAGSymbolID;
			}
			set
			{
				if ((this._RAGSymbolID != value))
				{
					if (this._RAGConditionSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRAGSymbolIDChanging(value);
					this.SendPropertyChanging();
					this._RAGSymbolID = value;
					this.SendPropertyChanged("RAGSymbolID");
					this.OnRAGSymbolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condition", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RAGCondition_RAGLinkedAction", Storage="_RAGLinkedActions", ThisKey="RAGConditionID", OtherKey="RAGConditionID")]
		public EntitySet<RAGLinkedAction> RAGLinkedActions
		{
			get
			{
				return this._RAGLinkedActions;
			}
			set
			{
				this._RAGLinkedActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RAGConditionSymbol_RAGCondition", Storage="_RAGConditionSymbol", ThisKey="RAGSymbolID", OtherKey="RAGSymbolID", IsForeignKey=true)]
		public RAGConditionSymbol RAGConditionSymbol
		{
			get
			{
				return this._RAGConditionSymbol.Entity;
			}
			set
			{
				RAGConditionSymbol previousValue = this._RAGConditionSymbol.Entity;
				if (((previousValue != value) 
							|| (this._RAGConditionSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RAGConditionSymbol.Entity = null;
						previousValue.RAGConditions.Remove(this);
					}
					this._RAGConditionSymbol.Entity = value;
					if ((value != null))
					{
						value.RAGConditions.Add(this);
						this._RAGSymbolID = value.RAGSymbolID;
					}
					else
					{
						this._RAGSymbolID = default(int);
					}
					this.SendPropertyChanged("RAGConditionSymbol");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_RAGCondition", Storage="_Module", ThisKey="ModuleID", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.RAGConditions.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.RAGConditions.Add(this);
						this._ModuleID = value.ModuleId;
					}
					else
					{
						this._ModuleID = default(long);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RAGLinkedActions(RAGLinkedAction entity)
		{
			this.SendPropertyChanging();
			entity.RAGCondition = this;
		}
		
		private void detach_RAGLinkedActions(RAGLinkedAction entity)
		{
			this.SendPropertyChanging();
			entity.RAGCondition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RAGConditionSymbol")]
	public partial class RAGConditionSymbol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RAGSymbolID;
		
		private string _RAGSymbol;
		
		private System.Data.Linq.Binary _RAGIcon;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RAGCondition> _RAGConditions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRAGSymbolIDChanging(int value);
    partial void OnRAGSymbolIDChanged();
    partial void OnRAGSymbolChanging(string value);
    partial void OnRAGSymbolChanged();
    partial void OnRAGIconChanging(System.Data.Linq.Binary value);
    partial void OnRAGIconChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RAGConditionSymbol()
		{
			this._RAGConditions = new EntitySet<RAGCondition>(new Action<RAGCondition>(this.attach_RAGConditions), new Action<RAGCondition>(this.detach_RAGConditions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAGSymbolID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RAGSymbolID
		{
			get
			{
				return this._RAGSymbolID;
			}
			set
			{
				if ((this._RAGSymbolID != value))
				{
					this.OnRAGSymbolIDChanging(value);
					this.SendPropertyChanging();
					this._RAGSymbolID = value;
					this.SendPropertyChanged("RAGSymbolID");
					this.OnRAGSymbolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAGSymbol", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RAGSymbol
		{
			get
			{
				return this._RAGSymbol;
			}
			set
			{
				if ((this._RAGSymbol != value))
				{
					this.OnRAGSymbolChanging(value);
					this.SendPropertyChanging();
					this._RAGSymbol = value;
					this.SendPropertyChanged("RAGSymbol");
					this.OnRAGSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAGIcon", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RAGIcon
		{
			get
			{
				return this._RAGIcon;
			}
			set
			{
				if ((this._RAGIcon != value))
				{
					this.OnRAGIconChanging(value);
					this.SendPropertyChanging();
					this._RAGIcon = value;
					this.SendPropertyChanged("RAGIcon");
					this.OnRAGIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RAGConditionSymbol_RAGCondition", Storage="_RAGConditions", ThisKey="RAGSymbolID", OtherKey="RAGSymbolID")]
		public EntitySet<RAGCondition> RAGConditions
		{
			get
			{
				return this._RAGConditions;
			}
			set
			{
				this._RAGConditions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RAGConditions(RAGCondition entity)
		{
			this.SendPropertyChanging();
			entity.RAGConditionSymbol = this;
		}
		
		private void detach_RAGConditions(RAGCondition entity)
		{
			this.SendPropertyChanging();
			entity.RAGConditionSymbol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_RAGParameters")]
	public partial class AT_RAGParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ParameterID;
		
		private long _ModuleId;
		
		private string _ParameterText;
		
		private string _ParameterValue;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterIDChanging(long value);
    partial void OnParameterIDChanged();
    partial void OnModuleIdChanging(long value);
    partial void OnModuleIdChanged();
    partial void OnParameterTextChanging(string value);
    partial void OnParameterTextChanged();
    partial void OnParameterValueChanging(string value);
    partial void OnParameterValueChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_RAGParameter()
		{
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="BigInt NOT NULL")]
		public long ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterText", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterText
		{
			get
			{
				return this._ParameterText;
			}
			set
			{
				if ((this._ParameterText != value))
				{
					this.OnParameterTextChanging(value);
					this.SendPropertyChanging();
					this._ParameterText = value;
					this.SendPropertyChanged("ParameterText");
					this.OnParameterTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterValue", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterValue
		{
			get
			{
				return this._ParameterValue;
			}
			set
			{
				if ((this._ParameterValue != value))
				{
					this.OnParameterValueChanging(value);
					this.SendPropertyChanging();
					this._ParameterValue = value;
					this.SendPropertyChanged("ParameterValue");
					this.OnParameterValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_AT_RAGParameter", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.AT_RAGParameters.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.AT_RAGParameters.Add(this);
						this._ModuleId = value.ModuleId;
					}
					else
					{
						this._ModuleId = default(long);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_SMTPserver")]
	public partial class AT_SMTPserver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SMTPServerID;
		
		private string _SMTPserver;

        private string _UserName;

        private string _Password;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AT_EmailsTemplate> _AT_EmailsTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSMTPServerIDChanging(long value);
    partial void OnSMTPServerIDChanged();
    partial void OnSMTPserverChanging(string value);
    partial void OnSMTPserverChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_SMTPserver()
		{
			this._AT_EmailsTemplates = new EntitySet<AT_EmailsTemplate>(new Action<AT_EmailsTemplate>(this.attach_AT_EmailsTemplates), new Action<AT_EmailsTemplate>(this.detach_AT_EmailsTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMTPServerID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SMTPServerID
		{
			get
			{
				return this._SMTPServerID;
			}
			set
			{
				if ((this._SMTPServerID != value))
				{
					this.OnSMTPServerIDChanging(value);
					this.SendPropertyChanging();
					this._SMTPServerID = value;
					this.SendPropertyChanged("SMTPServerID");
					this.OnSMTPServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMTPserver", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SMTPserver
		{
			get
			{
				return this._SMTPserver;
			}
			set
			{
				if ((this._SMTPserver != value))
				{
					this.OnSMTPserverChanging(value);
					this.SendPropertyChanging();
					this._SMTPserver = value;
					this.SendPropertyChanged("SMTPserver");
					this.OnSMTPserverChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserName", DbType = "NVarChar(100)")]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if ((this._UserName != value))
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "NVarChar(100)")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_SMTPserver_AT_EmailsTemplate", Storage="_AT_EmailsTemplates", ThisKey="SMTPServerID", OtherKey="SMTPServerId")]
		public EntitySet<AT_EmailsTemplate> AT_EmailsTemplates
		{
			get
			{
				return this._AT_EmailsTemplates;
			}
			set
			{
				this._AT_EmailsTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AT_EmailsTemplates(AT_EmailsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.AT_SMTPserver = this;
		}
		
		private void detach_AT_EmailsTemplates(AT_EmailsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.AT_SMTPserver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_EmailRecipients")]
	public partial class AT_EmailRecipient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecipientID;
		
		private int _EmployeeID;
		
		private bool _IsTo;
		
		private bool _IsCC;
		
		private bool _IsBCC;
		
		private long _EmailId;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<AT_EmailsTemplate> _AT_EmailsTemplate;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipientIDChanging(int value);
    partial void OnRecipientIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnIsToChanging(bool value);
    partial void OnIsToChanged();
    partial void OnIsCCChanging(bool value);
    partial void OnIsCCChanged();
    partial void OnIsBCCChanging(bool value);
    partial void OnIsBCCChanged();
    partial void OnEmailIdChanging(long value);
    partial void OnEmailIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_EmailRecipient()
		{
			this._AT_EmailsTemplate = default(EntityRef<AT_EmailsTemplate>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecipientID
		{
			get
			{
				return this._RecipientID;
			}
			set
			{
				if ((this._RecipientID != value))
				{
					this.OnRecipientIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientID = value;
					this.SendPropertyChanged("RecipientID");
					this.OnRecipientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTo", DbType="Bit NOT NULL")]
		public bool IsTo
		{
			get
			{
				return this._IsTo;
			}
			set
			{
				if ((this._IsTo != value))
				{
					this.OnIsToChanging(value);
					this.SendPropertyChanging();
					this._IsTo = value;
					this.SendPropertyChanged("IsTo");
					this.OnIsToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCC", DbType="Bit NOT NULL")]
		public bool IsCC
		{
			get
			{
				return this._IsCC;
			}
			set
			{
				if ((this._IsCC != value))
				{
					this.OnIsCCChanging(value);
					this.SendPropertyChanging();
					this._IsCC = value;
					this.SendPropertyChanged("IsCC");
					this.OnIsCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBCC", DbType="Bit NOT NULL")]
		public bool IsBCC
		{
			get
			{
				return this._IsBCC;
			}
			set
			{
				if ((this._IsBCC != value))
				{
					this.OnIsBCCChanging(value);
					this.SendPropertyChanging();
					this._IsBCC = value;
					this.SendPropertyChanged("IsBCC");
					this.OnIsBCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailId", DbType="BigInt NOT NULL")]
		public long EmailId
		{
			get
			{
				return this._EmailId;
			}
			set
			{
				if ((this._EmailId != value))
				{
					if (this._AT_EmailsTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailIdChanging(value);
					this.SendPropertyChanging();
					this._EmailId = value;
					this.SendPropertyChanged("EmailId");
					this.OnEmailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_EmailsTemplate_AT_EmailRecipient", Storage="_AT_EmailsTemplate", ThisKey="EmailId", OtherKey="EmailId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AT_EmailsTemplate AT_EmailsTemplate
		{
			get
			{
				return this._AT_EmailsTemplate.Entity;
			}
			set
			{
				AT_EmailsTemplate previousValue = this._AT_EmailsTemplate.Entity;
				if (((previousValue != value) 
							|| (this._AT_EmailsTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_EmailsTemplate.Entity = null;
						previousValue.AT_EmailRecipients.Remove(this);
					}
					this._AT_EmailsTemplate.Entity = value;
					if ((value != null))
					{
						value.AT_EmailRecipients.Add(this);
						this._EmailId = value.EmailId;
					}
					else
					{
						this._EmailId = default(long);
					}
					this.SendPropertyChanged("AT_EmailsTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AT_EmailRecipient", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AT_EmailRecipients.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AT_EmailRecipients.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_TreeNodeSecurityKey")]
	public partial class AT_TreeNodeSecurityKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecurityKeyID;
		
		private string _SecurityKey;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<SystemUserPermission> _SystemUserPermissions;
		
		private EntitySet<AT_TreeNode> _AT_TreeNodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityKeyIDChanging(int value);
    partial void OnSecurityKeyIDChanged();
    partial void OnSecurityKeyChanging(string value);
    partial void OnSecurityKeyChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_TreeNodeSecurityKey()
		{
			this._SystemUserPermissions = new EntitySet<SystemUserPermission>(new Action<SystemUserPermission>(this.attach_SystemUserPermissions), new Action<SystemUserPermission>(this.detach_SystemUserPermissions));
			this._AT_TreeNodes = new EntitySet<AT_TreeNode>(new Action<AT_TreeNode>(this.attach_AT_TreeNodes), new Action<AT_TreeNode>(this.detach_AT_TreeNodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityKeyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SecurityKeyID
		{
			get
			{
				return this._SecurityKeyID;
			}
			set
			{
				if ((this._SecurityKeyID != value))
				{
					this.OnSecurityKeyIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityKeyID = value;
					this.SendPropertyChanged("SecurityKeyID");
					this.OnSecurityKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityKey", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SecurityKey
		{
			get
			{
				return this._SecurityKey;
			}
			set
			{
				if ((this._SecurityKey != value))
				{
					this.OnSecurityKeyChanging(value);
					this.SendPropertyChanging();
					this._SecurityKey = value;
					this.SendPropertyChanged("SecurityKey");
					this.OnSecurityKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_TreeNodeSecurityKey_SystemUserPermission", Storage="_SystemUserPermissions", ThisKey="SecurityKeyID", OtherKey="SecurityKeyID")]
		public EntitySet<SystemUserPermission> SystemUserPermissions
		{
			get
			{
				return this._SystemUserPermissions;
			}
			set
			{
				this._SystemUserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_TreeNodeSecurityKey_AT_TreeNode", Storage="_AT_TreeNodes", ThisKey="SecurityKeyID", OtherKey="SecurityKeyID")]
		public EntitySet<AT_TreeNode> AT_TreeNodes
		{
			get
			{
				return this._AT_TreeNodes;
			}
			set
			{
				this._AT_TreeNodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUserPermissions(SystemUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.AT_TreeNodeSecurityKey = this;
		}
		
		private void detach_SystemUserPermissions(SystemUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.AT_TreeNodeSecurityKey = null;
		}
		
		private void attach_AT_TreeNodes(AT_TreeNode entity)
		{
			this.SendPropertyChanging();
			entity.AT_TreeNodeSecurityKey = this;
		}
		
		private void detach_AT_TreeNodes(AT_TreeNode entity)
		{
			this.SendPropertyChanging();
			entity.AT_TreeNodeSecurityKey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actions")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ActionID;
		
		private string _ActionNameEng;
		
		private string _ActionNameAr;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AT_ModulesAction> _AT_ModulesActions;
		
		private EntitySet<AT_EmailsTemplate> _AT_EmailsTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(long value);
    partial void OnActionIDChanged();
    partial void OnActionNameEngChanging(string value);
    partial void OnActionNameEngChanged();
    partial void OnActionNameArChanging(string value);
    partial void OnActionNameArChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Action()
		{
			this._AT_ModulesActions = new EntitySet<AT_ModulesAction>(new Action<AT_ModulesAction>(this.attach_AT_ModulesActions), new Action<AT_ModulesAction>(this.detach_AT_ModulesActions));
			this._AT_EmailsTemplates = new EntitySet<AT_EmailsTemplate>(new Action<AT_EmailsTemplate>(this.attach_AT_EmailsTemplates), new Action<AT_EmailsTemplate>(this.detach_AT_EmailsTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionNameEng", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ActionNameEng
		{
			get
			{
				return this._ActionNameEng;
			}
			set
			{
				if ((this._ActionNameEng != value))
				{
					this.OnActionNameEngChanging(value);
					this.SendPropertyChanging();
					this._ActionNameEng = value;
					this.SendPropertyChanged("ActionNameEng");
					this.OnActionNameEngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionNameAr", DbType="NVarChar(100)")]
		public string ActionNameAr
		{
			get
			{
				return this._ActionNameAr;
			}
			set
			{
				if ((this._ActionNameAr != value))
				{
					this.OnActionNameArChanging(value);
					this.SendPropertyChanging();
					this._ActionNameAr = value;
					this.SendPropertyChanged("ActionNameAr");
					this.OnActionNameArChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_AT_ModulesAction", Storage="_AT_ModulesActions", ThisKey="ActionID", OtherKey="ActionId")]
		public EntitySet<AT_ModulesAction> AT_ModulesActions
		{
			get
			{
				return this._AT_ModulesActions;
			}
			set
			{
				this._AT_ModulesActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_AT_EmailsTemplate", Storage="_AT_EmailsTemplates", ThisKey="ActionID", OtherKey="ActionId")]
		public EntitySet<AT_EmailsTemplate> AT_EmailsTemplates
		{
			get
			{
				return this._AT_EmailsTemplates;
			}
			set
			{
				this._AT_EmailsTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AT_ModulesActions(AT_ModulesAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_AT_ModulesActions(AT_ModulesAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_AT_EmailsTemplates(AT_EmailsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_AT_EmailsTemplates(AT_EmailsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_ModulesActions")]
	public partial class AT_ModulesAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ModuleId;
		
		private long _ActionId;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleIdChanging(long value);
    partial void OnModuleIdChanged();
    partial void OnActionIdChanging(long value);
    partial void OnActionIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_ModulesAction()
		{
			this._Action = default(EntityRef<Action>);
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ActionId
		{
			get
			{
				return this._ActionId;
			}
			set
			{
				if ((this._ActionId != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIdChanging(value);
					this.SendPropertyChanging();
					this._ActionId = value;
					this.SendPropertyChanged("ActionId");
					this.OnActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_AT_ModulesAction", Storage="_Action", ThisKey="ActionId", OtherKey="ActionID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.AT_ModulesActions.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.AT_ModulesActions.Add(this);
						this._ActionId = value.ActionID;
					}
					else
					{
						this._ActionId = default(long);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_AT_ModulesAction", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.AT_ModulesActions.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.AT_ModulesActions.Add(this);
						this._ModuleId = value.ModuleId;
					}
					else
					{
						this._ModuleId = default(long);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ChangeControl.ChangeControlNoteStatus")]
	public partial class ChangeControlNoteStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CCNStatusID;
		
		private string _CCNStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ChangeControlNote> _ChangeControlNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCNStatusIDChanging(int value);
    partial void OnCCNStatusIDChanged();
    partial void OnCCNStatusChanging(string value);
    partial void OnCCNStatusChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ChangeControlNoteStatus()
		{
			this._ChangeControlNotes = new EntitySet<ChangeControlNote>(new Action<ChangeControlNote>(this.attach_ChangeControlNotes), new Action<ChangeControlNote>(this.detach_ChangeControlNotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CCNStatusID
		{
			get
			{
				return this._CCNStatusID;
			}
			set
			{
				if ((this._CCNStatusID != value))
				{
					this.OnCCNStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CCNStatusID = value;
					this.SendPropertyChanged("CCNStatusID");
					this.OnCCNStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNStatus", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CCNStatus
		{
			get
			{
				return this._CCNStatus;
			}
			set
			{
				if ((this._CCNStatus != value))
				{
					this.OnCCNStatusChanging(value);
					this.SendPropertyChanging();
					this._CCNStatus = value;
					this.SendPropertyChanged("CCNStatus");
					this.OnCCNStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControlNoteStatus_ChangeControlNote", Storage="_ChangeControlNotes", ThisKey="CCNStatusID", OtherKey="CCNStatusID")]
		public EntitySet<ChangeControlNote> ChangeControlNotes
		{
			get
			{
				return this._ChangeControlNotes;
			}
			set
			{
				this._ChangeControlNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControlNoteStatus = this;
		}
		
		private void detach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControlNoteStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemUserPermissions")]
	public partial class SystemUserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _SecurityKeyID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<AT_TreeNodeSecurityKey> _AT_TreeNodeSecurityKey;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSecurityKeyIDChanging(int value);
    partial void OnSecurityKeyIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public SystemUserPermission()
		{
			this._AT_TreeNodeSecurityKey = default(EntityRef<AT_TreeNodeSecurityKey>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityKeyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SecurityKeyID
		{
			get
			{
				return this._SecurityKeyID;
			}
			set
			{
				if ((this._SecurityKeyID != value))
				{
					if (this._AT_TreeNodeSecurityKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurityKeyIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityKeyID = value;
					this.SendPropertyChanged("SecurityKeyID");
					this.OnSecurityKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_TreeNodeSecurityKey_SystemUserPermission", Storage="_AT_TreeNodeSecurityKey", ThisKey="SecurityKeyID", OtherKey="SecurityKeyID", IsForeignKey=true)]
		public AT_TreeNodeSecurityKey AT_TreeNodeSecurityKey
		{
			get
			{
				return this._AT_TreeNodeSecurityKey.Entity;
			}
			set
			{
				AT_TreeNodeSecurityKey previousValue = this._AT_TreeNodeSecurityKey.Entity;
				if (((previousValue != value) 
							|| (this._AT_TreeNodeSecurityKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_TreeNodeSecurityKey.Entity = null;
						previousValue.SystemUserPermissions.Remove(this);
					}
					this._AT_TreeNodeSecurityKey.Entity = value;
					if ((value != null))
					{
						value.SystemUserPermissions.Add(this);
						this._SecurityKeyID = value.SecurityKeyID;
					}
					else
					{
						this._SecurityKeyID = default(int);
					}
					this.SendPropertyChanged("AT_TreeNodeSecurityKey");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_SystemUserPermission", Storage="_SystemUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.SystemUserPermissions.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.SystemUserPermissions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ChangeControl.ChangeControlApprovalMember")]
	public partial class ChangeControlApprovalMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private int _ApproverID;
		
		private int _MemberTypeID;
		
		private int _CCNID;
		
		private System.Nullable<int> _ApprovalStatusID;
		
		private string _ApprovalRemarks;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ApprovalMemberType> _ApprovalMemberType;
		
		private EntityRef<ApprovalStatus> _ApprovalStatus;
		
		private EntityRef<ChangeControlNote> _ChangeControlNote;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnApproverIDChanging(int value);
    partial void OnApproverIDChanged();
    partial void OnMemberTypeIDChanging(int value);
    partial void OnMemberTypeIDChanged();
    partial void OnCCNIDChanging(int value);
    partial void OnCCNIDChanged();
    partial void OnApprovalStatusIDChanging(System.Nullable<int> value);
    partial void OnApprovalStatusIDChanged();
    partial void OnApprovalRemarksChanging(string value);
    partial void OnApprovalRemarksChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ChangeControlApprovalMember()
		{
			this._ApprovalMemberType = default(EntityRef<ApprovalMemberType>);
			this._ApprovalStatus = default(EntityRef<ApprovalStatus>);
			this._ChangeControlNote = default(EntityRef<ChangeControlNote>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproverID", DbType="Int NOT NULL")]
		public int ApproverID
		{
			get
			{
				return this._ApproverID;
			}
			set
			{
				if ((this._ApproverID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverIDChanging(value);
					this.SendPropertyChanging();
					this._ApproverID = value;
					this.SendPropertyChanged("ApproverID");
					this.OnApproverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", DbType="Int NOT NULL")]
		public int MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					if (this._ApprovalMemberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNID", DbType="Int NOT NULL")]
		public int CCNID
		{
			get
			{
				return this._CCNID;
			}
			set
			{
				if ((this._CCNID != value))
				{
					if (this._ChangeControlNote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCCNIDChanging(value);
					this.SendPropertyChanging();
					this._CCNID = value;
					this.SendPropertyChanged("CCNID");
					this.OnCCNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatusID", DbType="Int")]
		public System.Nullable<int> ApprovalStatusID
		{
			get
			{
				return this._ApprovalStatusID;
			}
			set
			{
				if ((this._ApprovalStatusID != value))
				{
					if (this._ApprovalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatusID = value;
					this.SendPropertyChanged("ApprovalStatusID");
					this.OnApprovalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalRemarks", DbType="NVarChar(300)")]
		public string ApprovalRemarks
		{
			get
			{
				return this._ApprovalRemarks;
			}
			set
			{
				if ((this._ApprovalRemarks != value))
				{
					this.OnApprovalRemarksChanging(value);
					this.SendPropertyChanging();
					this._ApprovalRemarks = value;
					this.SendPropertyChanged("ApprovalRemarks");
					this.OnApprovalRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalMemberType_ChangeControlApprovalMember", Storage="_ApprovalMemberType", ThisKey="MemberTypeID", OtherKey="MemberTypeID", IsForeignKey=true)]
		public ApprovalMemberType ApprovalMemberType
		{
			get
			{
				return this._ApprovalMemberType.Entity;
			}
			set
			{
				ApprovalMemberType previousValue = this._ApprovalMemberType.Entity;
				if (((previousValue != value) 
							|| (this._ApprovalMemberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovalMemberType.Entity = null;
						previousValue.ChangeControlApprovalMembers.Remove(this);
					}
					this._ApprovalMemberType.Entity = value;
					if ((value != null))
					{
						value.ChangeControlApprovalMembers.Add(this);
						this._MemberTypeID = value.MemberTypeID;
					}
					else
					{
						this._MemberTypeID = default(int);
					}
					this.SendPropertyChanged("ApprovalMemberType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalStatus_ChangeControlApprovalMember", Storage="_ApprovalStatus", ThisKey="ApprovalStatusID", OtherKey="ApprovalStatusID", IsForeignKey=true)]
		public ApprovalStatus ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus.Entity;
			}
			set
			{
				ApprovalStatus previousValue = this._ApprovalStatus.Entity;
				if (((previousValue != value) 
							|| (this._ApprovalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovalStatus.Entity = null;
						previousValue.ChangeControlApprovalMembers.Remove(this);
					}
					this._ApprovalStatus.Entity = value;
					if ((value != null))
					{
						value.ChangeControlApprovalMembers.Add(this);
						this._ApprovalStatusID = value.ApprovalStatusID;
					}
					else
					{
						this._ApprovalStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ApprovalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControlNote_ChangeControlApprovalMember", Storage="_ChangeControlNote", ThisKey="CCNID", OtherKey="CCNID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChangeControlNote ChangeControlNote
		{
			get
			{
				return this._ChangeControlNote.Entity;
			}
			set
			{
				ChangeControlNote previousValue = this._ChangeControlNote.Entity;
				if (((previousValue != value) 
							|| (this._ChangeControlNote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeControlNote.Entity = null;
						previousValue.ChangeControlApprovalMembers.Remove(this);
					}
					this._ChangeControlNote.Entity = value;
					if ((value != null))
					{
						value.ChangeControlApprovalMembers.Add(this);
						this._CCNID = value.CCNID;
					}
					else
					{
						this._CCNID = default(int);
					}
					this.SendPropertyChanged("ChangeControlNote");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChangeControlApprovalMember", Storage="_Employee", ThisKey="ApproverID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ChangeControlApprovalMembers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ChangeControlApprovalMembers.Add(this);
						this._ApproverID = value.EmployeeID;
					}
					else
					{
						this._ApproverID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_EmailsTemplates")]
	public partial class AT_EmailsTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EmailId;
		
		private System.Nullable<long> _ModuleId;
		
		private System.Nullable<long> _ActionId;
		
		private string _EmailSubject;
		
		private string _EmailBody;
		
		private string _EmailFrom;
		
		private System.Nullable<long> _SMTPServerId;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AT_EmailRecipient> _AT_EmailRecipients;
		
		private EntityRef<AT_SMTPserver> _AT_SMTPserver;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailIdChanging(long value);
    partial void OnEmailIdChanged();
    partial void OnModuleIdChanging(System.Nullable<long> value);
    partial void OnModuleIdChanged();
    partial void OnActionIdChanging(System.Nullable<long> value);
    partial void OnActionIdChanged();
    partial void OnEmailSubjectChanging(string value);
    partial void OnEmailSubjectChanged();
    partial void OnEmailBodyChanging(string value);
    partial void OnEmailBodyChanged();
    partial void OnEmailFromChanging(string value);
    partial void OnEmailFromChanged();
    partial void OnSMTPServerIdChanging(System.Nullable<long> value);
    partial void OnSMTPServerIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_EmailsTemplate()
		{
			this._AT_EmailRecipients = new EntitySet<AT_EmailRecipient>(new Action<AT_EmailRecipient>(this.attach_AT_EmailRecipients), new Action<AT_EmailRecipient>(this.detach_AT_EmailRecipients));
			this._AT_SMTPserver = default(EntityRef<AT_SMTPserver>);
			this._Action = default(EntityRef<Action>);
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EmailId
		{
			get
			{
				return this._EmailId;
			}
			set
			{
				if ((this._EmailId != value))
				{
					this.OnEmailIdChanging(value);
					this.SendPropertyChanging();
					this._EmailId = value;
					this.SendPropertyChanged("EmailId");
					this.OnEmailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="BigInt")]
		public System.Nullable<long> ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionId", DbType="BigInt")]
		public System.Nullable<long> ActionId
		{
			get
			{
				return this._ActionId;
			}
			set
			{
				if ((this._ActionId != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIdChanging(value);
					this.SendPropertyChanging();
					this._ActionId = value;
					this.SendPropertyChanged("ActionId");
					this.OnActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSubject", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EmailSubject
		{
			get
			{
				return this._EmailSubject;
			}
			set
			{
				if ((this._EmailSubject != value))
				{
					this.OnEmailSubjectChanging(value);
					this.SendPropertyChanging();
					this._EmailSubject = value;
					this.SendPropertyChanged("EmailSubject");
					this.OnEmailSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailBody", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EmailBody
		{
			get
			{
				return this._EmailBody;
			}
			set
			{
				if ((this._EmailBody != value))
				{
					this.OnEmailBodyChanging(value);
					this.SendPropertyChanging();
					this._EmailBody = value;
					this.SendPropertyChanged("EmailBody");
					this.OnEmailBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailFrom", DbType="NVarChar(100)")]
		public string EmailFrom
		{
			get
			{
				return this._EmailFrom;
			}
			set
			{
				if ((this._EmailFrom != value))
				{
					this.OnEmailFromChanging(value);
					this.SendPropertyChanging();
					this._EmailFrom = value;
					this.SendPropertyChanged("EmailFrom");
					this.OnEmailFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMTPServerId", DbType="BigInt")]
		public System.Nullable<long> SMTPServerId
		{
			get
			{
				return this._SMTPServerId;
			}
			set
			{
				if ((this._SMTPServerId != value))
				{
					if (this._AT_SMTPserver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSMTPServerIdChanging(value);
					this.SendPropertyChanging();
					this._SMTPServerId = value;
					this.SendPropertyChanged("SMTPServerId");
					this.OnSMTPServerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_EmailsTemplate_AT_EmailRecipient", Storage="_AT_EmailRecipients", ThisKey="EmailId", OtherKey="EmailId")]
		public EntitySet<AT_EmailRecipient> AT_EmailRecipients
		{
			get
			{
				return this._AT_EmailRecipients;
			}
			set
			{
				this._AT_EmailRecipients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_SMTPserver_AT_EmailsTemplate", Storage="_AT_SMTPserver", ThisKey="SMTPServerId", OtherKey="SMTPServerID", IsForeignKey=true)]
		public AT_SMTPserver AT_SMTPserver
		{
			get
			{
				return this._AT_SMTPserver.Entity;
			}
			set
			{
				AT_SMTPserver previousValue = this._AT_SMTPserver.Entity;
				if (((previousValue != value) 
							|| (this._AT_SMTPserver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_SMTPserver.Entity = null;
						previousValue.AT_EmailsTemplates.Remove(this);
					}
					this._AT_SMTPserver.Entity = value;
					if ((value != null))
					{
						value.AT_EmailsTemplates.Add(this);
						this._SMTPServerId = value.SMTPServerID;
					}
					else
					{
						this._SMTPServerId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AT_SMTPserver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_AT_EmailsTemplate", Storage="_Action", ThisKey="ActionId", OtherKey="ActionID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.AT_EmailsTemplates.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.AT_EmailsTemplates.Add(this);
						this._ActionId = value.ActionID;
					}
					else
					{
						this._ActionId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_AT_EmailsTemplate", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.AT_EmailsTemplates.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.AT_EmailsTemplates.Add(this);
						this._ModuleId = value.ModuleId;
					}
					else
					{
						this._ModuleId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AT_EmailRecipients(AT_EmailRecipient entity)
		{
			this.SendPropertyChanging();
			entity.AT_EmailsTemplate = this;
		}
		
		private void detach_AT_EmailRecipients(AT_EmailRecipient entity)
		{
			this.SendPropertyChanging();
			entity.AT_EmailsTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.CustomerContact")]
	public partial class CustomerContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private long _ContactTypeID;
		
		private string _ContactNumber;
		
		private int _CustomerID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<PhoneNumberType> _PhoneNumberType;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnContactTypeIDChanging(long value);
    partial void OnContactTypeIDChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CustomerContact()
		{
			this._PhoneNumberType = default(EntityRef<PhoneNumberType>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeID", DbType="BigInt NOT NULL")]
		public long ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					if (this._PhoneNumberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneNumberType_CustomerContact", Storage="_PhoneNumberType", ThisKey="ContactTypeID", OtherKey="PhoneNumberTypeId", IsForeignKey=true)]
		public PhoneNumberType PhoneNumberType
		{
			get
			{
				return this._PhoneNumberType.Entity;
			}
			set
			{
				PhoneNumberType previousValue = this._PhoneNumberType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneNumberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneNumberType.Entity = null;
						previousValue.CustomerContacts.Remove(this);
					}
					this._PhoneNumberType.Entity = value;
					if ((value != null))
					{
						value.CustomerContacts.Add(this);
						this._ContactTypeID = value.PhoneNumberTypeId;
					}
					else
					{
						this._ContactTypeID = default(long);
					}
					this.SendPropertyChanged("PhoneNumberType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerContact", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerContacts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerContacts.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Severity")]
	public partial class Severity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeverityID;
		
		private decimal _Score;
		
		private int _Value;
		
		private string _Criteria;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<Risk> _Risks1;
		
		private EntitySet<Risk> _Risks2;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeverityIDChanging(int value);
    partial void OnSeverityIDChanged();
    partial void OnScoreChanging(decimal value);
    partial void OnScoreChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnCriteriaChanging(string value);
    partial void OnCriteriaChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Severity()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._Risks1 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks1), new Action<Risk>(this.detach_Risks1));
			this._Risks2 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks2), new Action<Risk>(this.detach_Risks2));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeverityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeverityID
		{
			get
			{
				return this._SeverityID;
			}
			set
			{
				if ((this._SeverityID != value))
				{
					this.OnSeverityIDChanging(value);
					this.SendPropertyChanging();
					this._SeverityID = value;
					this.SendPropertyChanged("SeverityID");
					this.OnSeverityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(18,2) NOT NULL")]
		public decimal Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Criteria", DbType="NVarChar(300)")]
		public string Criteria
		{
			get
			{
				return this._Criteria;
			}
			set
			{
				if ((this._Criteria != value))
				{
					this.OnCriteriaChanging(value);
					this.SendPropertyChanging();
					this._Criteria = value;
					this.SendPropertyChanged("Criteria");
					this.OnCriteriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Risk", Storage="_Risks", ThisKey="SeverityID", OtherKey="SeverityID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Risk1", Storage="_Risks1", ThisKey="SeverityID", OtherKey="SeverityEnvironmentID")]
		public EntitySet<Risk> Risks1
		{
			get
			{
				return this._Risks1;
			}
			set
			{
				this._Risks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Risk2", Storage="_Risks2", ThisKey="SeverityID", OtherKey="SeverityHumanID")]
		public EntitySet<Risk> Risks2
		{
			get
			{
				return this._Risks2;
			}
			set
			{
				this._Risks2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Problem", Storage="_Problems", ThisKey="SeverityID", OtherKey="SeverityID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Severity = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Severity = null;
		}
		
		private void attach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Severity1 = this;
		}
		
		private void detach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Severity1 = null;
		}
		
		private void attach_Risks2(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Severity2 = this;
		}
		
		private void detach_Risks2(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Severity2 = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Severity = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Severity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.ProblemStatus")]
	public partial class ProblemStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemStatusID;
		
		private string _ProblemStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemStatusIDChanging(int value);
    partial void OnProblemStatusIDChanged();
    partial void OnProblemStatus1Changing(string value);
    partial void OnProblemStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProblemStatus()
		{
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemStatusID
		{
			get
			{
				return this._ProblemStatusID;
			}
			set
			{
				if ((this._ProblemStatusID != value))
				{
					this.OnProblemStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemStatusID = value;
					this.SendPropertyChanged("ProblemStatusID");
					this.OnProblemStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProblemStatus", Storage="_ProblemStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProblemStatus1
		{
			get
			{
				return this._ProblemStatus1;
			}
			set
			{
				if ((this._ProblemStatus1 != value))
				{
					this.OnProblemStatus1Changing(value);
					this.SendPropertyChanging();
					this._ProblemStatus1 = value;
					this.SendPropertyChanged("ProblemStatus1");
					this.OnProblemStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProblemStatus_Problem", Storage="_Problems", ThisKey="ProblemStatusID", OtherKey="StatusID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.ProblemStatus = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.ProblemStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.ProblemActionType")]
	public partial class ProblemActionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionTypeID;
		
		private string _ActionName;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ProblemAction> _ProblemActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionTypeIDChanging(int value);
    partial void OnActionTypeIDChanged();
    partial void OnActionNameChanging(string value);
    partial void OnActionNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProblemActionType()
		{
			this._ProblemActions = new EntitySet<ProblemAction>(new Action<ProblemAction>(this.attach_ProblemActions), new Action<ProblemAction>(this.detach_ProblemActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					this.OnActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeID = value;
					this.SendPropertyChanged("ActionTypeID");
					this.OnActionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ActionName
		{
			get
			{
				return this._ActionName;
			}
			set
			{
				if ((this._ActionName != value))
				{
					this.OnActionNameChanging(value);
					this.SendPropertyChanging();
					this._ActionName = value;
					this.SendPropertyChanged("ActionName");
					this.OnActionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProblemActionType_ProblemAction", Storage="_ProblemActions", ThisKey="ActionTypeID", OtherKey="ActionTypeID")]
		public EntitySet<ProblemAction> ProblemActions
		{
			get
			{
				return this._ProblemActions;
			}
			set
			{
				this._ProblemActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProblemActions(ProblemAction entity)
		{
			this.SendPropertyChanging();
			entity.ProblemActionType = this;
		}
		
		private void detach_ProblemActions(ProblemAction entity)
		{
			this.SendPropertyChanging();
			entity.ProblemActionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.ProblemRiskSubCategory")]
	public partial class ProblemRiskSubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemID;
		
		private int _SubCategoryID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<RiskSubCategory> _RiskSubCategory;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemIDChanging(int value);
    partial void OnProblemIDChanged();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProblemRiskSubCategory()
		{
			this._RiskSubCategory = default(EntityRef<RiskSubCategory>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProblemID
		{
			get
			{
				return this._ProblemID;
			}
			set
			{
				if ((this._ProblemID != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemID = value;
					this.SendPropertyChanged("ProblemID");
					this.OnProblemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					if (this._RiskSubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskSubCategory_ProblemRiskSubCategory", Storage="_RiskSubCategory", ThisKey="SubCategoryID", OtherKey="SubCategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RiskSubCategory RiskSubCategory
		{
			get
			{
				return this._RiskSubCategory.Entity;
			}
			set
			{
				RiskSubCategory previousValue = this._RiskSubCategory.Entity;
				if (((previousValue != value) 
							|| (this._RiskSubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskSubCategory.Entity = null;
						previousValue.ProblemRiskSubCategories.Remove(this);
					}
					this._RiskSubCategory.Entity = value;
					if ((value != null))
					{
						value.ProblemRiskSubCategories.Add(this);
						this._SubCategoryID = value.SubCategoryID;
					}
					else
					{
						this._SubCategoryID = default(int);
					}
					this.SendPropertyChanged("RiskSubCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_ProblemRiskSubCategory", Storage="_Problem", ThisKey="ProblemID", OtherKey="ProblemID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.ProblemRiskSubCategories.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.ProblemRiskSubCategories.Add(this);
						this._ProblemID = value.ProblemID;
					}
					else
					{
						this._ProblemID = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Module")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ModuleId;
		
		private string _Name;
		
		private string _EnumName;
		
		private string _SQLModuleName;
		
		private string _SchemaName;
		
		private string _PrimaryKey;
		
		private bool _Active;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RAGCondition> _RAGConditions;
		
		private EntitySet<AT_RAGParameter> _AT_RAGParameters;
		
		private EntitySet<AT_ModulesAction> _AT_ModulesActions;
		
		private EntitySet<AT_EmailsTemplate> _AT_EmailsTemplates;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModuleIdChanging(long value);
    partial void OnModuleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEnumNameChanging(string value);
    partial void OnEnumNameChanged();
    partial void OnSQLModuleNameChanging(string value);
    partial void OnSQLModuleNameChanged();
    partial void OnSchemaNameChanging(string value);
    partial void OnSchemaNameChanged();
    partial void OnPrimaryKeyChanging(string value);
    partial void OnPrimaryKeyChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Module()
		{
			this._RAGConditions = new EntitySet<RAGCondition>(new Action<RAGCondition>(this.attach_RAGConditions), new Action<RAGCondition>(this.detach_RAGConditions));
			this._AT_RAGParameters = new EntitySet<AT_RAGParameter>(new Action<AT_RAGParameter>(this.attach_AT_RAGParameters), new Action<AT_RAGParameter>(this.detach_AT_RAGParameters));
			this._AT_ModulesActions = new EntitySet<AT_ModulesAction>(new Action<AT_ModulesAction>(this.attach_AT_ModulesActions), new Action<AT_ModulesAction>(this.detach_AT_ModulesActions));
			this._AT_EmailsTemplates = new EntitySet<AT_EmailsTemplate>(new Action<AT_EmailsTemplate>(this.attach_AT_EmailsTemplates), new Action<AT_EmailsTemplate>(this.detach_AT_EmailsTemplates));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnumName", DbType="NVarChar(100)")]
		public string EnumName
		{
			get
			{
				return this._EnumName;
			}
			set
			{
				if ((this._EnumName != value))
				{
					this.OnEnumNameChanging(value);
					this.SendPropertyChanging();
					this._EnumName = value;
					this.SendPropertyChanged("EnumName");
					this.OnEnumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLModuleName", DbType="NVarChar(100)")]
		public string SQLModuleName
		{
			get
			{
				return this._SQLModuleName;
			}
			set
			{
				if ((this._SQLModuleName != value))
				{
					this.OnSQLModuleNameChanging(value);
					this.SendPropertyChanging();
					this._SQLModuleName = value;
					this.SendPropertyChanged("SQLModuleName");
					this.OnSQLModuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaName", DbType="NVarChar(100)")]
		public string SchemaName
		{
			get
			{
				return this._SchemaName;
			}
			set
			{
				if ((this._SchemaName != value))
				{
					this.OnSchemaNameChanging(value);
					this.SendPropertyChanging();
					this._SchemaName = value;
					this.SendPropertyChanged("SchemaName");
					this.OnSchemaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryKey", DbType="NVarChar(100)")]
		public string PrimaryKey
		{
			get
			{
				return this._PrimaryKey;
			}
			set
			{
				if ((this._PrimaryKey != value))
				{
					this.OnPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKey = value;
					this.SendPropertyChanged("PrimaryKey");
					this.OnPrimaryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_RAGCondition", Storage="_RAGConditions", ThisKey="ModuleId", OtherKey="ModuleID")]
		public EntitySet<RAGCondition> RAGConditions
		{
			get
			{
				return this._RAGConditions;
			}
			set
			{
				this._RAGConditions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_AT_RAGParameter", Storage="_AT_RAGParameters", ThisKey="ModuleId", OtherKey="ModuleId")]
		public EntitySet<AT_RAGParameter> AT_RAGParameters
		{
			get
			{
				return this._AT_RAGParameters;
			}
			set
			{
				this._AT_RAGParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_AT_ModulesAction", Storage="_AT_ModulesActions", ThisKey="ModuleId", OtherKey="ModuleId")]
		public EntitySet<AT_ModulesAction> AT_ModulesActions
		{
			get
			{
				return this._AT_ModulesActions;
			}
			set
			{
				this._AT_ModulesActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_AT_EmailsTemplate", Storage="_AT_EmailsTemplates", ThisKey="ModuleId", OtherKey="ModuleId")]
		public EntitySet<AT_EmailsTemplate> AT_EmailsTemplates
		{
			get
			{
				return this._AT_EmailsTemplates;
			}
			set
			{
				this._AT_EmailsTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Document", Storage="_Documents", ThisKey="ModuleId", OtherKey="ModuleId")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RAGConditions(RAGCondition entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_RAGConditions(RAGCondition entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_AT_RAGParameters(AT_RAGParameter entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_AT_RAGParameters(AT_RAGParameter entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_AT_ModulesActions(AT_ModulesAction entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_AT_ModulesActions(AT_ModulesAction entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_AT_EmailsTemplates(AT_EmailsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_AT_EmailsTemplates(AT_EmailsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.ProblemActions")]
	public partial class ProblemAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemActionID;
		
		private string _Title;
		
		private int _ActionTypeID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _PlannedEndDate;
		
		private string _Description;
		
		private int _ProblemID;
		
		private int _OwnerID;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private string _ActioneeFeedback;
		
		private bool _IsClosed;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ProblemActionType> _ProblemActionType;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemActionIDChanging(int value);
    partial void OnProblemActionIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActionTypeIDChanging(int value);
    partial void OnActionTypeIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnPlannedEndDateChanging(System.DateTime value);
    partial void OnPlannedEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProblemIDChanging(int value);
    partial void OnProblemIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnActioneeFeedbackChanging(string value);
    partial void OnActioneeFeedbackChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProblemAction()
		{
			this._ProblemActionType = default(EntityRef<ProblemActionType>);
			this._Employee = default(EntityRef<Employee>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemActionID
		{
			get
			{
				return this._ProblemActionID;
			}
			set
			{
				if ((this._ProblemActionID != value))
				{
					this.OnProblemActionIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemActionID = value;
					this.SendPropertyChanged("ProblemActionID");
					this.OnProblemActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionTypeID", DbType="Int NOT NULL")]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					if (this._ProblemActionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeID = value;
					this.SendPropertyChanged("ActionTypeID");
					this.OnActionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime PlannedEndDate
		{
			get
			{
				return this._PlannedEndDate;
			}
			set
			{
				if ((this._PlannedEndDate != value))
				{
					this.OnPlannedEndDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedEndDate = value;
					this.SendPropertyChanged("PlannedEndDate");
					this.OnPlannedEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemID", DbType="Int NOT NULL")]
		public int ProblemID
		{
			get
			{
				return this._ProblemID;
			}
			set
			{
				if ((this._ProblemID != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemID = value;
					this.SendPropertyChanged("ProblemID");
					this.OnProblemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActioneeFeedback", DbType="NVarChar(MAX)")]
		public string ActioneeFeedback
		{
			get
			{
				return this._ActioneeFeedback;
			}
			set
			{
				if ((this._ActioneeFeedback != value))
				{
					this.OnActioneeFeedbackChanging(value);
					this.SendPropertyChanging();
					this._ActioneeFeedback = value;
					this.SendPropertyChanged("ActioneeFeedback");
					this.OnActioneeFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProblemActionType_ProblemAction", Storage="_ProblemActionType", ThisKey="ActionTypeID", OtherKey="ActionTypeID", IsForeignKey=true)]
		public ProblemActionType ProblemActionType
		{
			get
			{
				return this._ProblemActionType.Entity;
			}
			set
			{
				ProblemActionType previousValue = this._ProblemActionType.Entity;
				if (((previousValue != value) 
							|| (this._ProblemActionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProblemActionType.Entity = null;
						previousValue.ProblemActions.Remove(this);
					}
					this._ProblemActionType.Entity = value;
					if ((value != null))
					{
						value.ProblemActions.Add(this);
						this._ActionTypeID = value.ActionTypeID;
					}
					else
					{
						this._ActionTypeID = default(int);
					}
					this.SendPropertyChanged("ProblemActionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProblemAction", Storage="_Employee", ThisKey="OwnerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ProblemActions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ProblemActions.Add(this);
						this._OwnerID = value.EmployeeID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_ProblemAction", Storage="_Problem", ThisKey="ProblemID", OtherKey="ProblemID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.ProblemActions.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.ProblemActions.Add(this);
						this._ProblemID = value.ProblemID;
					}
					else
					{
						this._ProblemID = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_TreeNodes")]
	public partial class AT_TreeNode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _NodeId;
		
		private string _NodeName;
		
		private string _NodeNavigateLink;
		
		private string _PageExtension;
		
		private System.Nullable<long> _ParentId;
		
		private System.Nullable<int> _SecurityKeyID;

        private System.Nullable<int> _SortingOrder;
		
		private bool _IsQueryString;
		
		private bool _IsModule;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AT_TreeNode> _AT_TreeNodes;
		
		private EntityRef<AT_TreeNode> _AT_TreeNode1;
		
		private EntityRef<AT_TreeNodeSecurityKey> _AT_TreeNodeSecurityKey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIdChanging(long value);
    partial void OnNodeIdChanged();
    partial void OnNodeNameChanging(string value);
    partial void OnNodeNameChanged();
    partial void OnNodeNavigateLinkChanging(string value);
    partial void OnNodeNavigateLinkChanged();
    partial void OnPageExtensionChanging(string value);
    partial void OnPageExtensionChanged();
    partial void OnParentIdChanging(System.Nullable<long> value);
    partial void OnParentIdChanged();
    partial void OnSecurityKeyIDChanging(System.Nullable<int> value);
    partial void OnSecurityKeyIDChanged();
    partial void OnSortingOrderChanging(System.Nullable<int> value);
    partial void OnSortingOrderChanged();
    partial void OnIsQueryStringChanging(bool value);
    partial void OnIsQueryStringChanged();
    partial void OnIsModuleChanging(bool value);
    partial void OnIsModuleChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_TreeNode()
		{
			this._AT_TreeNodes = new EntitySet<AT_TreeNode>(new Action<AT_TreeNode>(this.attach_AT_TreeNodes), new Action<AT_TreeNode>(this.detach_AT_TreeNodes));
			this._AT_TreeNode1 = default(EntityRef<AT_TreeNode>);
			this._AT_TreeNodeSecurityKey = default(EntityRef<AT_TreeNodeSecurityKey>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long NodeId
		{
			get
			{
				return this._NodeId;
			}
			set
			{
				if ((this._NodeId != value))
				{
					this.OnNodeIdChanging(value);
					this.SendPropertyChanging();
					this._NodeId = value;
					this.SendPropertyChanged("NodeId");
					this.OnNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string NodeName
		{
			get
			{
				return this._NodeName;
			}
			set
			{
				if ((this._NodeName != value))
				{
					this.OnNodeNameChanging(value);
					this.SendPropertyChanging();
					this._NodeName = value;
					this.SendPropertyChanged("NodeName");
					this.OnNodeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeNavigateLink", DbType="NVarChar(MAX)")]
		public string NodeNavigateLink
		{
			get
			{
				return this._NodeNavigateLink;
			}
			set
			{
				if ((this._NodeNavigateLink != value))
				{
					this.OnNodeNavigateLinkChanging(value);
					this.SendPropertyChanging();
					this._NodeNavigateLink = value;
					this.SendPropertyChanged("NodeNavigateLink");
					this.OnNodeNavigateLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageExtension", DbType="NChar(5)")]
		public string PageExtension
		{
			get
			{
				return this._PageExtension;
			}
			set
			{
				if ((this._PageExtension != value))
				{
					this.OnPageExtensionChanging(value);
					this.SendPropertyChanging();
					this._PageExtension = value;
					this.SendPropertyChanged("PageExtension");
					this.OnPageExtensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="BigInt")]
		public System.Nullable<long> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._AT_TreeNode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityKeyID", DbType="Int")]
		public System.Nullable<int> SecurityKeyID
		{
			get
			{
				return this._SecurityKeyID;
			}
			set
			{
				if ((this._SecurityKeyID != value))
				{
					if (this._AT_TreeNodeSecurityKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurityKeyIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityKeyID = value;
					this.SendPropertyChanged("SecurityKeyID");
					this.OnSecurityKeyIDChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SortingOrder", DbType = "Int")]
        public System.Nullable<int> SortingOrder
        {
            get
            {
                return this._SortingOrder;
            }
            set
            {
                if ((this._SortingOrder != value))
                {
                    this.OnSortingOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortingOrder = value;
                    this.SendPropertyChanged("SortingOrder");
                    this.OnSortingOrderChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsQueryString", DbType="Bit NOT NULL")]
		public bool IsQueryString
		{
			get
			{
				return this._IsQueryString;
			}
			set
			{
				if ((this._IsQueryString != value))
				{
					this.OnIsQueryStringChanging(value);
					this.SendPropertyChanging();
					this._IsQueryString = value;
					this.SendPropertyChanged("IsQueryString");
					this.OnIsQueryStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsModule", DbType="Bit NOT NULL")]
		public bool IsModule
		{
			get
			{
				return this._IsModule;
			}
			set
			{
				if ((this._IsModule != value))
				{
					this.OnIsModuleChanging(value);
					this.SendPropertyChanging();
					this._IsModule = value;
					this.SendPropertyChanged("IsModule");
					this.OnIsModuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_TreeNode_AT_TreeNode", Storage="_AT_TreeNodes", ThisKey="NodeId", OtherKey="ParentId")]
		public EntitySet<AT_TreeNode> AT_TreeNodes
		{
			get
			{
				return this._AT_TreeNodes;
			}
			set
			{
				this._AT_TreeNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_TreeNode_AT_TreeNode", Storage="_AT_TreeNode1", ThisKey="ParentId", OtherKey="NodeId", IsForeignKey=true)]
		public AT_TreeNode AT_TreeNode1
		{
			get
			{
				return this._AT_TreeNode1.Entity;
			}
			set
			{
				AT_TreeNode previousValue = this._AT_TreeNode1.Entity;
				if (((previousValue != value) 
							|| (this._AT_TreeNode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_TreeNode1.Entity = null;
						previousValue.AT_TreeNodes.Remove(this);
					}
					this._AT_TreeNode1.Entity = value;
					if ((value != null))
					{
						value.AT_TreeNodes.Add(this);
						this._ParentId = value.NodeId;
					}
					else
					{
						this._ParentId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AT_TreeNode1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_TreeNodeSecurityKey_AT_TreeNode", Storage="_AT_TreeNodeSecurityKey", ThisKey="SecurityKeyID", OtherKey="SecurityKeyID", IsForeignKey=true)]
		public AT_TreeNodeSecurityKey AT_TreeNodeSecurityKey
		{
			get
			{
				return this._AT_TreeNodeSecurityKey.Entity;
			}
			set
			{
				AT_TreeNodeSecurityKey previousValue = this._AT_TreeNodeSecurityKey.Entity;
				if (((previousValue != value) 
							|| (this._AT_TreeNodeSecurityKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_TreeNodeSecurityKey.Entity = null;
						previousValue.AT_TreeNodes.Remove(this);
					}
					this._AT_TreeNodeSecurityKey.Entity = value;
					if ((value != null))
					{
						value.AT_TreeNodes.Add(this);
						this._SecurityKeyID = value.SecurityKeyID;
					}
					else
					{
						this._SecurityKeyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AT_TreeNodeSecurityKey");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AT_TreeNodes(AT_TreeNode entity)
		{
			this.SendPropertyChanging();
			entity.AT_TreeNode1 = this;
		}
		
		private void detach_AT_TreeNodes(AT_TreeNode entity)
		{
			this.SendPropertyChanging();
			entity.AT_TreeNode1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Payroll.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrencyID;
		
		private string _CurrencyCode;
		
		private string _Currency1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ProjectInformation> _ProjectInformations;
		
		private EntitySet<AssetDepreciation> _AssetDepreciations;
		
		private EntitySet<AssetCalibration> _AssetCalibrations;
		
		private EntitySet<AssetMaintenance> _AssetMaintenances;
		
		private EntitySet<AssetElectricalTest> _AssetElectricalTests;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnCurrencyCodeChanging(string value);
    partial void OnCurrencyCodeChanged();
    partial void OnCurrency1Changing(string value);
    partial void OnCurrency1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Currency()
		{
			this._ProjectInformations = new EntitySet<ProjectInformation>(new Action<ProjectInformation>(this.attach_ProjectInformations), new Action<ProjectInformation>(this.detach_ProjectInformations));
			this._AssetDepreciations = new EntitySet<AssetDepreciation>(new Action<AssetDepreciation>(this.attach_AssetDepreciations), new Action<AssetDepreciation>(this.detach_AssetDepreciations));
			this._AssetCalibrations = new EntitySet<AssetCalibration>(new Action<AssetCalibration>(this.attach_AssetCalibrations), new Action<AssetCalibration>(this.detach_AssetCalibrations));
			this._AssetMaintenances = new EntitySet<AssetMaintenance>(new Action<AssetMaintenance>(this.attach_AssetMaintenances), new Action<AssetMaintenance>(this.detach_AssetMaintenances));
			this._AssetElectricalTests = new EntitySet<AssetElectricalTest>(new Action<AssetElectricalTest>(this.attach_AssetElectricalTests), new Action<AssetElectricalTest>(this.detach_AssetElectricalTests));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyCode", DbType="NChar(6) NOT NULL", CanBeNull=false)]
		public string CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Currency", Storage="_Currency1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Currency1
		{
			get
			{
				return this._Currency1;
			}
			set
			{
				if ((this._Currency1 != value))
				{
					this.OnCurrency1Changing(value);
					this.SendPropertyChanging();
					this._Currency1 = value;
					this.SendPropertyChanged("Currency1");
					this.OnCurrency1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_ProjectInformation", Storage="_ProjectInformations", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<ProjectInformation> ProjectInformations
		{
			get
			{
				return this._ProjectInformations;
			}
			set
			{
				this._ProjectInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetDepreciation", Storage="_AssetDepreciations", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<AssetDepreciation> AssetDepreciations
		{
			get
			{
				return this._AssetDepreciations;
			}
			set
			{
				this._AssetDepreciations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetCalibration", Storage="_AssetCalibrations", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<AssetCalibration> AssetCalibrations
		{
			get
			{
				return this._AssetCalibrations;
			}
			set
			{
				this._AssetCalibrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetMaintenance", Storage="_AssetMaintenances", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<AssetMaintenance> AssetMaintenances
		{
			get
			{
				return this._AssetMaintenances;
			}
			set
			{
				this._AssetMaintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetElectricalTest", Storage="_AssetElectricalTests", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<AssetElectricalTest> AssetElectricalTests
		{
			get
			{
				return this._AssetElectricalTests;
			}
			set
			{
				this._AssetElectricalTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Asset", Storage="_Assets", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectInformations(ProjectInformation entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_ProjectInformations(ProjectInformation entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_AssetDepreciations(AssetDepreciation entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_AssetDepreciations(AssetDepreciation entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProjectManagement.ProjectStatus")]
	public partial class ProjectStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectStatusID;
		
		private string _ProjectStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ProjectInformation> _ProjectInformations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectStatusIDChanging(int value);
    partial void OnProjectStatusIDChanged();
    partial void OnProjectStatus1Changing(string value);
    partial void OnProjectStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProjectStatus()
		{
			this._ProjectInformations = new EntitySet<ProjectInformation>(new Action<ProjectInformation>(this.attach_ProjectInformations), new Action<ProjectInformation>(this.detach_ProjectInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectStatusID
		{
			get
			{
				return this._ProjectStatusID;
			}
			set
			{
				if ((this._ProjectStatusID != value))
				{
					this.OnProjectStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectStatusID = value;
					this.SendPropertyChanged("ProjectStatusID");
					this.OnProjectStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProjectStatus", Storage="_ProjectStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProjectStatus1
		{
			get
			{
				return this._ProjectStatus1;
			}
			set
			{
				if ((this._ProjectStatus1 != value))
				{
					this.OnProjectStatus1Changing(value);
					this.SendPropertyChanging();
					this._ProjectStatus1 = value;
					this.SendPropertyChanged("ProjectStatus1");
					this.OnProjectStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectStatus_ProjectInformation", Storage="_ProjectInformations", ThisKey="ProjectStatusID", OtherKey="ProjectStatusID")]
		public EntitySet<ProjectInformation> ProjectInformations
		{
			get
			{
				return this._ProjectInformations;
			}
			set
			{
				this._ProjectInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectInformations(ProjectInformation entity)
		{
			this.SendPropertyChanging();
			entity.ProjectStatus = this;
		}
		
		private void detach_ProjectInformations(ProjectInformation entity)
		{
			this.SendPropertyChanging();
			entity.ProjectStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProjectManagement.ProjectInformation")]
	public partial class ProjectInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private string _ProjectNumber;
		
		private string _ProjectName;
		
		private string _ProjectDescription;
		
		private int _ProjectLeaderID;
		
		private decimal _ProjectValue;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _PlannedCloseDate;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private decimal _ProjectCost;
		
		private System.Nullable<decimal> _CostAtCompletion;
		
		private int _ProjectStatusID;
		
		private int _CurrencyID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<Audit> _Audits;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<ProjectStatus> _ProjectStatus;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectNumberChanging(string value);
    partial void OnProjectNumberChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectDescriptionChanging(string value);
    partial void OnProjectDescriptionChanged();
    partial void OnProjectLeaderIDChanging(int value);
    partial void OnProjectLeaderIDChanged();
    partial void OnProjectValueChanging(decimal value);
    partial void OnProjectValueChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnPlannedCloseDateChanging(System.DateTime value);
    partial void OnPlannedCloseDateChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnProjectCostChanging(decimal value);
    partial void OnProjectCostChanged();
    partial void OnCostAtCompletionChanging(System.Nullable<decimal> value);
    partial void OnCostAtCompletionChanged();
    partial void OnProjectStatusIDChanging(int value);
    partial void OnProjectStatusIDChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProjectInformation()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._Currency = default(EntityRef<Currency>);
			this._ProjectStatus = default(EntityRef<ProjectStatus>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectNumber
		{
			get
			{
				return this._ProjectNumber;
			}
			set
			{
				if ((this._ProjectNumber != value))
				{
					this.OnProjectNumberChanging(value);
					this.SendPropertyChanging();
					this._ProjectNumber = value;
					this.SendPropertyChanged("ProjectNumber");
					this.OnProjectNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDescription", DbType="NVarChar(MAX)")]
		public string ProjectDescription
		{
			get
			{
				return this._ProjectDescription;
			}
			set
			{
				if ((this._ProjectDescription != value))
				{
					this.OnProjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProjectDescription = value;
					this.SendPropertyChanged("ProjectDescription");
					this.OnProjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectLeaderID", DbType="Int NOT NULL")]
		public int ProjectLeaderID
		{
			get
			{
				return this._ProjectLeaderID;
			}
			set
			{
				if ((this._ProjectLeaderID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectLeaderIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectLeaderID = value;
					this.SendPropertyChanged("ProjectLeaderID");
					this.OnProjectLeaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectValue", DbType="Decimal(10,2) NOT NULL")]
		public decimal ProjectValue
		{
			get
			{
				return this._ProjectValue;
			}
			set
			{
				if ((this._ProjectValue != value))
				{
					this.OnProjectValueChanging(value);
					this.SendPropertyChanging();
					this._ProjectValue = value;
					this.SendPropertyChanged("ProjectValue");
					this.OnProjectValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedCloseDate", DbType="DateTime NOT NULL")]
		public System.DateTime PlannedCloseDate
		{
			get
			{
				return this._PlannedCloseDate;
			}
			set
			{
				if ((this._PlannedCloseDate != value))
				{
					this.OnPlannedCloseDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedCloseDate = value;
					this.SendPropertyChanged("PlannedCloseDate");
					this.OnPlannedCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCost", DbType="Decimal(10,2) NOT NULL")]
		public decimal ProjectCost
		{
			get
			{
				return this._ProjectCost;
			}
			set
			{
				if ((this._ProjectCost != value))
				{
					this.OnProjectCostChanging(value);
					this.SendPropertyChanging();
					this._ProjectCost = value;
					this.SendPropertyChanged("ProjectCost");
					this.OnProjectCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostAtCompletion", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> CostAtCompletion
		{
			get
			{
				return this._CostAtCompletion;
			}
			set
			{
				if ((this._CostAtCompletion != value))
				{
					this.OnCostAtCompletionChanging(value);
					this.SendPropertyChanging();
					this._CostAtCompletion = value;
					this.SendPropertyChanged("CostAtCompletion");
					this.OnCostAtCompletionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStatusID", DbType="Int NOT NULL")]
		public int ProjectStatusID
		{
			get
			{
				return this._ProjectStatusID;
			}
			set
			{
				if ((this._ProjectStatusID != value))
				{
					if (this._ProjectStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectStatusID = value;
					this.SendPropertyChanged("ProjectStatusID");
					this.OnProjectStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectInformation_Document", Storage="_Documents", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectInformation_Risk", Storage="_Risks", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectInformation_Audit", Storage="_Audits", ThisKey="ProjectId", OtherKey="ProjectID")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_ProjectInformation", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.ProjectInformations.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.ProjectInformations.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectStatus_ProjectInformation", Storage="_ProjectStatus", ThisKey="ProjectStatusID", OtherKey="ProjectStatusID", IsForeignKey=true)]
		public ProjectStatus ProjectStatus
		{
			get
			{
				return this._ProjectStatus.Entity;
			}
			set
			{
				ProjectStatus previousValue = this._ProjectStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProjectStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectStatus.Entity = null;
						previousValue.ProjectInformations.Remove(this);
					}
					this._ProjectStatus.Entity = value;
					if ((value != null))
					{
						value.ProjectInformations.Add(this);
						this._ProjectStatusID = value.ProjectStatusID;
					}
					else
					{
						this._ProjectStatusID = default(int);
					}
					this.SendPropertyChanged("ProjectStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProjectInformation", Storage="_Employee", ThisKey="ProjectLeaderID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ProjectInformations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ProjectInformations.Add(this);
						this._ProjectLeaderID = value.EmployeeID;
					}
					else
					{
						this._ProjectLeaderID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInformation = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInformation = null;
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInformation = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInformation = null;
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInformation = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.ManagementStatus")]
	public partial class ManagementStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManagementStatusID;
		
		private string _ManagementStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManagementStatusIDChanging(int value);
    partial void OnManagementStatusIDChanged();
    partial void OnManagementStatus1Changing(string value);
    partial void OnManagementStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ManagementStatus()
		{
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManagementStatusID
		{
			get
			{
				return this._ManagementStatusID;
			}
			set
			{
				if ((this._ManagementStatusID != value))
				{
					this.OnManagementStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ManagementStatusID = value;
					this.SendPropertyChanged("ManagementStatusID");
					this.OnManagementStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ManagementStatus", Storage="_ManagementStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ManagementStatus1
		{
			get
			{
				return this._ManagementStatus1;
			}
			set
			{
				if ((this._ManagementStatus1 != value))
				{
					this.OnManagementStatus1Changing(value);
					this.SendPropertyChanging();
					this._ManagementStatus1 = value;
					this.SendPropertyChanged("ManagementStatus1");
					this.OnManagementStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManagementStatus_Review", Storage="_Reviews", ThisKey="ManagementStatusID", OtherKey="ManagementStatusID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.ManagementStatus = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.ManagementStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.RelatedReviewUnits")]
	public partial class RelatedReviewUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewID;
		
		private int _UnitID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
		private EntityRef<Review> _Review;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RelatedReviewUnit()
		{
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			this._Review = default(EntityRef<Review>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_RelatedReviewUnit", Storage="_OrganizationUnit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.RelatedReviewUnits.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.RelatedReviewUnits.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_RelatedReviewUnit", Storage="_Review", ThisKey="ReviewID", OtherKey="ReviewID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.RelatedReviewUnits.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.RelatedReviewUnits.Add(this);
						this._ReviewID = value.ReviewID;
					}
					else
					{
						this._ReviewID = default(int);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.ManagementRepresentatives")]
	public partial class ManagementRepresentative : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RepresentativeID;
		
		private int _EmployeeID;
		
		private int _ReviewID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Review> _Review;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepresentativeIDChanging(int value);
    partial void OnRepresentativeIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ManagementRepresentative()
		{
			this._Review = default(EntityRef<Review>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepresentativeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RepresentativeID
		{
			get
			{
				return this._RepresentativeID;
			}
			set
			{
				if ((this._RepresentativeID != value))
				{
					this.OnRepresentativeIDChanging(value);
					this.SendPropertyChanging();
					this._RepresentativeID = value;
					this.SendPropertyChanged("RepresentativeID");
					this.OnRepresentativeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", DbType="Int NOT NULL")]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_ManagementRepresentative", Storage="_Review", ThisKey="ReviewID", OtherKey="ReviewID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.ManagementRepresentatives.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.ManagementRepresentatives.Add(this);
						this._ReviewID = value.ReviewID;
					}
					else
					{
						this._ReviewID = default(int);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ManagementRepresentative", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ManagementRepresentatives.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ManagementRepresentatives.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.ReviewActions")]
	public partial class ReviewAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewActionID;
		
		private int _TaskID;
		
		private int _ActionTypeID;
		
		private string _Details;
		
		private System.DateTime _TargetCloseDate;
		
		private string _FollowUpComments;
		
		private System.Nullable<System.DateTime> _DelayedDate;
		
		private System.Nullable<System.DateTime> _CompletedDate;
		
		private int _ActioneeID;
		
		private bool _IsClosed;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ActionType> _ActionType;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewActionIDChanging(int value);
    partial void OnReviewActionIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnActionTypeIDChanging(int value);
    partial void OnActionTypeIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnTargetCloseDateChanging(System.DateTime value);
    partial void OnTargetCloseDateChanged();
    partial void OnFollowUpCommentsChanging(string value);
    partial void OnFollowUpCommentsChanged();
    partial void OnDelayedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDelayedDateChanged();
    partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDateChanged();
    partial void OnActioneeIDChanging(int value);
    partial void OnActioneeIDChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ReviewAction()
		{
			this._ActionType = default(EntityRef<ActionType>);
			this._Employee = default(EntityRef<Employee>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewActionID
		{
			get
			{
				return this._ReviewActionID;
			}
			set
			{
				if ((this._ReviewActionID != value))
				{
					this.OnReviewActionIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewActionID = value;
					this.SendPropertyChanged("ReviewActionID");
					this.OnReviewActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionTypeID", DbType="Int NOT NULL")]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					if (this._ActionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeID = value;
					this.SendPropertyChanged("ActionTypeID");
					this.OnActionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetCloseDate", DbType="DateTime NOT NULL")]
		public System.DateTime TargetCloseDate
		{
			get
			{
				return this._TargetCloseDate;
			}
			set
			{
				if ((this._TargetCloseDate != value))
				{
					this.OnTargetCloseDateChanging(value);
					this.SendPropertyChanging();
					this._TargetCloseDate = value;
					this.SendPropertyChanged("TargetCloseDate");
					this.OnTargetCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowUpComments", DbType="NVarChar(MAX)")]
		public string FollowUpComments
		{
			get
			{
				return this._FollowUpComments;
			}
			set
			{
				if ((this._FollowUpComments != value))
				{
					this.OnFollowUpCommentsChanging(value);
					this.SendPropertyChanging();
					this._FollowUpComments = value;
					this.SendPropertyChanged("FollowUpComments");
					this.OnFollowUpCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelayedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DelayedDate
		{
			get
			{
				return this._DelayedDate;
			}
			set
			{
				if ((this._DelayedDate != value))
				{
					this.OnDelayedDateChanging(value);
					this.SendPropertyChanging();
					this._DelayedDate = value;
					this.SendPropertyChanged("DelayedDate");
					this.OnDelayedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDate
		{
			get
			{
				return this._CompletedDate;
			}
			set
			{
				if ((this._CompletedDate != value))
				{
					this.OnCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._CompletedDate = value;
					this.SendPropertyChanged("CompletedDate");
					this.OnCompletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActioneeID", DbType="Int NOT NULL")]
		public int ActioneeID
		{
			get
			{
				return this._ActioneeID;
			}
			set
			{
				if ((this._ActioneeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActioneeIDChanging(value);
					this.SendPropertyChanging();
					this._ActioneeID = value;
					this.SendPropertyChanged("ActioneeID");
					this.OnActioneeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionType_ReviewAction", Storage="_ActionType", ThisKey="ActionTypeID", OtherKey="ActionTypeID", IsForeignKey=true)]
		public ActionType ActionType
		{
			get
			{
				return this._ActionType.Entity;
			}
			set
			{
				ActionType previousValue = this._ActionType.Entity;
				if (((previousValue != value) 
							|| (this._ActionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionType.Entity = null;
						previousValue.ReviewActions.Remove(this);
					}
					this._ActionType.Entity = value;
					if ((value != null))
					{
						value.ReviewActions.Add(this);
						this._ActionTypeID = value.ActionTypeID;
					}
					else
					{
						this._ActionTypeID = default(int);
					}
					this.SendPropertyChanged("ActionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ReviewAction", Storage="_Employee", ThisKey="ActioneeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ReviewActions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ReviewActions.Add(this);
						this._ActioneeID = value.EmployeeID;
					}
					else
					{
						this._ActioneeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ReviewAction", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.ReviewActions.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.ReviewActions.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.AuditStatus")]
	public partial class AuditStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditStatusID;
		
		private string _AuditStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Audit> _Audits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditStatusIDChanging(int value);
    partial void OnAuditStatusIDChanged();
    partial void OnAuditStatus1Changing(string value);
    partial void OnAuditStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AuditStatus()
		{
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditStatusID
		{
			get
			{
				return this._AuditStatusID;
			}
			set
			{
				if ((this._AuditStatusID != value))
				{
					this.OnAuditStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AuditStatusID = value;
					this.SendPropertyChanged("AuditStatusID");
					this.OnAuditStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AuditStatus", Storage="_AuditStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AuditStatus1
		{
			get
			{
				return this._AuditStatus1;
			}
			set
			{
				if ((this._AuditStatus1 != value))
				{
					this.OnAuditStatus1Changing(value);
					this.SendPropertyChanging();
					this._AuditStatus1 = value;
					this.SendPropertyChanged("AuditStatus1");
					this.OnAuditStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditStatus_Audit", Storage="_Audits", ThisKey="AuditStatusID", OtherKey="AuditStatusID")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.AuditStatus = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.AuditStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.AuditType")]
	public partial class AuditType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuditTypeId;
		
		private string _AuditType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Audit> _Audits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditTypeIdChanging(long value);
    partial void OnAuditTypeIdChanged();
    partial void OnAuditType1Changing(string value);
    partial void OnAuditType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AuditType()
		{
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditTypeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AuditTypeId
		{
			get
			{
				return this._AuditTypeId;
			}
			set
			{
				if ((this._AuditTypeId != value))
				{
					this.OnAuditTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AuditTypeId = value;
					this.SendPropertyChanged("AuditTypeId");
					this.OnAuditTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AuditType", Storage="_AuditType1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuditType1
		{
			get
			{
				return this._AuditType1;
			}
			set
			{
				if ((this._AuditType1 != value))
				{
					this.OnAuditType1Changing(value);
					this.SendPropertyChanging();
					this._AuditType1 = value;
					this.SendPropertyChanged("AuditType1");
					this.OnAuditType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditType_Audit", Storage="_Audits", ThisKey="AuditTypeId", OtherKey="AuditTypeId")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.AuditType = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.AuditType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.CheckList")]
	public partial class CheckList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckListID;
		
		private int _ISOProcessID;
		
		private long _AuditID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ISOProcess> _ISOProcess;
		
		private EntityRef<Audit> _Audit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckListIDChanging(int value);
    partial void OnCheckListIDChanged();
    partial void OnISOProcessIDChanging(int value);
    partial void OnISOProcessIDChanged();
    partial void OnAuditIDChanging(long value);
    partial void OnAuditIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CheckList()
		{
			this._ISOProcess = default(EntityRef<ISOProcess>);
			this._Audit = default(EntityRef<Audit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CheckListID
		{
			get
			{
				return this._CheckListID;
			}
			set
			{
				if ((this._CheckListID != value))
				{
					this.OnCheckListIDChanging(value);
					this.SendPropertyChanging();
					this._CheckListID = value;
					this.SendPropertyChanged("CheckListID");
					this.OnCheckListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOProcessID", DbType="Int NOT NULL")]
		public int ISOProcessID
		{
			get
			{
				return this._ISOProcessID;
			}
			set
			{
				if ((this._ISOProcessID != value))
				{
					if (this._ISOProcess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISOProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ISOProcessID = value;
					this.SendPropertyChanged("ISOProcessID");
					this.OnISOProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditID", DbType="BigInt NOT NULL")]
		public long AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISOProcess_CheckList", Storage="_ISOProcess", ThisKey="ISOProcessID", OtherKey="ISOProcessID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ISOProcess ISOProcess
		{
			get
			{
				return this._ISOProcess.Entity;
			}
			set
			{
				ISOProcess previousValue = this._ISOProcess.Entity;
				if (((previousValue != value) 
							|| (this._ISOProcess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISOProcess.Entity = null;
						previousValue.CheckLists.Remove(this);
					}
					this._ISOProcess.Entity = value;
					if ((value != null))
					{
						value.CheckLists.Add(this);
						this._ISOProcessID = value.ISOProcessID;
					}
					else
					{
						this._ISOProcessID = default(int);
					}
					this.SendPropertyChanged("ISOProcess");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_CheckList", Storage="_Audit", ThisKey="AuditID", OtherKey="AuditId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.CheckLists.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.CheckLists.Add(this);
						this._AuditID = value.AuditId;
					}
					else
					{
						this._AuditID = default(long);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.Auditors")]
	public partial class Auditor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditorID;
		
		private int _EmployeeID;
		
		private long _AuditID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Audit> _Audit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditorIDChanging(int value);
    partial void OnAuditorIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnAuditIDChanging(long value);
    partial void OnAuditIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Auditor()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Audit = default(EntityRef<Audit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditorID
		{
			get
			{
				return this._AuditorID;
			}
			set
			{
				if ((this._AuditorID != value))
				{
					this.OnAuditorIDChanging(value);
					this.SendPropertyChanging();
					this._AuditorID = value;
					this.SendPropertyChanged("AuditorID");
					this.OnAuditorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditID", DbType="BigInt NOT NULL")]
		public long AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Auditor", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Auditors.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Auditors.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_Auditor", Storage="_Audit", ThisKey="AuditID", OtherKey="AuditId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.Auditors.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.Auditors.Add(this);
						this._AuditID = value.AuditId;
					}
					else
					{
						this._AuditID = default(long);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.RelatedAuditUnits")]
	public partial class RelatedAuditUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuditID;
		
		private int _UnitID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
		private EntityRef<Audit> _Audit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIDChanging(long value);
    partial void OnAuditIDChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RelatedAuditUnit()
		{
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			this._Audit = default(EntityRef<Audit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_RelatedAuditUnit", Storage="_OrganizationUnit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.RelatedAuditUnits.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.RelatedAuditUnits.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_RelatedAuditUnit", Storage="_Audit", ThisKey="AuditID", OtherKey="AuditId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.RelatedAuditUnits.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.RelatedAuditUnits.Add(this);
						this._AuditID = value.AuditId;
					}
					else
					{
						this._AuditID = default(long);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.Finding")]
	public partial class Finding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FindingId;
		
		private long _AuditId;
		
		private string _Title;
		
		private long _FindingTypeId;
		
		private string _Details;
		
		private System.Nullable<int> _RootCauseID;
		
		private System.Nullable<int> _ISOCheckID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;

        private System.Nullable<int> _SubCauseID;
		
		private EntitySet<AuditAction> _AuditActions;
		
		private EntityRef<Cause> _Cause;

        private EntityRef<Cause> _SubCause;
		
		private EntityRef<FindingType> _FindingType;
		
		private EntityRef<Audit> _Audit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFindingIdChanging(long value);
    partial void OnFindingIdChanged();
    partial void OnAuditIdChanging(long value);
    partial void OnAuditIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFindingTypeIdChanging(long value);
    partial void OnFindingTypeIdChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnRootCauseIDChanging(System.Nullable<int> value);
    partial void OnRootCauseIDChanged();
    partial void OnISOCheckIDChanging(System.Nullable<int> value);
    partial void OnISOCheckIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnSubCauseIDChanging(System.Nullable<int> value);
    partial void OnSubCauseIDChanged();
    #endregion
		
		public Finding()
		{
			this._AuditActions = new EntitySet<AuditAction>(new Action<AuditAction>(this.attach_AuditActions), new Action<AuditAction>(this.detach_AuditActions));
			this._Cause = default(EntityRef<Cause>);
            this._SubCause = default(EntityRef<Cause>);
			this._FindingType = default(EntityRef<FindingType>);
			this._Audit = default(EntityRef<Audit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FindingId
		{
			get
			{
				return this._FindingId;
			}
			set
			{
				if ((this._FindingId != value))
				{
					this.OnFindingIdChanging(value);
					this.SendPropertyChanging();
					this._FindingId = value;
					this.SendPropertyChanged("FindingId");
					this.OnFindingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="BigInt NOT NULL")]
		public long AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingTypeId", DbType="BigInt NOT NULL")]
		public long FindingTypeId
		{
			get
			{
				return this._FindingTypeId;
			}
			set
			{
				if ((this._FindingTypeId != value))
				{
					if (this._FindingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFindingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FindingTypeId = value;
					this.SendPropertyChanged("FindingTypeId");
					this.OnFindingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootCauseID", DbType="Int")]
		public System.Nullable<int> RootCauseID
		{
			get
			{
				return this._RootCauseID;
			}
			set
			{
				if ((this._RootCauseID != value))
				{
					if (this._Cause.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootCauseIDChanging(value);
					this.SendPropertyChanging();
					this._RootCauseID = value;
					this.SendPropertyChanged("RootCauseID");
					this.OnRootCauseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOCheckID", DbType="Int")]
		public System.Nullable<int> ISOCheckID
		{
			get
			{
				return this._ISOCheckID;
			}
			set
			{
				if ((this._ISOCheckID != value))
				{
					this.OnISOCheckIDChanging(value);
					this.SendPropertyChanging();
					this._ISOCheckID = value;
					this.SendPropertyChanged("ISOCheckID");
					this.OnISOCheckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubCauseID", DbType = "Int")]
        public System.Nullable<int> SubCauseID
        {
            get
            {
                return this._SubCauseID;
            }
            set
            {
                if ((this._SubCauseID != value))
                {
                    if (this._SubCause.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSubCauseIDChanging(value);
                    this.SendPropertyChanging();
                    this._SubCauseID = value;
                    this.SendPropertyChanged("SubCauseID");
                    this.OnSubCauseIDChanged();
                }
            }
        }

        
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_AuditAction", Storage="_AuditActions", ThisKey="FindingId", OtherKey="FindingId")]
		public EntitySet<AuditAction> AuditActions
		{
			get
			{
				return this._AuditActions;
			}
			set
			{
				this._AuditActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cause_Finding", Storage="_Cause", ThisKey="RootCauseID",  OtherKey="CauseID", IsForeignKey=true)]
		public Cause Cause
		{
			get
			{
				return this._Cause.Entity;
			}
			set
			{
				Cause previousValue = this._Cause.Entity;
				if (((previousValue != value) 
							|| (this._Cause.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cause.Entity = null;
						previousValue.Findings.Remove(this);
					}
					this._Cause.Entity = value;
					if ((value != null))
					{
						value.Findings.Add(this);
						this._RootCauseID = value.CauseID;
					}
					else
					{
						this._RootCauseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cause");
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "SubCause_Finding", Storage = "_SubCause", ThisKey = "SubCauseID", OtherKey = "CauseID", IsForeignKey = true)]
        public Cause SubCause
        {
            get
            {
                return this._SubCause.Entity;
            }
            set
            {
                Cause previousValue = this._SubCause.Entity;
                if (((previousValue != value)
                            || (this._SubCause.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SubCause.Entity = null;
                        previousValue.Findings.Remove(this);
                    }
                    this._SubCause.Entity = value;
                    if ((value != null))
                    {
                        value.Findings.Add(this);
                        this._SubCauseID = value.CauseID;
                    }
                    else
                    {
                        this._SubCauseID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("SubCause");
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FindingType_Finding", Storage="_FindingType", ThisKey="FindingTypeId", OtherKey="FindingTypeId", IsForeignKey=true, DeleteRule="SET NULL")]
		public FindingType FindingType
		{
			get
			{
				return this._FindingType.Entity;
			}
			set
			{
				FindingType previousValue = this._FindingType.Entity;
				if (((previousValue != value) 
							|| (this._FindingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FindingType.Entity = null;
						previousValue.Findings.Remove(this);
					}
					this._FindingType.Entity = value;
					if ((value != null))
					{
						value.Findings.Add(this);
						this._FindingTypeId = value.FindingTypeId;
					}
					else
					{
						this._FindingTypeId = default(long);
					}
					this.SendPropertyChanged("FindingType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_Finding", Storage="_Audit", ThisKey="AuditId", OtherKey="AuditId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.Findings.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.Findings.Add(this);
						this._AuditId = value.AuditId;
					}
					else
					{
						this._AuditId = default(long);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditActions(AuditAction entity)
		{
			this.SendPropertyChanging();
			entity.Finding = this;
		}
		
		private void detach_AuditActions(AuditAction entity)
		{
			this.SendPropertyChanging();
			entity.Finding = null;
		}
	}


	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.AuditAction")]
	public partial class AuditAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuditActionId;
		
		private long _FindingId;
		
		private long _AuditActionTypeId;
		
		private string _Details;
		
		private System.DateTime _TargetClosingDate;
		
		private string _FollowUpComments;
		
		private System.Nullable<System.DateTime> _DelayedDate;
		
		private System.Nullable<System.DateTime> _CompletedDate;
		
		private int _ActioneeId;
		
		private bool _IsClosed;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Finding> _Finding;
		
		private EntityRef<AuditActionType> _AuditActionType;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditActionIdChanging(long value);
    partial void OnAuditActionIdChanged();
    partial void OnFindingIdChanging(long value);
    partial void OnFindingIdChanged();
    partial void OnAuditActionTypeIdChanging(long value);
    partial void OnAuditActionTypeIdChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnTargetClosingDateChanging(System.DateTime value);
    partial void OnTargetClosingDateChanged();
    partial void OnFollowUpCommentsChanging(string value);
    partial void OnFollowUpCommentsChanged();
    partial void OnDelayedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDelayedDateChanged();
    partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDateChanged();
    partial void OnActioneeIdChanging(int value);
    partial void OnActioneeIdChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AuditAction()
		{
			this._Finding = default(EntityRef<Finding>);
			this._AuditActionType = default(EntityRef<AuditActionType>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditActionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AuditActionId
		{
			get
			{
				return this._AuditActionId;
			}
			set
			{
				if ((this._AuditActionId != value))
				{
					this.OnAuditActionIdChanging(value);
					this.SendPropertyChanging();
					this._AuditActionId = value;
					this.SendPropertyChanged("AuditActionId");
					this.OnAuditActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingId", DbType="BigInt NOT NULL")]
		public long FindingId
		{
			get
			{
				return this._FindingId;
			}
			set
			{
				if ((this._FindingId != value))
				{
					if (this._Finding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFindingIdChanging(value);
					this.SendPropertyChanging();
					this._FindingId = value;
					this.SendPropertyChanged("FindingId");
					this.OnFindingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditActionTypeId", DbType="BigInt NOT NULL")]
		public long AuditActionTypeId
		{
			get
			{
				return this._AuditActionTypeId;
			}
			set
			{
				if ((this._AuditActionTypeId != value))
				{
					if (this._AuditActionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditActionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AuditActionTypeId = value;
					this.SendPropertyChanged("AuditActionTypeId");
					this.OnAuditActionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetClosingDate", DbType="DateTime NOT NULL")]
		public System.DateTime TargetClosingDate
		{
			get
			{
				return this._TargetClosingDate;
			}
			set
			{
				if ((this._TargetClosingDate != value))
				{
					this.OnTargetClosingDateChanging(value);
					this.SendPropertyChanging();
					this._TargetClosingDate = value;
					this.SendPropertyChanged("TargetClosingDate");
					this.OnTargetClosingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowUpComments", DbType="NVarChar(MAX)")]
		public string FollowUpComments
		{
			get
			{
				return this._FollowUpComments;
			}
			set
			{
				if ((this._FollowUpComments != value))
				{
					this.OnFollowUpCommentsChanging(value);
					this.SendPropertyChanging();
					this._FollowUpComments = value;
					this.SendPropertyChanged("FollowUpComments");
					this.OnFollowUpCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelayedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DelayedDate
		{
			get
			{
				return this._DelayedDate;
			}
			set
			{
				if ((this._DelayedDate != value))
				{
					this.OnDelayedDateChanging(value);
					this.SendPropertyChanging();
					this._DelayedDate = value;
					this.SendPropertyChanged("DelayedDate");
					this.OnDelayedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDate
		{
			get
			{
				return this._CompletedDate;
			}
			set
			{
				if ((this._CompletedDate != value))
				{
					this.OnCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._CompletedDate = value;
					this.SendPropertyChanged("CompletedDate");
					this.OnCompletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActioneeId", DbType="Int NOT NULL")]
		public int ActioneeId
		{
			get
			{
				return this._ActioneeId;
			}
			set
			{
				if ((this._ActioneeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActioneeIdChanging(value);
					this.SendPropertyChanging();
					this._ActioneeId = value;
					this.SendPropertyChanged("ActioneeId");
					this.OnActioneeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_AuditAction", Storage="_Finding", ThisKey="FindingId", OtherKey="FindingId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Finding Finding
		{
			get
			{
				return this._Finding.Entity;
			}
			set
			{
				Finding previousValue = this._Finding.Entity;
				if (((previousValue != value) 
							|| (this._Finding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Finding.Entity = null;
						previousValue.AuditActions.Remove(this);
					}
					this._Finding.Entity = value;
					if ((value != null))
					{
						value.AuditActions.Add(this);
						this._FindingId = value.FindingId;
					}
					else
					{
						this._FindingId = default(long);
					}
					this.SendPropertyChanged("Finding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditActionType_AuditAction", Storage="_AuditActionType", ThisKey="AuditActionTypeId", OtherKey="AuditActionTypeId", IsForeignKey=true)]
		public AuditActionType AuditActionType
		{
			get
			{
				return this._AuditActionType.Entity;
			}
			set
			{
				AuditActionType previousValue = this._AuditActionType.Entity;
				if (((previousValue != value) 
							|| (this._AuditActionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditActionType.Entity = null;
						previousValue.AuditActions.Remove(this);
					}
					this._AuditActionType.Entity = value;
					if ((value != null))
					{
						value.AuditActions.Add(this);
						this._AuditActionTypeId = value.AuditActionTypeId;
					}
					else
					{
						this._AuditActionTypeId = default(long);
					}
					this.SendPropertyChanged("AuditActionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AuditAction", Storage="_Employee", ThisKey="ActioneeId", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AuditActions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AuditActions.Add(this);
						this._ActioneeId = value.EmployeeID;
					}
					else
					{
						this._ActioneeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemUserType")]
	public partial class SystemUserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserTypeID;
		
		private string _UserType;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<SystemUser> _SystemUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public SystemUserType()
		{
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUserType_SystemUser", Storage="_SystemUsers", ThisKey="UserTypeID", OtherKey="UserTypeID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUserType = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetDepreciation")]
	public partial class AssetDepreciation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetDepreciationId;
		
		private long _AssetId;
		
		private decimal _DepreciationAmount;
		
		private System.DateTime _DepreciationDate;
		
		private int _CurrencyID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetDepreciationIdChanging(long value);
    partial void OnAssetDepreciationIdChanged();
    partial void OnAssetIdChanging(long value);
    partial void OnAssetIdChanged();
    partial void OnDepreciationAmountChanging(decimal value);
    partial void OnDepreciationAmountChanged();
    partial void OnDepreciationDateChanging(System.DateTime value);
    partial void OnDepreciationDateChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetDepreciation()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetDepreciationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetDepreciationId
		{
			get
			{
				return this._AssetDepreciationId;
			}
			set
			{
				if ((this._AssetDepreciationId != value))
				{
					this.OnAssetDepreciationIdChanging(value);
					this.SendPropertyChanging();
					this._AssetDepreciationId = value;
					this.SendPropertyChanged("AssetDepreciationId");
					this.OnAssetDepreciationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetId", DbType="BigInt NOT NULL")]
		public long AssetId
		{
			get
			{
				return this._AssetId;
			}
			set
			{
				if ((this._AssetId != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetIdChanging(value);
					this.SendPropertyChanging();
					this._AssetId = value;
					this.SendPropertyChanged("AssetId");
					this.OnAssetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepreciationAmount", DbType="Decimal(10,2) NOT NULL")]
		public decimal DepreciationAmount
		{
			get
			{
				return this._DepreciationAmount;
			}
			set
			{
				if ((this._DepreciationAmount != value))
				{
					this.OnDepreciationAmountChanging(value);
					this.SendPropertyChanging();
					this._DepreciationAmount = value;
					this.SendPropertyChanged("DepreciationAmount");
					this.OnDepreciationAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepreciationDate", DbType="DateTime NOT NULL")]
		public System.DateTime DepreciationDate
		{
			get
			{
				return this._DepreciationDate;
			}
			set
			{
				if ((this._DepreciationDate != value))
				{
					this.OnDepreciationDateChanging(value);
					this.SendPropertyChanging();
					this._DepreciationDate = value;
					this.SendPropertyChanged("DepreciationDate");
					this.OnDepreciationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetDepreciation", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.AssetDepreciations.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.AssetDepreciations.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetDepreciation", Storage="_Asset", ThisKey="AssetId", OtherKey="AssetId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.AssetDepreciations.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.AssetDepreciations.Add(this);
						this._AssetId = value.AssetId;
					}
					else
					{
						this._AssetId = default(long);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.OrganizationUnit")]
	public partial class OrganizationUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitID;
		
		private string _UnitCode;
		
		private string _UnitName;
		
		private System.Nullable<int> _DominatorID;
		
		private System.DateTime _CreateDate;
		
		private int _Depth;
		
		private System.Nullable<int> _ORGLevelID;
		
		private int _CountryID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RelatedReviewUnit> _RelatedReviewUnits;
		
		private EntitySet<RelatedAuditUnit> _RelatedAuditUnits;
		
		private EntitySet<OrganizationUnit> _OrganizationUnits;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Position> _Positions;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Problem> _Problems1;
		
		private EntitySet<Problem> _Problems2;
		
		private EntitySet<CostCentre> _CostCentres;
		
		private EntitySet<Asset> _Assets;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit1;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<OrganizationLevel> _OrganizationLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnUnitCodeChanging(string value);
    partial void OnUnitCodeChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    partial void OnDominatorIDChanging(System.Nullable<int> value);
    partial void OnDominatorIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnDepthChanging(int value);
    partial void OnDepthChanged();
    partial void OnORGLevelIDChanging(System.Nullable<int> value);
    partial void OnORGLevelIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public OrganizationUnit()
		{
			this._RelatedReviewUnits = new EntitySet<RelatedReviewUnit>(new Action<RelatedReviewUnit>(this.attach_RelatedReviewUnits), new Action<RelatedReviewUnit>(this.detach_RelatedReviewUnits));
			this._RelatedAuditUnits = new EntitySet<RelatedAuditUnit>(new Action<RelatedAuditUnit>(this.attach_RelatedAuditUnits), new Action<RelatedAuditUnit>(this.detach_RelatedAuditUnits));
			this._OrganizationUnits = new EntitySet<OrganizationUnit>(new Action<OrganizationUnit>(this.attach_OrganizationUnits), new Action<OrganizationUnit>(this.detach_OrganizationUnits));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Problems1 = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems1), new Action<Problem>(this.detach_Problems1));
			this._Problems2 = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems2), new Action<Problem>(this.detach_Problems2));
			this._CostCentres = new EntitySet<CostCentre>(new Action<CostCentre>(this.attach_CostCentres), new Action<CostCentre>(this.detach_CostCentres));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._OrganizationUnit1 = default(EntityRef<OrganizationUnit>);
			this._Country = default(EntityRef<Country>);
			this._OrganizationLevel = default(EntityRef<OrganizationLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCode", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UnitCode
		{
			get
			{
				return this._UnitCode;
			}
			set
			{
				if ((this._UnitCode != value))
				{
					this.OnUnitCodeChanging(value);
					this.SendPropertyChanging();
					this._UnitCode = value;
					this.SendPropertyChanged("UnitCode");
					this.OnUnitCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DominatorID", DbType="Int")]
		public System.Nullable<int> DominatorID
		{
			get
			{
				return this._DominatorID;
			}
			set
			{
				if ((this._DominatorID != value))
				{
					if (this._OrganizationUnit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDominatorIDChanging(value);
					this.SendPropertyChanging();
					this._DominatorID = value;
					this.SendPropertyChanged("DominatorID");
					this.OnDominatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Int NOT NULL")]
		public int Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this.OnDepthChanging(value);
					this.SendPropertyChanging();
					this._Depth = value;
					this.SendPropertyChanged("Depth");
					this.OnDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORGLevelID", DbType="Int")]
		public System.Nullable<int> ORGLevelID
		{
			get
			{
				return this._ORGLevelID;
			}
			set
			{
				if ((this._ORGLevelID != value))
				{
					if (this._OrganizationLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnORGLevelIDChanging(value);
					this.SendPropertyChanging();
					this._ORGLevelID = value;
					this.SendPropertyChanged("ORGLevelID");
					this.OnORGLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_RelatedReviewUnit", Storage="_RelatedReviewUnits", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<RelatedReviewUnit> RelatedReviewUnits
		{
			get
			{
				return this._RelatedReviewUnits;
			}
			set
			{
				this._RelatedReviewUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_RelatedAuditUnit", Storage="_RelatedAuditUnits", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<RelatedAuditUnit> RelatedAuditUnits
		{
			get
			{
				return this._RelatedAuditUnits;
			}
			set
			{
				this._RelatedAuditUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_OrganizationUnit", Storage="_OrganizationUnits", ThisKey="UnitID", OtherKey="DominatorID")]
		public EntitySet<OrganizationUnit> OrganizationUnits
		{
			get
			{
				return this._OrganizationUnits;
			}
			set
			{
				this._OrganizationUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Document", Storage="_Documents", ThisKey="UnitID", OtherKey="DepartmentID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Position", Storage="_Positions", ThisKey="UnitID", OtherKey="DepartmentID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Record", Storage="_Records", ThisKey="UnitID", OtherKey="DepartmentID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Problem", Storage="_Problems", ThisKey="UnitID", OtherKey="AffectedDepartmentID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Problem1", Storage="_Problems1", ThisKey="UnitID", OtherKey="ReportDepartmentID")]
		public EntitySet<Problem> Problems1
		{
			get
			{
				return this._Problems1;
			}
			set
			{
				this._Problems1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Problem2", Storage="_Problems2", ThisKey="UnitID", OtherKey="ProblemRelatedDepartmentID")]
		public EntitySet<Problem> Problems2
		{
			get
			{
				return this._Problems2;
			}
			set
			{
				this._Problems2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_CostCentre", Storage="_CostCentres", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<CostCentre> CostCentres
		{
			get
			{
				return this._CostCentres;
			}
			set
			{
				this._CostCentres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Asset", Storage="_Assets", ThisKey="UnitID", OtherKey="DepartmentID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_OrganizationUnit", Storage="_OrganizationUnit1", ThisKey="DominatorID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit1
		{
			get
			{
				return this._OrganizationUnit1.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit1.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit1.Entity = null;
						previousValue.OrganizationUnits.Remove(this);
					}
					this._OrganizationUnit1.Entity = value;
					if ((value != null))
					{
						value.OrganizationUnits.Add(this);
						this._DominatorID = value.UnitID;
					}
					else
					{
						this._DominatorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationUnit1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_OrganizationUnit", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.OrganizationUnits.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.OrganizationUnits.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationLevel_OrganizationUnit", Storage="_OrganizationLevel", ThisKey="ORGLevelID", OtherKey="LevelID", IsForeignKey=true, DeleteRule="SET NULL")]
		public OrganizationLevel OrganizationLevel
		{
			get
			{
				return this._OrganizationLevel.Entity;
			}
			set
			{
				OrganizationLevel previousValue = this._OrganizationLevel.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationLevel.Entity = null;
						previousValue.OrganizationUnits.Remove(this);
					}
					this._OrganizationLevel.Entity = value;
					if ((value != null))
					{
						value.OrganizationUnits.Add(this);
						this._ORGLevelID = value.LevelID;
					}
					else
					{
						this._ORGLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelatedReviewUnits(RelatedReviewUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_RelatedReviewUnits(RelatedReviewUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_RelatedAuditUnits(RelatedAuditUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_RelatedAuditUnits(RelatedAuditUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_OrganizationUnits(OrganizationUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit1 = this;
		}
		
		private void detach_OrganizationUnits(OrganizationUnit entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit1 = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_Problems1(Problem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit1 = this;
		}
		
		private void detach_Problems1(Problem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit1 = null;
		}
		
		private void attach_Problems2(Problem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit2 = this;
		}
		
		private void detach_Problems2(Problem entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit2 = null;
		}
		
		private void attach_CostCentres(CostCentre entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_CostCentres(CostCentre entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.OrganizationUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetCalibrationStatus")]
	public partial class AssetCalibrationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetCalibrationStatusId;
		
		private string _CalibrationStatus;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetCalibrationStatusIdChanging(long value);
    partial void OnAssetCalibrationStatusIdChanged();
    partial void OnCalibrationStatusChanging(string value);
    partial void OnCalibrationStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetCalibrationStatus()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetCalibrationStatusId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetCalibrationStatusId
		{
			get
			{
				return this._AssetCalibrationStatusId;
			}
			set
			{
				if ((this._AssetCalibrationStatusId != value))
				{
					this.OnAssetCalibrationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AssetCalibrationStatusId = value;
					this.SendPropertyChanged("AssetCalibrationStatusId");
					this.OnAssetCalibrationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CalibrationStatus
		{
			get
			{
				return this._CalibrationStatus;
			}
			set
			{
				if ((this._CalibrationStatus != value))
				{
					this.OnCalibrationStatusChanging(value);
					this.SendPropertyChanging();
					this._CalibrationStatus = value;
					this.SendPropertyChanged("CalibrationStatus");
					this.OnCalibrationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetCalibrationStatus_Asset", Storage="_Assets", ThisKey="AssetCalibrationStatusId", OtherKey="CalibrationStatusId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetCalibrationStatus = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetCalibrationStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.FindingType")]
	public partial class FindingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FindingTypeId;
		
		private string _FindingType1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Finding> _Findings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFindingTypeIdChanging(long value);
    partial void OnFindingTypeIdChanged();
    partial void OnFindingType1Changing(string value);
    partial void OnFindingType1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public FindingType()
		{
			this._Findings = new EntitySet<Finding>(new Action<Finding>(this.attach_Findings), new Action<Finding>(this.detach_Findings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingTypeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FindingTypeId
		{
			get
			{
				return this._FindingTypeId;
			}
			set
			{
				if ((this._FindingTypeId != value))
				{
					this.OnFindingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FindingTypeId = value;
					this.SendPropertyChanged("FindingTypeId");
					this.OnFindingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FindingType", Storage="_FindingType1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FindingType1
		{
			get
			{
				return this._FindingType1;
			}
			set
			{
				if ((this._FindingType1 != value))
				{
					this.OnFindingType1Changing(value);
					this.SendPropertyChanging();
					this._FindingType1 = value;
					this.SendPropertyChanged("FindingType1");
					this.OnFindingType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FindingType_Finding", Storage="_Findings", ThisKey="FindingTypeId", OtherKey="FindingTypeId")]
		public EntitySet<Finding> Findings
		{
			get
			{
				return this._Findings;
			}
			set
			{
				this._Findings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Findings(Finding entity)
		{
			this.SendPropertyChanging();
			entity.FindingType = this;
		}
		
		private void detach_Findings(Finding entity)
		{
			this.SendPropertyChanging();
			entity.FindingType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.AuditActionType")]
	public partial class AuditActionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuditActionTypeId;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AuditAction> _AuditActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditActionTypeIdChanging(long value);
    partial void OnAuditActionTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AuditActionType()
		{
			this._AuditActions = new EntitySet<AuditAction>(new Action<AuditAction>(this.attach_AuditActions), new Action<AuditAction>(this.detach_AuditActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditActionTypeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AuditActionTypeId
		{
			get
			{
				return this._AuditActionTypeId;
			}
			set
			{
				if ((this._AuditActionTypeId != value))
				{
					this.OnAuditActionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AuditActionTypeId = value;
					this.SendPropertyChanged("AuditActionTypeId");
					this.OnAuditActionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditActionType_AuditAction", Storage="_AuditActions", ThisKey="AuditActionTypeId", OtherKey="AuditActionTypeId")]
		public EntitySet<AuditAction> AuditActions
		{
			get
			{
				return this._AuditActions;
			}
			set
			{
				this._AuditActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditActions(AuditAction entity)
		{
			this.SendPropertyChanging();
			entity.AuditActionType = this;
		}
		
		private void detach_AuditActions(AuditAction entity)
		{
			this.SendPropertyChanging();
			entity.AuditActionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.ActionType")]
	public partial class ActionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionTypeID;
		
		private string _ActionType1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ReviewAction> _ReviewActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionTypeIDChanging(int value);
    partial void OnActionTypeIDChanged();
    partial void OnActionType1Changing(string value);
    partial void OnActionType1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ActionType()
		{
			this._ReviewActions = new EntitySet<ReviewAction>(new Action<ReviewAction>(this.attach_ReviewActions), new Action<ReviewAction>(this.detach_ReviewActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActionTypeID
		{
			get
			{
				return this._ActionTypeID;
			}
			set
			{
				if ((this._ActionTypeID != value))
				{
					this.OnActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeID = value;
					this.SendPropertyChanged("ActionTypeID");
					this.OnActionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ActionType", Storage="_ActionType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ActionType1
		{
			get
			{
				return this._ActionType1;
			}
			set
			{
				if ((this._ActionType1 != value))
				{
					this.OnActionType1Changing(value);
					this.SendPropertyChanging();
					this._ActionType1 = value;
					this.SendPropertyChanged("ActionType1");
					this.OnActionType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActionType_ReviewAction", Storage="_ReviewActions", ThisKey="ActionTypeID", OtherKey="ActionTypeID")]
		public EntitySet<ReviewAction> ReviewActions
		{
			get
			{
				return this._ReviewActions;
			}
			set
			{
				this._ReviewActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReviewActions(ReviewAction entity)
		{
			this.SendPropertyChanging();
			entity.ActionType = this;
		}
		
		private void detach_ReviewActions(ReviewAction entity)
		{
			this.SendPropertyChanging();
			entity.ActionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.ReviewCategory")]
	public partial class ReviewCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewCategoryID;
		
		private string _ReviewCategory1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewCategoryIDChanging(int value);
    partial void OnReviewCategoryIDChanged();
    partial void OnReviewCategory1Changing(string value);
    partial void OnReviewCategory1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ReviewCategory()
		{
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewCategoryID
		{
			get
			{
				return this._ReviewCategoryID;
			}
			set
			{
				if ((this._ReviewCategoryID != value))
				{
					this.OnReviewCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewCategoryID = value;
					this.SendPropertyChanged("ReviewCategoryID");
					this.OnReviewCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ReviewCategory", Storage="_ReviewCategory1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ReviewCategory1
		{
			get
			{
				return this._ReviewCategory1;
			}
			set
			{
				if ((this._ReviewCategory1 != value))
				{
					this.OnReviewCategory1Changing(value);
					this.SendPropertyChanging();
					this._ReviewCategory1 = value;
					this.SendPropertyChanged("ReviewCategory1");
					this.OnReviewCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReviewCategory_Review", Storage="_Reviews", ThisKey="ReviewCategoryID", OtherKey="ReviewCategoryID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.ReviewCategory = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.ReviewCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.TrainingCourseStatus")]
	public partial class TrainingCourseStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingStatusID;
		
		private string _TrainingStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourse> _TrainingCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingStatusIDChanging(int value);
    partial void OnTrainingStatusIDChanged();
    partial void OnTrainingStatusChanging(string value);
    partial void OnTrainingStatusChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public TrainingCourseStatus()
		{
			this._TrainingCourses = new EntitySet<TrainingCourse>(new Action<TrainingCourse>(this.attach_TrainingCourses), new Action<TrainingCourse>(this.detach_TrainingCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingStatusID
		{
			get
			{
				return this._TrainingStatusID;
			}
			set
			{
				if ((this._TrainingStatusID != value))
				{
					this.OnTrainingStatusIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingStatusID = value;
					this.SendPropertyChanged("TrainingStatusID");
					this.OnTrainingStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingStatus", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TrainingStatus
		{
			get
			{
				return this._TrainingStatus;
			}
			set
			{
				if ((this._TrainingStatus != value))
				{
					this.OnTrainingStatusChanging(value);
					this.SendPropertyChanging();
					this._TrainingStatus = value;
					this.SendPropertyChanged("TrainingStatus");
					this.OnTrainingStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourseStatus_TrainingCourse", Storage="_TrainingCourses", ThisKey="TrainingStatusID", OtherKey="CourseStatusID")]
		public EntitySet<TrainingCourse> TrainingCourses
		{
			get
			{
				return this._TrainingCourses;
			}
			set
			{
				this._TrainingCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourseStatus = this;
		}
		
		private void detach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourseStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.EnrollerLevel")]
	public partial class EnrollerLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EnrollerLevelId;
		
		private string _EnrollerLevel1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourseEnrollment> _TrainingCourseEnrollments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrollerLevelIdChanging(long value);
    partial void OnEnrollerLevelIdChanged();
    partial void OnEnrollerLevel1Changing(string value);
    partial void OnEnrollerLevel1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public EnrollerLevel()
		{
			this._TrainingCourseEnrollments = new EntitySet<TrainingCourseEnrollment>(new Action<TrainingCourseEnrollment>(this.attach_TrainingCourseEnrollments), new Action<TrainingCourseEnrollment>(this.detach_TrainingCourseEnrollments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollerLevelId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EnrollerLevelId
		{
			get
			{
				return this._EnrollerLevelId;
			}
			set
			{
				if ((this._EnrollerLevelId != value))
				{
					this.OnEnrollerLevelIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollerLevelId = value;
					this.SendPropertyChanged("EnrollerLevelId");
					this.OnEnrollerLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EnrollerLevel", Storage="_EnrollerLevel1", DbType="NVarChar(250)")]
		public string EnrollerLevel1
		{
			get
			{
				return this._EnrollerLevel1;
			}
			set
			{
				if ((this._EnrollerLevel1 != value))
				{
					this.OnEnrollerLevel1Changing(value);
					this.SendPropertyChanging();
					this._EnrollerLevel1 = value;
					this.SendPropertyChanged("EnrollerLevel1");
					this.OnEnrollerLevel1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnrollerLevel_TrainingCourseEnrollment", Storage="_TrainingCourseEnrollments", ThisKey="EnrollerLevelId", OtherKey="EnrollerLevelId")]
		public EntitySet<TrainingCourseEnrollment> TrainingCourseEnrollments
		{
			get
			{
				return this._TrainingCourseEnrollments;
			}
			set
			{
				this._TrainingCourseEnrollments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.EnrollerLevel = this;
		}
		
		private void detach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.EnrollerLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.InstructorType")]
	public partial class InstructorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InstructorTypeID;
		
		private string _InstructorType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourseSchedule> _TrainingCourseSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstructorTypeIDChanging(int value);
    partial void OnInstructorTypeIDChanged();
    partial void OnInstructorType1Changing(string value);
    partial void OnInstructorType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public InstructorType()
		{
			this._TrainingCourseSchedules = new EntitySet<TrainingCourseSchedule>(new Action<TrainingCourseSchedule>(this.attach_TrainingCourseSchedules), new Action<TrainingCourseSchedule>(this.detach_TrainingCourseSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InstructorTypeID
		{
			get
			{
				return this._InstructorTypeID;
			}
			set
			{
				if ((this._InstructorTypeID != value))
				{
					this.OnInstructorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorTypeID = value;
					this.SendPropertyChanged("InstructorTypeID");
					this.OnInstructorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="InstructorType", Storage="_InstructorType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string InstructorType1
		{
			get
			{
				return this._InstructorType1;
			}
			set
			{
				if ((this._InstructorType1 != value))
				{
					this.OnInstructorType1Changing(value);
					this.SendPropertyChanging();
					this._InstructorType1 = value;
					this.SendPropertyChanged("InstructorType1");
					this.OnInstructorType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstructorType_TrainingCourseSchedule", Storage="_TrainingCourseSchedules", ThisKey="InstructorTypeID", OtherKey="InstructorTypeID")]
		public EntitySet<TrainingCourseSchedule> TrainingCourseSchedules
		{
			get
			{
				return this._TrainingCourseSchedules;
			}
			set
			{
				this._TrainingCourseSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.InstructorType = this;
		}
		
		private void detach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.InstructorType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.TrainingCourseLocation")]
	public partial class TrainingCourseLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VenueID;
		
		private string _VenueName;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private int _CountryID;
		
		private string _City;
		
		private string _Website;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourseSchedule> _TrainingCourseSchedules;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueIDChanging(int value);
    partial void OnVenueIDChanged();
    partial void OnVenueNameChanging(string value);
    partial void OnVenueNameChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public TrainingCourseLocation()
		{
			this._TrainingCourseSchedules = new EntitySet<TrainingCourseSchedule>(new Action<TrainingCourseSchedule>(this.attach_TrainingCourseSchedules), new Action<TrainingCourseSchedule>(this.detach_TrainingCourseSchedules));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this.OnVenueNameChanging(value);
					this.SendPropertyChanging();
					this._VenueName = value;
					this.SendPropertyChanged("VenueName");
					this.OnVenueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="NVarChar(300)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(MAX)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourseLocation_TrainingCourseSchedule", Storage="_TrainingCourseSchedules", ThisKey="VenueID", OtherKey="VenueID")]
		public EntitySet<TrainingCourseSchedule> TrainingCourseSchedules
		{
			get
			{
				return this._TrainingCourseSchedules;
			}
			set
			{
				this._TrainingCourseSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_TrainingCourseLocation", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.TrainingCourseLocations.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseLocations.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourseLocation = this;
		}
		
		private void detach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourseLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.TrainingCourseSchedule")]
	public partial class TrainingCourseSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleID;
		
		private long _TrainingCourseId;
		
		private System.DateTime _CourseDate;
		
		private string _StartTime;
		
		private string _EndTime;
		
		private System.Nullable<int> _VenueID;
		
		private System.Nullable<int> _InstructorTypeID;
		
		private System.Nullable<int> _ExternalInstructorID;
		
		private System.Nullable<int> _InternalInstructorID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<TrainingCourseLocation> _TrainingCourseLocation;
		
		private EntityRef<InstructorType> _InstructorType;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<TrainingCourse> _TrainingCourse;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIDChanging(int value);
    partial void OnScheduleIDChanged();
    partial void OnTrainingCourseIdChanging(long value);
    partial void OnTrainingCourseIdChanged();
    partial void OnCourseDateChanging(System.DateTime value);
    partial void OnCourseDateChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnVenueIDChanging(System.Nullable<int> value);
    partial void OnVenueIDChanged();
    partial void OnInstructorTypeIDChanging(System.Nullable<int> value);
    partial void OnInstructorTypeIDChanged();
    partial void OnExternalInstructorIDChanging(System.Nullable<int> value);
    partial void OnExternalInstructorIDChanged();
    partial void OnInternalInstructorIDChanging(System.Nullable<int> value);
    partial void OnInternalInstructorIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public TrainingCourseSchedule()
		{
			this._TrainingCourseLocation = default(EntityRef<TrainingCourseLocation>);
			this._InstructorType = default(EntityRef<InstructorType>);
			this._Employee = default(EntityRef<Employee>);
			this._TrainingCourse = default(EntityRef<TrainingCourse>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleID
		{
			get
			{
				return this._ScheduleID;
			}
			set
			{
				if ((this._ScheduleID != value))
				{
					this.OnScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleID = value;
					this.SendPropertyChanged("ScheduleID");
					this.OnScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseId", DbType="BigInt NOT NULL")]
		public long TrainingCourseId
		{
			get
			{
				return this._TrainingCourseId;
			}
			set
			{
				if ((this._TrainingCourseId != value))
				{
					if (this._TrainingCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseIdChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseId = value;
					this.SendPropertyChanged("TrainingCourseId");
					this.OnTrainingCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseDate", DbType="DateTime NOT NULL")]
		public System.DateTime CourseDate
		{
			get
			{
				return this._CourseDate;
			}
			set
			{
				if ((this._CourseDate != value))
				{
					this.OnCourseDateChanging(value);
					this.SendPropertyChanging();
					this._CourseDate = value;
					this.SendPropertyChanged("CourseDate");
					this.OnCourseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="NVarChar(10)")]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="NVarChar(10)")]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", DbType="Int")]
		public System.Nullable<int> VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._TrainingCourseLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorTypeID", DbType="Int")]
		public System.Nullable<int> InstructorTypeID
		{
			get
			{
				return this._InstructorTypeID;
			}
			set
			{
				if ((this._InstructorTypeID != value))
				{
					if (this._InstructorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InstructorTypeID = value;
					this.SendPropertyChanged("InstructorTypeID");
					this.OnInstructorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalInstructorID", DbType="Int")]
		public System.Nullable<int> ExternalInstructorID
		{
			get
			{
				return this._ExternalInstructorID;
			}
			set
			{
				if ((this._ExternalInstructorID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExternalInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._ExternalInstructorID = value;
					this.SendPropertyChanged("ExternalInstructorID");
					this.OnExternalInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalInstructorID", DbType="Int")]
		public System.Nullable<int> InternalInstructorID
		{
			get
			{
				return this._InternalInstructorID;
			}
			set
			{
				if ((this._InternalInstructorID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInternalInstructorIDChanging(value);
					this.SendPropertyChanging();
					this._InternalInstructorID = value;
					this.SendPropertyChanged("InternalInstructorID");
					this.OnInternalInstructorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourseLocation_TrainingCourseSchedule", Storage="_TrainingCourseLocation", ThisKey="VenueID", OtherKey="VenueID", IsForeignKey=true)]
		public TrainingCourseLocation TrainingCourseLocation
		{
			get
			{
				return this._TrainingCourseLocation.Entity;
			}
			set
			{
				TrainingCourseLocation previousValue = this._TrainingCourseLocation.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourseLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourseLocation.Entity = null;
						previousValue.TrainingCourseSchedules.Remove(this);
					}
					this._TrainingCourseLocation.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseSchedules.Add(this);
						this._VenueID = value.VenueID;
					}
					else
					{
						this._VenueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TrainingCourseLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstructorType_TrainingCourseSchedule", Storage="_InstructorType", ThisKey="InstructorTypeID", OtherKey="InstructorTypeID", IsForeignKey=true)]
		public InstructorType InstructorType
		{
			get
			{
				return this._InstructorType.Entity;
			}
			set
			{
				InstructorType previousValue = this._InstructorType.Entity;
				if (((previousValue != value) 
							|| (this._InstructorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstructorType.Entity = null;
						previousValue.TrainingCourseSchedules.Remove(this);
					}
					this._InstructorType.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseSchedules.Add(this);
						this._InstructorTypeID = value.InstructorTypeID;
					}
					else
					{
						this._InstructorTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InstructorType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TrainingCourseSchedule", Storage="_Employee", ThisKey="InternalInstructorID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TrainingCourseSchedules.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseSchedules.Add(this);
						this._InternalInstructorID = value.EmployeeID;
					}
					else
					{
						this._InternalInstructorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseSchedule", Storage="_TrainingCourse", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingCourse TrainingCourse
		{
			get
			{
				return this._TrainingCourse.Entity;
			}
			set
			{
				TrainingCourse previousValue = this._TrainingCourse.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourse.Entity = null;
						previousValue.TrainingCourseSchedules.Remove(this);
					}
					this._TrainingCourse.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseSchedules.Add(this);
						this._TrainingCourseId = value.TrainingCourseId;
					}
					else
					{
						this._TrainingCourseId = default(long);
					}
					this.SendPropertyChanged("TrainingCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TrainingCourseSchedule", Storage="_Customer", ThisKey="ExternalInstructorID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.TrainingCourseSchedules.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseSchedules.Add(this);
						this._ExternalInstructorID = value.CustomerID;
					}
					else
					{
						this._ExternalInstructorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultID;
		
		private string _Result1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AssetCalibration> _AssetCalibrations;
		
		private EntitySet<AssetMaintenance> _AssetMaintenances;
		
		private EntitySet<AssetElectricalTest> _AssetElectricalTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnResult1Changing(string value);
    partial void OnResult1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Result()
		{
			this._AssetCalibrations = new EntitySet<AssetCalibration>(new Action<AssetCalibration>(this.attach_AssetCalibrations), new Action<AssetCalibration>(this.detach_AssetCalibrations));
			this._AssetMaintenances = new EntitySet<AssetMaintenance>(new Action<AssetMaintenance>(this.attach_AssetMaintenances), new Action<AssetMaintenance>(this.detach_AssetMaintenances));
			this._AssetElectricalTests = new EntitySet<AssetElectricalTest>(new Action<AssetElectricalTest>(this.attach_AssetElectricalTests), new Action<AssetElectricalTest>(this.detach_AssetElectricalTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Result", Storage="_Result1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Result1
		{
			get
			{
				return this._Result1;
			}
			set
			{
				if ((this._Result1 != value))
				{
					this.OnResult1Changing(value);
					this.SendPropertyChanging();
					this._Result1 = value;
					this.SendPropertyChanged("Result1");
					this.OnResult1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_AssetCalibration", Storage="_AssetCalibrations", ThisKey="ResultID", OtherKey="ResultID")]
		public EntitySet<AssetCalibration> AssetCalibrations
		{
			get
			{
				return this._AssetCalibrations;
			}
			set
			{
				this._AssetCalibrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_AssetMaintenance", Storage="_AssetMaintenances", ThisKey="ResultID", OtherKey="ResultID")]
		public EntitySet<AssetMaintenance> AssetMaintenances
		{
			get
			{
				return this._AssetMaintenances;
			}
			set
			{
				this._AssetMaintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_AssetElectricalTest", Storage="_AssetElectricalTests", ThisKey="ResultID", OtherKey="ResultID")]
		public EntitySet<AssetElectricalTest> AssetElectricalTests
		{
			get
			{
				return this._AssetElectricalTests;
			}
			set
			{
				this._AssetElectricalTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Result = null;
		}
		
		private void attach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Result = null;
		}
		
		private void attach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Result = this;
		}
		
		private void detach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Result = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetMaintenanceStatus")]
	public partial class AssetMaintenanceStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetMaintenanceStatusId;
		
		private string _MaintenanceStatus;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetMaintenanceStatusIdChanging(long value);
    partial void OnAssetMaintenanceStatusIdChanged();
    partial void OnMaintenanceStatusChanging(string value);
    partial void OnMaintenanceStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetMaintenanceStatus()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetMaintenanceStatusId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetMaintenanceStatusId
		{
			get
			{
				return this._AssetMaintenanceStatusId;
			}
			set
			{
				if ((this._AssetMaintenanceStatusId != value))
				{
					this.OnAssetMaintenanceStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AssetMaintenanceStatusId = value;
					this.SendPropertyChanged("AssetMaintenanceStatusId");
					this.OnAssetMaintenanceStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaintenanceStatus
		{
			get
			{
				return this._MaintenanceStatus;
			}
			set
			{
				if ((this._MaintenanceStatus != value))
				{
					this.OnMaintenanceStatusChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceStatus = value;
					this.SendPropertyChanged("MaintenanceStatus");
					this.OnMaintenanceStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetMaintenanceStatus_Asset", Storage="_Assets", ThisKey="AssetMaintenanceStatusId", OtherKey="MaintenanceStatusId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetMaintenanceStatus = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetMaintenanceStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.CourseAttendanceStatus")]
	public partial class CourseAttendanceStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseAttendanceStatusID;
		
		private string _AttendanceStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourseEnrollment> _TrainingCourseEnrollments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseAttendanceStatusIDChanging(int value);
    partial void OnCourseAttendanceStatusIDChanged();
    partial void OnAttendanceStatusChanging(string value);
    partial void OnAttendanceStatusChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CourseAttendanceStatus()
		{
			this._TrainingCourseEnrollments = new EntitySet<TrainingCourseEnrollment>(new Action<TrainingCourseEnrollment>(this.attach_TrainingCourseEnrollments), new Action<TrainingCourseEnrollment>(this.detach_TrainingCourseEnrollments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseAttendanceStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseAttendanceStatusID
		{
			get
			{
				return this._CourseAttendanceStatusID;
			}
			set
			{
				if ((this._CourseAttendanceStatusID != value))
				{
					this.OnCourseAttendanceStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CourseAttendanceStatusID = value;
					this.SendPropertyChanged("CourseAttendanceStatusID");
					this.OnCourseAttendanceStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceStatus", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AttendanceStatus
		{
			get
			{
				return this._AttendanceStatus;
			}
			set
			{
				if ((this._AttendanceStatus != value))
				{
					this.OnAttendanceStatusChanging(value);
					this.SendPropertyChanging();
					this._AttendanceStatus = value;
					this.SendPropertyChanged("AttendanceStatus");
					this.OnAttendanceStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseAttendanceStatus_TrainingCourseEnrollment", Storage="_TrainingCourseEnrollments", ThisKey="CourseAttendanceStatusID", OtherKey="AttendanceStatusID")]
		public EntitySet<TrainingCourseEnrollment> TrainingCourseEnrollments
		{
			get
			{
				return this._TrainingCourseEnrollments;
			}
			set
			{
				this._TrainingCourseEnrollments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.CourseAttendanceStatus = this;
		}
		
		private void detach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.CourseAttendanceStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordMode")]
	public partial class RecordMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordModeID;
		
		private string _RecordMode1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Review> _Reviews;
		
		private EntitySet<TrainingCourse> _TrainingCourses;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Audit> _Audits;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnRecordMode1Changing(string value);
    partial void OnRecordMode1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RecordMode()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			this._TrainingCourses = new EntitySet<TrainingCourse>(new Action<TrainingCourse>(this.attach_TrainingCourses), new Action<TrainingCourse>(this.detach_TrainingCourses));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RecordMode", Storage="_RecordMode1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RecordMode1
		{
			get
			{
				return this._RecordMode1;
			}
			set
			{
				if ((this._RecordMode1 != value))
				{
					this.OnRecordMode1Changing(value);
					this.SendPropertyChanging();
					this._RecordMode1 = value;
					this.SendPropertyChanged("RecordMode1");
					this.OnRecordMode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Document", Storage="_Documents", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Review", Storage="_Reviews", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_TrainingCourse", Storage="_TrainingCourses", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<TrainingCourse> TrainingCourses
		{
			get
			{
				return this._TrainingCourses;
			}
			set
			{
				this._TrainingCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Record", Storage="_Records", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Risk", Storage="_Risks", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Problem", Storage="_Problems", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Audit", Storage="_Audits", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Asset", Storage="_Assets", ThisKey="RecordModeID", OtherKey="RecordModeID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.RecordMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetElectricalTestStatus")]
	public partial class AssetElectricalTestStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetElectricalTestStatusId;
		
		private string _ElectricalTestStatus;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetElectricalTestStatusIdChanging(long value);
    partial void OnAssetElectricalTestStatusIdChanged();
    partial void OnElectricalTestStatusChanging(string value);
    partial void OnElectricalTestStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetElectricalTestStatus()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetElectricalTestStatusId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetElectricalTestStatusId
		{
			get
			{
				return this._AssetElectricalTestStatusId;
			}
			set
			{
				if ((this._AssetElectricalTestStatusId != value))
				{
					this.OnAssetElectricalTestStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AssetElectricalTestStatusId = value;
					this.SendPropertyChanged("AssetElectricalTestStatusId");
					this.OnAssetElectricalTestStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ElectricalTestStatus
		{
			get
			{
				return this._ElectricalTestStatus;
			}
			set
			{
				if ((this._ElectricalTestStatus != value))
				{
					this.OnElectricalTestStatusChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestStatus = value;
					this.SendPropertyChanged("ElectricalTestStatus");
					this.OnElectricalTestStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetElectricalTestStatus_Asset", Storage="_Assets", ThisKey="AssetElectricalTestStatusId", OtherKey="ElectricalTestStatusId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetElectricalTestStatus = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetElectricalTestStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.TrainingCourseQuestions")]
	public partial class TrainingCourseQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TrainingCourseId;
		
		private long _CourseQuestionId;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<CourseQuestion> _CourseQuestion;
		
		private EntityRef<TrainingCourse> _TrainingCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingCourseIdChanging(long value);
    partial void OnTrainingCourseIdChanged();
    partial void OnCourseQuestionIdChanging(long value);
    partial void OnCourseQuestionIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public TrainingCourseQuestion()
		{
			this._CourseQuestion = default(EntityRef<CourseQuestion>);
			this._TrainingCourse = default(EntityRef<TrainingCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TrainingCourseId
		{
			get
			{
				return this._TrainingCourseId;
			}
			set
			{
				if ((this._TrainingCourseId != value))
				{
					if (this._TrainingCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseIdChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseId = value;
					this.SendPropertyChanged("TrainingCourseId");
					this.OnTrainingCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseQuestionId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CourseQuestionId
		{
			get
			{
				return this._CourseQuestionId;
			}
			set
			{
				if ((this._CourseQuestionId != value))
				{
					if (this._CourseQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._CourseQuestionId = value;
					this.SendPropertyChanged("CourseQuestionId");
					this.OnCourseQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseQuestion_TrainingCourseQuestion", Storage="_CourseQuestion", ThisKey="CourseQuestionId", OtherKey="CourseQuestionId", IsForeignKey=true)]
		public CourseQuestion CourseQuestion
		{
			get
			{
				return this._CourseQuestion.Entity;
			}
			set
			{
				CourseQuestion previousValue = this._CourseQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CourseQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseQuestion.Entity = null;
						previousValue.TrainingCourseQuestions.Remove(this);
					}
					this._CourseQuestion.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseQuestions.Add(this);
						this._CourseQuestionId = value.CourseQuestionId;
					}
					else
					{
						this._CourseQuestionId = default(long);
					}
					this.SendPropertyChanged("CourseQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseQuestion", Storage="_TrainingCourse", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingCourse TrainingCourse
		{
			get
			{
				return this._TrainingCourse.Entity;
			}
			set
			{
				TrainingCourse previousValue = this._TrainingCourse.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourse.Entity = null;
						previousValue.TrainingCourseQuestions.Remove(this);
					}
					this._TrainingCourse.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseQuestions.Add(this);
						this._TrainingCourseId = value.TrainingCourseId;
					}
					else
					{
						this._TrainingCourseId = default(long);
					}
					this.SendPropertyChanged("TrainingCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.CourseFeedBack")]
	public partial class CourseFeedBack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TrainingCourseId;
		
		private long _CourseQuestionId;
		
		private int _EmployeeId;
		
		private int _AnswerValue;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<CourseQuestion> _CourseQuestion;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<TrainingCourse> _TrainingCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingCourseIdChanging(long value);
    partial void OnTrainingCourseIdChanged();
    partial void OnCourseQuestionIdChanging(long value);
    partial void OnCourseQuestionIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnAnswerValueChanging(int value);
    partial void OnAnswerValueChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CourseFeedBack()
		{
			this._CourseQuestion = default(EntityRef<CourseQuestion>);
			this._Employee = default(EntityRef<Employee>);
			this._TrainingCourse = default(EntityRef<TrainingCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TrainingCourseId
		{
			get
			{
				return this._TrainingCourseId;
			}
			set
			{
				if ((this._TrainingCourseId != value))
				{
					if (this._TrainingCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseIdChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseId = value;
					this.SendPropertyChanged("TrainingCourseId");
					this.OnTrainingCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseQuestionId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CourseQuestionId
		{
			get
			{
				return this._CourseQuestionId;
			}
			set
			{
				if ((this._CourseQuestionId != value))
				{
					if (this._CourseQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._CourseQuestionId = value;
					this.SendPropertyChanged("CourseQuestionId");
					this.OnCourseQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerValue", DbType="Int NOT NULL")]
		public int AnswerValue
		{
			get
			{
				return this._AnswerValue;
			}
			set
			{
				if ((this._AnswerValue != value))
				{
					this.OnAnswerValueChanging(value);
					this.SendPropertyChanging();
					this._AnswerValue = value;
					this.SendPropertyChanged("AnswerValue");
					this.OnAnswerValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseQuestion_CourseFeedBack", Storage="_CourseQuestion", ThisKey="CourseQuestionId", OtherKey="CourseQuestionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseQuestion CourseQuestion
		{
			get
			{
				return this._CourseQuestion.Entity;
			}
			set
			{
				CourseQuestion previousValue = this._CourseQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CourseQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseQuestion.Entity = null;
						previousValue.CourseFeedBacks.Remove(this);
					}
					this._CourseQuestion.Entity = value;
					if ((value != null))
					{
						value.CourseFeedBacks.Add(this);
						this._CourseQuestionId = value.CourseQuestionId;
					}
					else
					{
						this._CourseQuestionId = default(long);
					}
					this.SendPropertyChanged("CourseQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CourseFeedBack", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CourseFeedBacks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CourseFeedBacks.Add(this);
						this._EmployeeId = value.EmployeeID;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_CourseFeedBack", Storage="_TrainingCourse", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingCourse TrainingCourse
		{
			get
			{
				return this._TrainingCourse.Entity;
			}
			set
			{
				TrainingCourse previousValue = this._TrainingCourse.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourse.Entity = null;
						previousValue.CourseFeedBacks.Remove(this);
					}
					this._TrainingCourse.Entity = value;
					if ((value != null))
					{
						value.CourseFeedBacks.Add(this);
						this._TrainingCourseId = value.TrainingCourseId;
					}
					else
					{
						this._TrainingCourseId = default(long);
					}
					this.SendPropertyChanged("TrainingCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="DocumentList.DocumentFileType")]
	public partial class DocumentFileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DocumentFileTypeId;
		
		private string _Extention;
		
		private string _ContentType;
		
		private System.Data.Linq.Binary _Icon;
		
		private string _FileType;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Record> _Records;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentFileTypeIdChanging(long value);
    partial void OnDocumentFileTypeIdChanged();
    partial void OnExtentionChanging(string value);
    partial void OnExtentionChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnIconChanging(System.Data.Linq.Binary value);
    partial void OnIconChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public DocumentFileType()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentFileTypeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DocumentFileTypeId
		{
			get
			{
				return this._DocumentFileTypeId;
			}
			set
			{
				if ((this._DocumentFileTypeId != value))
				{
					this.OnDocumentFileTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileTypeId = value;
					this.SendPropertyChanged("DocumentFileTypeId");
					this.OnDocumentFileTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extention", DbType="NVarChar(50)")]
		public string Extention
		{
			get
			{
				return this._Extention;
			}
			set
			{
				if ((this._Extention != value))
				{
					this.OnExtentionChanging(value);
					this.SendPropertyChanging();
					this._Extention = value;
					this.SendPropertyChanged("Extention");
					this.OnExtentionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="NVarChar(100)")]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="NVarChar(100)")]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFileType_Document", Storage="_Documents", ThisKey="DocumentFileTypeId", OtherKey="DocumentFileTypeID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFileType_Record", Storage="_Records", ThisKey="DocumentFileTypeId", OtherKey="RecordFileTypeID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFileType = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFileType = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFileType = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFileType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="DocumentList.DocumentType")]
	public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTypeID;
		
		private string _DocumentType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTypeIDChanging(int value);
    partial void OnDocumentTypeIDChanged();
    partial void OnDocumentType1Changing(string value);
    partial void OnDocumentType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public DocumentType()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="DocumentType", Storage="_DocumentType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DocumentType1
		{
			get
			{
				return this._DocumentType1;
			}
			set
			{
				if ((this._DocumentType1 != value))
				{
					this.OnDocumentType1Changing(value);
					this.SendPropertyChanging();
					this._DocumentType1 = value;
					this.SendPropertyChanged("DocumentType1");
					this.OnDocumentType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Document", Storage="_Documents", ThisKey="DocumentTypeID", OtherKey="DocumentTypeID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="DocumentList.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DocumentId;
		
		private string _DocumentNo;
		
		private System.Nullable<long> _DocumentFileTypeID;
		
		private System.Nullable<int> _DocumentTypeID;
		
		private string _Title;
		
		private System.Nullable<int> _DepartmentID;
		
		private System.Nullable<int> _ProjectID;
		
		private int _ReviewDuration;
		
		private int _PeriodID;
		
		private System.Nullable<int> _ReviewDurationDays;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private System.Nullable<System.DateTime> _LastReviewDate;
		
		private System.Nullable<System.DateTime> _NextReviewDate;
		
		private int _DocumentStatusID;
		
		private string _Remarks;
		
		private System.Nullable<long> _ModuleId;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ChangeControlNote> _ChangeControlNotes;
		
		private EntitySet<TrainingCourse> _TrainingCourses;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Audit> _Audits;
		
		private EntitySet<Asset> _Assets;
		
		private EntitySet<Asset> _Assets1;
		
		private EntitySet<Asset> _Assets2;
		
		private EntityRef<DocumentFileType> _DocumentFileType;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<Module> _Module;
		
		private EntityRef<ProjectInformation> _ProjectInformation;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<Period> _Period;
		
		private EntityRef<DocumentStatus> _DocumentStatus;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIdChanging(long value);
    partial void OnDocumentIdChanged();
    partial void OnDocumentNoChanging(string value);
    partial void OnDocumentNoChanged();
    partial void OnDocumentFileTypeIDChanging(System.Nullable<long> value);
    partial void OnDocumentFileTypeIDChanged();
    partial void OnDocumentTypeIDChanging(System.Nullable<int> value);
    partial void OnDocumentTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnReviewDurationChanging(int value);
    partial void OnReviewDurationChanged();
    partial void OnPeriodIDChanging(int value);
    partial void OnPeriodIDChanged();
    partial void OnReviewDurationDaysChanging(System.Nullable<int> value);
    partial void OnReviewDurationDaysChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnLastReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastReviewDateChanged();
    partial void OnNextReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextReviewDateChanged();
    partial void OnDocumentStatusIDChanging(int value);
    partial void OnDocumentStatusIDChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnModuleIdChanging(System.Nullable<long> value);
    partial void OnModuleIdChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Document()
		{
			this._ChangeControlNotes = new EntitySet<ChangeControlNote>(new Action<ChangeControlNote>(this.attach_ChangeControlNotes), new Action<ChangeControlNote>(this.detach_ChangeControlNotes));
			this._TrainingCourses = new EntitySet<TrainingCourse>(new Action<TrainingCourse>(this.attach_TrainingCourses), new Action<TrainingCourse>(this.detach_TrainingCourses));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._Assets1 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets1), new Action<Asset>(this.detach_Assets1));
			this._Assets2 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets2), new Action<Asset>(this.detach_Assets2));
			this._DocumentFileType = default(EntityRef<DocumentFileType>);
			this._DocumentType = default(EntityRef<DocumentType>);
			this._Module = default(EntityRef<Module>);
			this._ProjectInformation = default(EntityRef<ProjectInformation>);
			this._RecordMode = default(EntityRef<RecordMode>);
			this._Period = default(EntityRef<Period>);
			this._DocumentStatus = default(EntityRef<DocumentStatus>);
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					this.OnDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentId = value;
					this.SendPropertyChanged("DocumentId");
					this.OnDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DocumentNo
		{
			get
			{
				return this._DocumentNo;
			}
			set
			{
				if ((this._DocumentNo != value))
				{
					this.OnDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._DocumentNo = value;
					this.SendPropertyChanged("DocumentNo");
					this.OnDocumentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentFileTypeID", DbType="BigInt")]
		public System.Nullable<long> DocumentFileTypeID
		{
			get
			{
				return this._DocumentFileTypeID;
			}
			set
			{
				if ((this._DocumentFileTypeID != value))
				{
					if (this._DocumentFileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentFileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileTypeID = value;
					this.SendPropertyChanged("DocumentFileTypeID");
					this.OnDocumentFileTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeID", DbType="Int")]
		public System.Nullable<int> DocumentTypeID
		{
			get
			{
				return this._DocumentTypeID;
			}
			set
			{
				if ((this._DocumentTypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeID = value;
					this.SendPropertyChanged("DocumentTypeID");
					this.OnDocumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDuration", DbType="Int NOT NULL")]
		public int ReviewDuration
		{
			get
			{
				return this._ReviewDuration;
			}
			set
			{
				if ((this._ReviewDuration != value))
				{
					this.OnReviewDurationChanging(value);
					this.SendPropertyChanging();
					this._ReviewDuration = value;
					this.SendPropertyChanged("ReviewDuration");
					this.OnReviewDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int NOT NULL")]
		public int PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					if (this._Period.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDurationDays", DbType="Int")]
		public System.Nullable<int> ReviewDurationDays
		{
			get
			{
				return this._ReviewDurationDays;
			}
			set
			{
				if ((this._ReviewDurationDays != value))
				{
					this.OnReviewDurationDaysChanging(value);
					this.SendPropertyChanging();
					this._ReviewDurationDays = value;
					this.SendPropertyChanged("ReviewDurationDays");
					this.OnReviewDurationDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastReviewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastReviewDate
		{
			get
			{
				return this._LastReviewDate;
			}
			set
			{
				if ((this._LastReviewDate != value))
				{
					this.OnLastReviewDateChanging(value);
					this.SendPropertyChanging();
					this._LastReviewDate = value;
					this.SendPropertyChanged("LastReviewDate");
					this.OnLastReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextReviewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> NextReviewDate
		{
			get
			{
				return this._NextReviewDate;
			}
			set
			{
				if ((this._NextReviewDate != value))
				{
					this.OnNextReviewDateChanging(value);
					this.SendPropertyChanging();
					this._NextReviewDate = value;
					this.SendPropertyChanged("NextReviewDate");
					this.OnNextReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentStatusID", DbType="Int NOT NULL")]
		public int DocumentStatusID
		{
			get
			{
				return this._DocumentStatusID;
			}
			set
			{
				if ((this._DocumentStatusID != value))
				{
					if (this._DocumentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentStatusID = value;
					this.SendPropertyChanged("DocumentStatusID");
					this.OnDocumentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="BigInt")]
		public System.Nullable<long> ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_ChangeControlNote", Storage="_ChangeControlNotes", ThisKey="DocumentId", OtherKey="DocumentID")]
		public EntitySet<ChangeControlNote> ChangeControlNotes
		{
			get
			{
				return this._ChangeControlNotes;
			}
			set
			{
				this._ChangeControlNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_TrainingCourse", Storage="_TrainingCourses", ThisKey="DocumentId", OtherKey="MaterialID")]
		public EntitySet<TrainingCourse> TrainingCourses
		{
			get
			{
				return this._TrainingCourses;
			}
			set
			{
				this._TrainingCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Problem", Storage="_Problems", ThisKey="DocumentId", OtherKey="AffectedDocumentID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Audit", Storage="_Audits", ThisKey="DocumentId", OtherKey="ProcessDocumentID")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Asset", Storage="_Assets", ThisKey="DocumentId", OtherKey="ElectricalTestDocumentId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Asset1", Storage="_Assets1", ThisKey="DocumentId", OtherKey="CalibrationDocumentId")]
		public EntitySet<Asset> Assets1
		{
			get
			{
				return this._Assets1;
			}
			set
			{
				this._Assets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Asset2", Storage="_Assets2", ThisKey="DocumentId", OtherKey="MaintenanceDocumentId")]
		public EntitySet<Asset> Assets2
		{
			get
			{
				return this._Assets2;
			}
			set
			{
				this._Assets2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFileType_Document", Storage="_DocumentFileType", ThisKey="DocumentFileTypeID", OtherKey="DocumentFileTypeId", IsForeignKey=true, DeleteRule="SET NULL")]
		public DocumentFileType DocumentFileType
		{
			get
			{
				return this._DocumentFileType.Entity;
			}
			set
			{
				DocumentFileType previousValue = this._DocumentFileType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFileType.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentFileType.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocumentFileTypeID = value.DocumentFileTypeId;
					}
					else
					{
						this._DocumentFileTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocumentFileType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Document", Storage="_DocumentType", ThisKey="DocumentTypeID", OtherKey="DocumentTypeID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocumentTypeID = value.DocumentTypeID;
					}
					else
					{
						this._DocumentTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Document", Storage="_Module", ThisKey="ModuleId", OtherKey="ModuleId", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ModuleId = value.ModuleId;
					}
					else
					{
						this._ModuleId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectInformation_Document", Storage="_ProjectInformation", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="SET NULL")]
		public ProjectInformation ProjectInformation
		{
			get
			{
				return this._ProjectInformation.Entity;
			}
			set
			{
				ProjectInformation previousValue = this._ProjectInformation.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInformation.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._ProjectInformation.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Document", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Document", Storage="_Period", ThisKey="PeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period
		{
			get
			{
				return this._Period.Entity;
			}
			set
			{
				Period previousValue = this._Period.Entity;
				if (((previousValue != value) 
							|| (this._Period.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Period.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._PeriodID = value.PeriodID;
					}
					else
					{
						this._PeriodID = default(int);
					}
					this.SendPropertyChanged("Period");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentStatus_Document", Storage="_DocumentStatus", ThisKey="DocumentStatusID", OtherKey="DocumentStatusID", IsForeignKey=true)]
		public DocumentStatus DocumentStatus
		{
			get
			{
				return this._DocumentStatus.Entity;
			}
			set
			{
				DocumentStatus previousValue = this._DocumentStatus.Entity;
				if (((previousValue != value) 
							|| (this._DocumentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentStatus.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentStatus.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocumentStatusID = value.DocumentStatusID;
					}
					else
					{
						this._DocumentStatusID = default(int);
					}
					this.SendPropertyChanged("DocumentStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Document", Storage="_OrganizationUnit", ThisKey="DepartmentID", OtherKey="UnitID", IsForeignKey=true, DeleteRule="SET NULL")]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DepartmentID = value.UnitID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Document1 = this;
		}
		
		private void detach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Document1 = null;
		}
		
		private void attach_Assets2(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Document2 = this;
		}
		
		private void detach_Assets2(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Document2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ChangeControl.ChangeControlNote")]
	public partial class ChangeControlNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CCNID;
		
		private long _DocumentID;
		
		private string _Version;
		
		private int _CCNTypeID;
		
		private string _Details;
		
		private int _OriginatorID;
		
		private System.DateTime _OriginationDate;
		
		private int _OwnerID;
		
		private string _DocumentFileURL;
		
		private System.Data.Linq.Binary _DocumentFile;
		
		private string _DocumentFileName;
		
		private System.Nullable<long> _ModuleId;
		
		private System.Nullable<int> _CCNStatusID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ChangeControlApprovalMember> _ChangeControlApprovalMembers;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<ChangeControlType> _ChangeControlType;
		
		private EntityRef<ChangeControlNoteStatus> _ChangeControlNoteStatus;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCNIDChanging(int value);
    partial void OnCCNIDChanged();
    partial void OnDocumentIDChanging(long value);
    partial void OnDocumentIDChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnCCNTypeIDChanging(int value);
    partial void OnCCNTypeIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnOriginatorIDChanging(int value);
    partial void OnOriginatorIDChanged();
    partial void OnOriginationDateChanging(System.DateTime value);
    partial void OnOriginationDateChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnDocumentFileURLChanging(string value);
    partial void OnDocumentFileURLChanged();
    partial void OnDocumentFileChanging(System.Data.Linq.Binary value);
    partial void OnDocumentFileChanged();
    partial void OnDocumentFileNameChanging(string value);
    partial void OnDocumentFileNameChanged();
    partial void OnModuleIdChanging(System.Nullable<long> value);
    partial void OnModuleIdChanged();
    partial void OnCCNStatusIDChanging(System.Nullable<int> value);
    partial void OnCCNStatusIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ChangeControlNote()
		{
			this._ChangeControlApprovalMembers = new EntitySet<ChangeControlApprovalMember>(new Action<ChangeControlApprovalMember>(this.attach_ChangeControlApprovalMembers), new Action<ChangeControlApprovalMember>(this.detach_ChangeControlApprovalMembers));
			this._Document = default(EntityRef<Document>);
			this._ChangeControlType = default(EntityRef<ChangeControlType>);
			this._ChangeControlNoteStatus = default(EntityRef<ChangeControlNoteStatus>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CCNID
		{
			get
			{
				return this._CCNID;
			}
			set
			{
				if ((this._CCNID != value))
				{
					this.OnCCNIDChanging(value);
					this.SendPropertyChanging();
					this._CCNID = value;
					this.SendPropertyChanged("CCNID");
					this.OnCCNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="BigInt NOT NULL")]
		public long DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNTypeID", DbType="Int NOT NULL")]
		public int CCNTypeID
		{
			get
			{
				return this._CCNTypeID;
			}
			set
			{
				if ((this._CCNTypeID != value))
				{
					if (this._ChangeControlType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCCNTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CCNTypeID = value;
					this.SendPropertyChanged("CCNTypeID");
					this.OnCCNTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NVarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginatorID", DbType="Int NOT NULL")]
		public int OriginatorID
		{
			get
			{
				return this._OriginatorID;
			}
			set
			{
				if ((this._OriginatorID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOriginatorIDChanging(value);
					this.SendPropertyChanging();
					this._OriginatorID = value;
					this.SendPropertyChanged("OriginatorID");
					this.OnOriginatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginationDate", DbType="DateTime NOT NULL")]
		public System.DateTime OriginationDate
		{
			get
			{
				return this._OriginationDate;
			}
			set
			{
				if ((this._OriginationDate != value))
				{
					this.OnOriginationDateChanging(value);
					this.SendPropertyChanging();
					this._OriginationDate = value;
					this.SendPropertyChanged("OriginationDate");
					this.OnOriginationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentFileURL", DbType="NVarChar(MAX)")]
		public string DocumentFileURL
		{
			get
			{
				return this._DocumentFileURL;
			}
			set
			{
				if ((this._DocumentFileURL != value))
				{
					this.OnDocumentFileURLChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileURL = value;
					this.SendPropertyChanged("DocumentFileURL");
					this.OnDocumentFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentFile", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DocumentFile
		{
			get
			{
				return this._DocumentFile;
			}
			set
			{
				if ((this._DocumentFile != value))
				{
					this.OnDocumentFileChanging(value);
					this.SendPropertyChanging();
					this._DocumentFile = value;
					this.SendPropertyChanged("DocumentFile");
					this.OnDocumentFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentFileName", DbType="NVarChar(100)")]
		public string DocumentFileName
		{
			get
			{
				return this._DocumentFileName;
			}
			set
			{
				if ((this._DocumentFileName != value))
				{
					this.OnDocumentFileNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentFileName = value;
					this.SendPropertyChanged("DocumentFileName");
					this.OnDocumentFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="BigInt")]
		public System.Nullable<long> ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCNStatusID", DbType="Int")]
		public System.Nullable<int> CCNStatusID
		{
			get
			{
				return this._CCNStatusID;
			}
			set
			{
				if ((this._CCNStatusID != value))
				{
					if (this._ChangeControlNoteStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCCNStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CCNStatusID = value;
					this.SendPropertyChanged("CCNStatusID");
					this.OnCCNStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControlNote_ChangeControlApprovalMember", Storage="_ChangeControlApprovalMembers", ThisKey="CCNID", OtherKey="CCNID")]
		public EntitySet<ChangeControlApprovalMember> ChangeControlApprovalMembers
		{
			get
			{
				return this._ChangeControlApprovalMembers;
			}
			set
			{
				this._ChangeControlApprovalMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_ChangeControlNote", Storage="_Document", ThisKey="DocumentID", OtherKey="DocumentId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.ChangeControlNotes.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.ChangeControlNotes.Add(this);
						this._DocumentID = value.DocumentId;
					}
					else
					{
						this._DocumentID = default(long);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControlType_ChangeControlNote", Storage="_ChangeControlType", ThisKey="CCNTypeID", OtherKey="CCNTypeID", IsForeignKey=true)]
		public ChangeControlType ChangeControlType
		{
			get
			{
				return this._ChangeControlType.Entity;
			}
			set
			{
				ChangeControlType previousValue = this._ChangeControlType.Entity;
				if (((previousValue != value) 
							|| (this._ChangeControlType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeControlType.Entity = null;
						previousValue.ChangeControlNotes.Remove(this);
					}
					this._ChangeControlType.Entity = value;
					if ((value != null))
					{
						value.ChangeControlNotes.Add(this);
						this._CCNTypeID = value.CCNTypeID;
					}
					else
					{
						this._CCNTypeID = default(int);
					}
					this.SendPropertyChanged("ChangeControlType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeControlNoteStatus_ChangeControlNote", Storage="_ChangeControlNoteStatus", ThisKey="CCNStatusID", OtherKey="CCNStatusID", IsForeignKey=true)]
		public ChangeControlNoteStatus ChangeControlNoteStatus
		{
			get
			{
				return this._ChangeControlNoteStatus.Entity;
			}
			set
			{
				ChangeControlNoteStatus previousValue = this._ChangeControlNoteStatus.Entity;
				if (((previousValue != value) 
							|| (this._ChangeControlNoteStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeControlNoteStatus.Entity = null;
						previousValue.ChangeControlNotes.Remove(this);
					}
					this._ChangeControlNoteStatus.Entity = value;
					if ((value != null))
					{
						value.ChangeControlNotes.Add(this);
						this._CCNStatusID = value.CCNStatusID;
					}
					else
					{
						this._CCNStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChangeControlNoteStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChangeControlNote", Storage="_Employee", ThisKey="OriginatorID", OtherKey="EmployeeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ChangeControlNotes.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ChangeControlNotes.Add(this);
						this._OriginatorID = value.EmployeeID;
					}
					else
					{
						this._OriginatorID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChangeControlNote1", Storage="_Employee1", ThisKey="OwnerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.ChangeControlNotes1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.ChangeControlNotes1.Add(this);
						this._OwnerID = value.EmployeeID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControlNote = this;
		}
		
		private void detach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.ChangeControlNote = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewID;
		
		private string _ReviewNo;
		
		private System.Nullable<int> _ReviewCategoryID;
		
		private string _EventName;
		
		private System.DateTime _PlannedReviewDate;
		
		private System.Nullable<System.DateTime> _ActualReviewDate;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private string _Objectives;
		
		private string _Summary;
		
		private string _Notes;
		
		private int _ManagementStatusID;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RelatedReviewUnit> _RelatedReviewUnits;
		
		private EntitySet<ManagementRepresentative> _ManagementRepresentatives;
		
		private EntitySet<Task> _Tasks;

        private EntitySet<ReviewRecipient> _ReviewRecipients;
		
		private EntityRef<ManagementStatus> _ManagementStatus;
		
		private EntityRef<ReviewCategory> _ReviewCategory;
		
		private EntityRef<RecordMode> _RecordMode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnReviewNoChanging(string value);
    partial void OnReviewNoChanged();
    partial void OnReviewCategoryIDChanging(System.Nullable<int> value);
    partial void OnReviewCategoryIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnPlannedReviewDateChanging(System.DateTime value);
    partial void OnPlannedReviewDateChanged();
    partial void OnActualReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualReviewDateChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnObjectivesChanging(string value);
    partial void OnObjectivesChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnManagementStatusIDChanging(int value);
    partial void OnManagementStatusIDChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Review()
		{
			this._RelatedReviewUnits = new EntitySet<RelatedReviewUnit>(new Action<RelatedReviewUnit>(this.attach_RelatedReviewUnits), new Action<RelatedReviewUnit>(this.detach_RelatedReviewUnits));
			this._ManagementRepresentatives = new EntitySet<ManagementRepresentative>(new Action<ManagementRepresentative>(this.attach_ManagementRepresentatives), new Action<ManagementRepresentative>(this.detach_ManagementRepresentatives));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
            this._ReviewRecipients = new EntitySet<ReviewRecipient>(new Action<ReviewRecipient>(this.attach_ReviewRecipients), new Action<ReviewRecipient>(this.detach_ReviewRecipients));
            this._ManagementStatus = default(EntityRef<ManagementStatus>);
			this._ReviewCategory = default(EntityRef<ReviewCategory>);
			this._RecordMode = default(EntityRef<RecordMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewNo", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string ReviewNo
		{
			get
			{
				return this._ReviewNo;
			}
			set
			{
				if ((this._ReviewNo != value))
				{
					this.OnReviewNoChanging(value);
					this.SendPropertyChanging();
					this._ReviewNo = value;
					this.SendPropertyChanged("ReviewNo");
					this.OnReviewNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewCategoryID", DbType="Int")]
		public System.Nullable<int> ReviewCategoryID
		{
			get
			{
				return this._ReviewCategoryID;
			}
			set
			{
				if ((this._ReviewCategoryID != value))
				{
					if (this._ReviewCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewCategoryID = value;
					this.SendPropertyChanged("ReviewCategoryID");
					this.OnReviewCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedReviewDate", DbType="DateTime NOT NULL")]
		public System.DateTime PlannedReviewDate
		{
			get
			{
				return this._PlannedReviewDate;
			}
			set
			{
				if ((this._PlannedReviewDate != value))
				{
					this.OnPlannedReviewDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedReviewDate = value;
					this.SendPropertyChanged("PlannedReviewDate");
					this.OnPlannedReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualReviewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualReviewDate
		{
			get
			{
				return this._ActualReviewDate;
			}
			set
			{
				if ((this._ActualReviewDate != value))
				{
					this.OnActualReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ActualReviewDate = value;
					this.SendPropertyChanged("ActualReviewDate");
					this.OnActualReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Objectives", DbType="NVarChar(MAX)")]
		public string Objectives
		{
			get
			{
				return this._Objectives;
			}
			set
			{
				if ((this._Objectives != value))
				{
					this.OnObjectivesChanging(value);
					this.SendPropertyChanging();
					this._Objectives = value;
					this.SendPropertyChanged("Objectives");
					this.OnObjectivesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(MAX)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementStatusID", DbType="Int NOT NULL")]
		public int ManagementStatusID
		{
			get
			{
				return this._ManagementStatusID;
			}
			set
			{
				if ((this._ManagementStatusID != value))
				{
					if (this._ManagementStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagementStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ManagementStatusID = value;
					this.SendPropertyChanged("ManagementStatusID");
					this.OnManagementStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_RelatedReviewUnit", Storage="_RelatedReviewUnits", ThisKey="ReviewID", OtherKey="ReviewID")]
		public EntitySet<RelatedReviewUnit> RelatedReviewUnits
		{
			get
			{
				return this._RelatedReviewUnits;
			}
			set
			{
				this._RelatedReviewUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_ManagementRepresentative", Storage="_ManagementRepresentatives", ThisKey="ReviewID", OtherKey="ReviewID")]
		public EntitySet<ManagementRepresentative> ManagementRepresentatives
		{
			get
			{
				return this._ManagementRepresentatives;
			}
			set
			{
				this._ManagementRepresentatives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_Task", Storage="_Tasks", ThisKey="ReviewID", OtherKey="ReviewID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Review_ReviewRecipient", Storage = "_ReviewRecipients", ThisKey = "ReviewID", OtherKey = "ReviewID")]
        public EntitySet<ReviewRecipient> ReviewRecipients
        {
            get
            {
                return this._ReviewRecipients;
            }
            set
            {
                this._ReviewRecipients.Assign(value);
            }
        }
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManagementStatus_Review", Storage="_ManagementStatus", ThisKey="ManagementStatusID", OtherKey="ManagementStatusID", IsForeignKey=true)]
		public ManagementStatus ManagementStatus
		{
			get
			{
				return this._ManagementStatus.Entity;
			}
			set
			{
				ManagementStatus previousValue = this._ManagementStatus.Entity;
				if (((previousValue != value) 
							|| (this._ManagementStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManagementStatus.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._ManagementStatus.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._ManagementStatusID = value.ManagementStatusID;
					}
					else
					{
						this._ManagementStatusID = default(int);
					}
					this.SendPropertyChanged("ManagementStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReviewCategory_Review", Storage="_ReviewCategory", ThisKey="ReviewCategoryID", OtherKey="ReviewCategoryID", IsForeignKey=true, DeleteRule="SET NULL")]
		public ReviewCategory ReviewCategory
		{
			get
			{
				return this._ReviewCategory.Entity;
			}
			set
			{
				ReviewCategory previousValue = this._ReviewCategory.Entity;
				if (((previousValue != value) 
							|| (this._ReviewCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReviewCategory.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._ReviewCategory.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._ReviewCategoryID = value.ReviewCategoryID;
					}
					else
					{
						this._ReviewCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReviewCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Review", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelatedReviewUnits(RelatedReviewUnit entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_RelatedReviewUnits(RelatedReviewUnit entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}
		
		private void attach_ManagementRepresentatives(ManagementRepresentative entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_ManagementRepresentatives(ManagementRepresentative entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}

        private void attach_ReviewRecipients(ReviewRecipient entity)
        {
            this.SendPropertyChanging();
            entity.Review = this;
        }

        private void detach_ReviewRecipients(ReviewRecipient entity)
        {
            this.SendPropertyChanging();
            entity.Review = null;
        }
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetCalibration")]
	public partial class AssetCalibration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetCalibrationId;
		
		private string _PurchaseOrderNumber;
		
		private long _AssetId;
		
		private System.DateTime _CalibrationDate;
		
		private System.Nullable<System.DateTime> _CalibrationDueDate;
		
		private System.Nullable<int> _CalibrationProviderID;
		
		private decimal _CalibrationCost;
		
		private int _CurrencyID;
		
		private int _ResultID;
		
		private string _ActionNeededOrComment;
		
		private bool _Trend;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Result> _Result;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetCalibrationIdChanging(long value);
    partial void OnAssetCalibrationIdChanged();
    partial void OnPurchaseOrderNumberChanging(string value);
    partial void OnPurchaseOrderNumberChanged();
    partial void OnAssetIdChanging(long value);
    partial void OnAssetIdChanged();
    partial void OnCalibrationDateChanging(System.DateTime value);
    partial void OnCalibrationDateChanged();
    partial void OnCalibrationDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCalibrationDueDateChanged();
    partial void OnCalibrationProviderIDChanging(System.Nullable<int> value);
    partial void OnCalibrationProviderIDChanged();
    partial void OnCalibrationCostChanging(decimal value);
    partial void OnCalibrationCostChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnActionNeededOrCommentChanging(string value);
    partial void OnActionNeededOrCommentChanged();
    partial void OnTrendChanging(bool value);
    partial void OnTrendChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetCalibration()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Result = default(EntityRef<Result>);
			this._Customer = default(EntityRef<Customer>);
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetCalibrationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetCalibrationId
		{
			get
			{
				return this._AssetCalibrationId;
			}
			set
			{
				if ((this._AssetCalibrationId != value))
				{
					this.OnAssetCalibrationIdChanging(value);
					this.SendPropertyChanging();
					this._AssetCalibrationId = value;
					this.SendPropertyChanged("AssetCalibrationId");
					this.OnAssetCalibrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PurchaseOrderNumber
		{
			get
			{
				return this._PurchaseOrderNumber;
			}
			set
			{
				if ((this._PurchaseOrderNumber != value))
				{
					this.OnPurchaseOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderNumber = value;
					this.SendPropertyChanged("PurchaseOrderNumber");
					this.OnPurchaseOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetId", DbType="BigInt NOT NULL")]
		public long AssetId
		{
			get
			{
				return this._AssetId;
			}
			set
			{
				if ((this._AssetId != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetIdChanging(value);
					this.SendPropertyChanging();
					this._AssetId = value;
					this.SendPropertyChanged("AssetId");
					this.OnAssetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CalibrationDate
		{
			get
			{
				return this._CalibrationDate;
			}
			set
			{
				if ((this._CalibrationDate != value))
				{
					this.OnCalibrationDateChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDate = value;
					this.SendPropertyChanged("CalibrationDate");
					this.OnCalibrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CalibrationDueDate
		{
			get
			{
				return this._CalibrationDueDate;
			}
			set
			{
				if ((this._CalibrationDueDate != value))
				{
					this.OnCalibrationDueDateChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDueDate = value;
					this.SendPropertyChanged("CalibrationDueDate");
					this.OnCalibrationDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationProviderID", DbType="Int")]
		public System.Nullable<int> CalibrationProviderID
		{
			get
			{
				return this._CalibrationProviderID;
			}
			set
			{
				if ((this._CalibrationProviderID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalibrationProviderIDChanging(value);
					this.SendPropertyChanging();
					this._CalibrationProviderID = value;
					this.SendPropertyChanged("CalibrationProviderID");
					this.OnCalibrationProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationCost", DbType="Decimal(10,2) NOT NULL")]
		public decimal CalibrationCost
		{
			get
			{
				return this._CalibrationCost;
			}
			set
			{
				if ((this._CalibrationCost != value))
				{
					this.OnCalibrationCostChanging(value);
					this.SendPropertyChanging();
					this._CalibrationCost = value;
					this.SendPropertyChanged("CalibrationCost");
					this.OnCalibrationCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					if (this._Result.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionNeededOrComment", DbType="NVarChar(MAX)")]
		public string ActionNeededOrComment
		{
			get
			{
				return this._ActionNeededOrComment;
			}
			set
			{
				if ((this._ActionNeededOrComment != value))
				{
					this.OnActionNeededOrCommentChanging(value);
					this.SendPropertyChanging();
					this._ActionNeededOrComment = value;
					this.SendPropertyChanged("ActionNeededOrComment");
					this.OnActionNeededOrCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trend", DbType="Bit NOT NULL")]
		public bool Trend
		{
			get
			{
				return this._Trend;
			}
			set
			{
				if ((this._Trend != value))
				{
					this.OnTrendChanging(value);
					this.SendPropertyChanging();
					this._Trend = value;
					this.SendPropertyChanged("Trend");
					this.OnTrendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetCalibration", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.AssetCalibrations.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.AssetCalibrations.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_AssetCalibration", Storage="_Result", ThisKey="ResultID", OtherKey="ResultID", IsForeignKey=true)]
		public Result Result
		{
			get
			{
				return this._Result.Entity;
			}
			set
			{
				Result previousValue = this._Result.Entity;
				if (((previousValue != value) 
							|| (this._Result.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Result.Entity = null;
						previousValue.AssetCalibrations.Remove(this);
					}
					this._Result.Entity = value;
					if ((value != null))
					{
						value.AssetCalibrations.Add(this);
						this._ResultID = value.ResultID;
					}
					else
					{
						this._ResultID = default(int);
					}
					this.SendPropertyChanged("Result");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AssetCalibration", Storage="_Customer", ThisKey="CalibrationProviderID", OtherKey="CustomerID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AssetCalibrations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AssetCalibrations.Add(this);
						this._CalibrationProviderID = value.CustomerID;
					}
					else
					{
						this._CalibrationProviderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetCalibration", Storage="_Asset", ThisKey="AssetId", OtherKey="AssetId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.AssetCalibrations.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.AssetCalibrations.Add(this);
						this._AssetId = value.AssetId;
					}
					else
					{
						this._AssetId = default(long);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetMaintenance")]
	public partial class AssetMaintenance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetMaintenanceId;
		
		private string _PurchaseOrderNumber;
		
		private long _AssetId;
		
		private System.DateTime _MaintenanceDate;
		
		private System.Nullable<System.DateTime> _MaintenanceDueDate;
		
		private System.Nullable<int> _MaintenanceProviderID;
		
		private decimal _MaintenanceCost;
		
		private int _CurrencyID;
		
		private int _ResultID;
		
		private string _ActionNeededOrComment;
		
		private bool _Trend;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Result> _Result;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetMaintenanceIdChanging(long value);
    partial void OnAssetMaintenanceIdChanged();
    partial void OnPurchaseOrderNumberChanging(string value);
    partial void OnPurchaseOrderNumberChanged();
    partial void OnAssetIdChanging(long value);
    partial void OnAssetIdChanged();
    partial void OnMaintenanceDateChanging(System.DateTime value);
    partial void OnMaintenanceDateChanged();
    partial void OnMaintenanceDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMaintenanceDueDateChanged();
    partial void OnMaintenanceProviderIDChanging(System.Nullable<int> value);
    partial void OnMaintenanceProviderIDChanged();
    partial void OnMaintenanceCostChanging(decimal value);
    partial void OnMaintenanceCostChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnActionNeededOrCommentChanging(string value);
    partial void OnActionNeededOrCommentChanged();
    partial void OnTrendChanging(bool value);
    partial void OnTrendChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetMaintenance()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Result = default(EntityRef<Result>);
			this._Customer = default(EntityRef<Customer>);
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetMaintenanceId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetMaintenanceId
		{
			get
			{
				return this._AssetMaintenanceId;
			}
			set
			{
				if ((this._AssetMaintenanceId != value))
				{
					this.OnAssetMaintenanceIdChanging(value);
					this.SendPropertyChanging();
					this._AssetMaintenanceId = value;
					this.SendPropertyChanged("AssetMaintenanceId");
					this.OnAssetMaintenanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PurchaseOrderNumber
		{
			get
			{
				return this._PurchaseOrderNumber;
			}
			set
			{
				if ((this._PurchaseOrderNumber != value))
				{
					this.OnPurchaseOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderNumber = value;
					this.SendPropertyChanged("PurchaseOrderNumber");
					this.OnPurchaseOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetId", DbType="BigInt NOT NULL")]
		public long AssetId
		{
			get
			{
				return this._AssetId;
			}
			set
			{
				if ((this._AssetId != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetIdChanging(value);
					this.SendPropertyChanging();
					this._AssetId = value;
					this.SendPropertyChanged("AssetId");
					this.OnAssetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceDate", DbType="DateTime NOT NULL")]
		public System.DateTime MaintenanceDate
		{
			get
			{
				return this._MaintenanceDate;
			}
			set
			{
				if ((this._MaintenanceDate != value))
				{
					this.OnMaintenanceDateChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceDate = value;
					this.SendPropertyChanged("MaintenanceDate");
					this.OnMaintenanceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MaintenanceDueDate
		{
			get
			{
				return this._MaintenanceDueDate;
			}
			set
			{
				if ((this._MaintenanceDueDate != value))
				{
					this.OnMaintenanceDueDateChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceDueDate = value;
					this.SendPropertyChanged("MaintenanceDueDate");
					this.OnMaintenanceDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceProviderID", DbType="Int")]
		public System.Nullable<int> MaintenanceProviderID
		{
			get
			{
				return this._MaintenanceProviderID;
			}
			set
			{
				if ((this._MaintenanceProviderID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaintenanceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceProviderID = value;
					this.SendPropertyChanged("MaintenanceProviderID");
					this.OnMaintenanceProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceCost", DbType="Decimal(10,2) NOT NULL")]
		public decimal MaintenanceCost
		{
			get
			{
				return this._MaintenanceCost;
			}
			set
			{
				if ((this._MaintenanceCost != value))
				{
					this.OnMaintenanceCostChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceCost = value;
					this.SendPropertyChanged("MaintenanceCost");
					this.OnMaintenanceCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					if (this._Result.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionNeededOrComment", DbType="NVarChar(MAX)")]
		public string ActionNeededOrComment
		{
			get
			{
				return this._ActionNeededOrComment;
			}
			set
			{
				if ((this._ActionNeededOrComment != value))
				{
					this.OnActionNeededOrCommentChanging(value);
					this.SendPropertyChanging();
					this._ActionNeededOrComment = value;
					this.SendPropertyChanged("ActionNeededOrComment");
					this.OnActionNeededOrCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trend", DbType="Bit NOT NULL")]
		public bool Trend
		{
			get
			{
				return this._Trend;
			}
			set
			{
				if ((this._Trend != value))
				{
					this.OnTrendChanging(value);
					this.SendPropertyChanging();
					this._Trend = value;
					this.SendPropertyChanged("Trend");
					this.OnTrendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetMaintenance", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.AssetMaintenances.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.AssetMaintenances.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_AssetMaintenance", Storage="_Result", ThisKey="ResultID", OtherKey="ResultID", IsForeignKey=true)]
		public Result Result
		{
			get
			{
				return this._Result.Entity;
			}
			set
			{
				Result previousValue = this._Result.Entity;
				if (((previousValue != value) 
							|| (this._Result.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Result.Entity = null;
						previousValue.AssetMaintenances.Remove(this);
					}
					this._Result.Entity = value;
					if ((value != null))
					{
						value.AssetMaintenances.Add(this);
						this._ResultID = value.ResultID;
					}
					else
					{
						this._ResultID = default(int);
					}
					this.SendPropertyChanged("Result");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AssetMaintenance", Storage="_Customer", ThisKey="MaintenanceProviderID", OtherKey="CustomerID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AssetMaintenances.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AssetMaintenances.Add(this);
						this._MaintenanceProviderID = value.CustomerID;
					}
					else
					{
						this._MaintenanceProviderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetMaintenance", Storage="_Asset", ThisKey="AssetId", OtherKey="AssetId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.AssetMaintenances.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.AssetMaintenances.Add(this);
						this._AssetId = value.AssetId;
					}
					else
					{
						this._AssetId = default(long);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetElectricalTest")]
	public partial class AssetElectricalTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetElectricalTestId;
		
		private string _PurchaseOrderNumber;
		
		private long _AssetId;
		
		private System.DateTime _ElectricalTestDate;
		
		private System.Nullable<System.DateTime> _ElectricalTestDueDate;
		
		private System.Nullable<int> _ElectricalTestProviderID;
		
		private decimal _ElectricalTestCost;
		
		private int _CurrencyID;
		
		private int _ResultID;
		
		private string _ActionNeededOrComment;
		
		private bool _Trend;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Result> _Result;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetElectricalTestIdChanging(long value);
    partial void OnAssetElectricalTestIdChanged();
    partial void OnPurchaseOrderNumberChanging(string value);
    partial void OnPurchaseOrderNumberChanged();
    partial void OnAssetIdChanging(long value);
    partial void OnAssetIdChanged();
    partial void OnElectricalTestDateChanging(System.DateTime value);
    partial void OnElectricalTestDateChanged();
    partial void OnElectricalTestDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnElectricalTestDueDateChanged();
    partial void OnElectricalTestProviderIDChanging(System.Nullable<int> value);
    partial void OnElectricalTestProviderIDChanged();
    partial void OnElectricalTestCostChanging(decimal value);
    partial void OnElectricalTestCostChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnActionNeededOrCommentChanging(string value);
    partial void OnActionNeededOrCommentChanged();
    partial void OnTrendChanging(bool value);
    partial void OnTrendChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetElectricalTest()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Result = default(EntityRef<Result>);
			this._Customer = default(EntityRef<Customer>);
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetElectricalTestId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetElectricalTestId
		{
			get
			{
				return this._AssetElectricalTestId;
			}
			set
			{
				if ((this._AssetElectricalTestId != value))
				{
					this.OnAssetElectricalTestIdChanging(value);
					this.SendPropertyChanging();
					this._AssetElectricalTestId = value;
					this.SendPropertyChanged("AssetElectricalTestId");
					this.OnAssetElectricalTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PurchaseOrderNumber
		{
			get
			{
				return this._PurchaseOrderNumber;
			}
			set
			{
				if ((this._PurchaseOrderNumber != value))
				{
					this.OnPurchaseOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderNumber = value;
					this.SendPropertyChanged("PurchaseOrderNumber");
					this.OnPurchaseOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetId", DbType="BigInt NOT NULL")]
		public long AssetId
		{
			get
			{
				return this._AssetId;
			}
			set
			{
				if ((this._AssetId != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetIdChanging(value);
					this.SendPropertyChanging();
					this._AssetId = value;
					this.SendPropertyChanged("AssetId");
					this.OnAssetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestDate", DbType="DateTime NOT NULL")]
		public System.DateTime ElectricalTestDate
		{
			get
			{
				return this._ElectricalTestDate;
			}
			set
			{
				if ((this._ElectricalTestDate != value))
				{
					this.OnElectricalTestDateChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestDate = value;
					this.SendPropertyChanged("ElectricalTestDate");
					this.OnElectricalTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ElectricalTestDueDate
		{
			get
			{
				return this._ElectricalTestDueDate;
			}
			set
			{
				if ((this._ElectricalTestDueDate != value))
				{
					this.OnElectricalTestDueDateChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestDueDate = value;
					this.SendPropertyChanged("ElectricalTestDueDate");
					this.OnElectricalTestDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestProviderID", DbType="Int")]
		public System.Nullable<int> ElectricalTestProviderID
		{
			get
			{
				return this._ElectricalTestProviderID;
			}
			set
			{
				if ((this._ElectricalTestProviderID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalTestProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestProviderID = value;
					this.SendPropertyChanged("ElectricalTestProviderID");
					this.OnElectricalTestProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestCost", DbType="Decimal(10,2) NOT NULL")]
		public decimal ElectricalTestCost
		{
			get
			{
				return this._ElectricalTestCost;
			}
			set
			{
				if ((this._ElectricalTestCost != value))
				{
					this.OnElectricalTestCostChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestCost = value;
					this.SendPropertyChanged("ElectricalTestCost");
					this.OnElectricalTestCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					if (this._Result.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionNeededOrComment", DbType="NVarChar(MAX)")]
		public string ActionNeededOrComment
		{
			get
			{
				return this._ActionNeededOrComment;
			}
			set
			{
				if ((this._ActionNeededOrComment != value))
				{
					this.OnActionNeededOrCommentChanging(value);
					this.SendPropertyChanging();
					this._ActionNeededOrComment = value;
					this.SendPropertyChanged("ActionNeededOrComment");
					this.OnActionNeededOrCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trend", DbType="Bit NOT NULL")]
		public bool Trend
		{
			get
			{
				return this._Trend;
			}
			set
			{
				if ((this._Trend != value))
				{
					this.OnTrendChanging(value);
					this.SendPropertyChanging();
					this._Trend = value;
					this.SendPropertyChanged("Trend");
					this.OnTrendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_AssetElectricalTest", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.AssetElectricalTests.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.AssetElectricalTests.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Result_AssetElectricalTest", Storage="_Result", ThisKey="ResultID", OtherKey="ResultID", IsForeignKey=true)]
		public Result Result
		{
			get
			{
				return this._Result.Entity;
			}
			set
			{
				Result previousValue = this._Result.Entity;
				if (((previousValue != value) 
							|| (this._Result.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Result.Entity = null;
						previousValue.AssetElectricalTests.Remove(this);
					}
					this._Result.Entity = value;
					if ((value != null))
					{
						value.AssetElectricalTests.Add(this);
						this._ResultID = value.ResultID;
					}
					else
					{
						this._ResultID = default(int);
					}
					this.SendPropertyChanged("Result");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AssetElectricalTest", Storage="_Customer", ThisKey="ElectricalTestProviderID", OtherKey="CustomerID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AssetElectricalTests.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AssetElectricalTests.Add(this);
						this._ElectricalTestProviderID = value.CustomerID;
					}
					else
					{
						this._ElectricalTestProviderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetElectricalTest", Storage="_Asset", ThisKey="AssetId", OtherKey="AssetId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.AssetElectricalTests.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.AssetElectricalTests.Add(this);
						this._AssetId = value.AssetId;
					}
					else
					{
						this._AssetId = default(long);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetStatus")]
	public partial class AssetStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssetStatusID;
		
		private string _AssetStatus1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetStatusIDChanging(int value);
    partial void OnAssetStatusIDChanged();
    partial void OnAssetStatus1Changing(string value);
    partial void OnAssetStatus1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetStatus()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssetStatusID
		{
			get
			{
				return this._AssetStatusID;
			}
			set
			{
				if ((this._AssetStatusID != value))
				{
					this.OnAssetStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AssetStatusID = value;
					this.SendPropertyChanged("AssetStatusID");
					this.OnAssetStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AssetStatus", Storage="_AssetStatus1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AssetStatus1
		{
			get
			{
				return this._AssetStatus1;
			}
			set
			{
				if ((this._AssetStatus1 != value))
				{
					this.OnAssetStatus1Changing(value);
					this.SendPropertyChanging();
					this._AssetStatus1 = value;
					this.SendPropertyChanged("AssetStatus1");
					this.OnAssetStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetStatus_Asset", Storage="_Assets", ThisKey="AssetStatusID", OtherKey="AssetStatusId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetStatus = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.QuestionMode")]
	public partial class QuestionMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionModeID;
		
		private string _QuestionMode1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<CourseQuestion> _CourseQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionModeIDChanging(int value);
    partial void OnQuestionModeIDChanged();
    partial void OnQuestionMode1Changing(string value);
    partial void OnQuestionMode1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public QuestionMode()
		{
			this._CourseQuestions = new EntitySet<CourseQuestion>(new Action<CourseQuestion>(this.attach_CourseQuestions), new Action<CourseQuestion>(this.detach_CourseQuestions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionModeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionModeID
		{
			get
			{
				return this._QuestionModeID;
			}
			set
			{
				if ((this._QuestionModeID != value))
				{
					this.OnQuestionModeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionModeID = value;
					this.SendPropertyChanged("QuestionModeID");
					this.OnQuestionModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="QuestionMode", Storage="_QuestionMode1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string QuestionMode1
		{
			get
			{
				return this._QuestionMode1;
			}
			set
			{
				if ((this._QuestionMode1 != value))
				{
					this.OnQuestionMode1Changing(value);
					this.SendPropertyChanging();
					this._QuestionMode1 = value;
					this.SendPropertyChanged("QuestionMode1");
					this.OnQuestionMode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionMode_CourseQuestion", Storage="_CourseQuestions", ThisKey="QuestionModeID", OtherKey="QuestionModeID")]
		public EntitySet<CourseQuestion> CourseQuestions
		{
			get
			{
				return this._CourseQuestions;
			}
			set
			{
				this._CourseQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseQuestions(CourseQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionMode = this;
		}
		
		private void detach_CourseQuestions(CourseQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.CourseQuestion")]
	public partial class CourseQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CourseQuestionId;
		
		private string _Question;
		
		private System.Nullable<int> _QuestionModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourseQuestion> _TrainingCourseQuestions;
		
		private EntitySet<CourseFeedBack> _CourseFeedBacks;
		
		private EntityRef<QuestionMode> _QuestionMode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseQuestionIdChanging(long value);
    partial void OnCourseQuestionIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnQuestionModeIDChanging(System.Nullable<int> value);
    partial void OnQuestionModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CourseQuestion()
		{
			this._TrainingCourseQuestions = new EntitySet<TrainingCourseQuestion>(new Action<TrainingCourseQuestion>(this.attach_TrainingCourseQuestions), new Action<TrainingCourseQuestion>(this.detach_TrainingCourseQuestions));
			this._CourseFeedBacks = new EntitySet<CourseFeedBack>(new Action<CourseFeedBack>(this.attach_CourseFeedBacks), new Action<CourseFeedBack>(this.detach_CourseFeedBacks));
			this._QuestionMode = default(EntityRef<QuestionMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseQuestionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CourseQuestionId
		{
			get
			{
				return this._CourseQuestionId;
			}
			set
			{
				if ((this._CourseQuestionId != value))
				{
					this.OnCourseQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._CourseQuestionId = value;
					this.SendPropertyChanged("CourseQuestionId");
					this.OnCourseQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionModeID", DbType="Int")]
		public System.Nullable<int> QuestionModeID
		{
			get
			{
				return this._QuestionModeID;
			}
			set
			{
				if ((this._QuestionModeID != value))
				{
					if (this._QuestionMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionModeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionModeID = value;
					this.SendPropertyChanged("QuestionModeID");
					this.OnQuestionModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseQuestion_TrainingCourseQuestion", Storage="_TrainingCourseQuestions", ThisKey="CourseQuestionId", OtherKey="CourseQuestionId")]
		public EntitySet<TrainingCourseQuestion> TrainingCourseQuestions
		{
			get
			{
				return this._TrainingCourseQuestions;
			}
			set
			{
				this._TrainingCourseQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseQuestion_CourseFeedBack", Storage="_CourseFeedBacks", ThisKey="CourseQuestionId", OtherKey="CourseQuestionId")]
		public EntitySet<CourseFeedBack> CourseFeedBacks
		{
			get
			{
				return this._CourseFeedBacks;
			}
			set
			{
				this._CourseFeedBacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionMode_CourseQuestion", Storage="_QuestionMode", ThisKey="QuestionModeID", OtherKey="QuestionModeID", IsForeignKey=true)]
		public QuestionMode QuestionMode
		{
			get
			{
				return this._QuestionMode.Entity;
			}
			set
			{
				QuestionMode previousValue = this._QuestionMode.Entity;
				if (((previousValue != value) 
							|| (this._QuestionMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionMode.Entity = null;
						previousValue.CourseQuestions.Remove(this);
					}
					this._QuestionMode.Entity = value;
					if ((value != null))
					{
						value.CourseQuestions.Add(this);
						this._QuestionModeID = value.QuestionModeID;
					}
					else
					{
						this._QuestionModeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionMode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourseQuestions(TrainingCourseQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CourseQuestion = this;
		}
		
		private void detach_TrainingCourseQuestions(TrainingCourseQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CourseQuestion = null;
		}
		
		private void attach_CourseFeedBacks(CourseFeedBack entity)
		{
			this.SendPropertyChanging();
			entity.CourseQuestion = this;
		}
		
		private void detach_CourseFeedBacks(CourseFeedBack entity)
		{
			this.SendPropertyChanging();
			entity.CourseQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionID;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _OpeningDate;
		
		private System.DateTime _ClosingDate;
		
		private System.Nullable<int> _ReportingPositionID;
		
		private int _DepartmentID;
		
		private int _PositionStatusID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<OrganizationAssignment> _OrganizationAssignments;
		
		private EntitySet<PositionSkill> _PositionSkills;
		
		private EntitySet<Position> _Positions;
		
		private EntityRef<Position> _Position1;
		
		private EntityRef<PositionStatus> _PositionStatus;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOpeningDateChanging(System.DateTime value);
    partial void OnOpeningDateChanged();
    partial void OnClosingDateChanging(System.DateTime value);
    partial void OnClosingDateChanged();
    partial void OnReportingPositionIDChanging(System.Nullable<int> value);
    partial void OnReportingPositionIDChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnPositionStatusIDChanging(int value);
    partial void OnPositionStatusIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Position()
		{
			this._OrganizationAssignments = new EntitySet<OrganizationAssignment>(new Action<OrganizationAssignment>(this.attach_OrganizationAssignments), new Action<OrganizationAssignment>(this.detach_OrganizationAssignments));
			this._PositionSkills = new EntitySet<PositionSkill>(new Action<PositionSkill>(this.attach_PositionSkills), new Action<PositionSkill>(this.detach_PositionSkills));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			this._Position1 = default(EntityRef<Position>);
			this._PositionStatus = default(EntityRef<PositionStatus>);
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="DateTime NOT NULL")]
		public System.DateTime OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this.OnOpeningDateChanging(value);
					this.SendPropertyChanging();
					this._OpeningDate = value;
					this.SendPropertyChanged("OpeningDate");
					this.OnOpeningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosingDate", DbType="DateTime NOT NULL")]
		public System.DateTime ClosingDate
		{
			get
			{
				return this._ClosingDate;
			}
			set
			{
				if ((this._ClosingDate != value))
				{
					this.OnClosingDateChanging(value);
					this.SendPropertyChanging();
					this._ClosingDate = value;
					this.SendPropertyChanged("ClosingDate");
					this.OnClosingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportingPositionID", DbType="Int")]
		public System.Nullable<int> ReportingPositionID
		{
			get
			{
				return this._ReportingPositionID;
			}
			set
			{
				if ((this._ReportingPositionID != value))
				{
					if (this._Position1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportingPositionIDChanging(value);
					this.SendPropertyChanging();
					this._ReportingPositionID = value;
					this.SendPropertyChanged("ReportingPositionID");
					this.OnReportingPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionStatusID", DbType="Int NOT NULL")]
		public int PositionStatusID
		{
			get
			{
				return this._PositionStatusID;
			}
			set
			{
				if ((this._PositionStatusID != value))
				{
					if (this._PositionStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionStatusIDChanging(value);
					this.SendPropertyChanging();
					this._PositionStatusID = value;
					this.SendPropertyChanged("PositionStatusID");
					this.OnPositionStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_OrganizationAssignment", Storage="_OrganizationAssignments", ThisKey="PositionID", OtherKey="PositionID")]
		public EntitySet<OrganizationAssignment> OrganizationAssignments
		{
			get
			{
				return this._OrganizationAssignments;
			}
			set
			{
				this._OrganizationAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_PositionSkill", Storage="_PositionSkills", ThisKey="PositionID", OtherKey="PositionID")]
		public EntitySet<PositionSkill> PositionSkills
		{
			get
			{
				return this._PositionSkills;
			}
			set
			{
				this._PositionSkills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Position", Storage="_Positions", ThisKey="PositionID", OtherKey="ReportingPositionID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Position", Storage="_Position1", ThisKey="ReportingPositionID", OtherKey="PositionID", IsForeignKey=true)]
		public Position Position1
		{
			get
			{
				return this._Position1.Entity;
			}
			set
			{
				Position previousValue = this._Position1.Entity;
				if (((previousValue != value) 
							|| (this._Position1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position1.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Position1.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._ReportingPositionID = value.PositionID;
					}
					else
					{
						this._ReportingPositionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Position1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PositionStatus_Position", Storage="_PositionStatus", ThisKey="PositionStatusID", OtherKey="PositionStatusID", IsForeignKey=true)]
		public PositionStatus PositionStatus
		{
			get
			{
				return this._PositionStatus.Entity;
			}
			set
			{
				PositionStatus previousValue = this._PositionStatus.Entity;
				if (((previousValue != value) 
							|| (this._PositionStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PositionStatus.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._PositionStatus.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._PositionStatusID = value.PositionStatusID;
					}
					else
					{
						this._PositionStatusID = default(int);
					}
					this.SendPropertyChanged("PositionStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Position", Storage="_OrganizationUnit", ThisKey="DepartmentID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._DepartmentID = value.UnitID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationAssignments(OrganizationAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_OrganizationAssignments(OrganizationAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
		
		private void attach_PositionSkills(PositionSkill entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_PositionSkills(PositionSkill entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Position1 = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Position1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ResidencePermit")]
	public partial class ResidencePermit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermitID;
		
		private string _DocumentID;
		
		private System.DateTime _ValidFrom;
		
		private System.DateTime _ValidTo;
		
		private int _ResidenceTypeID;
		
		private int _ResidenceStatusID;
		
		private int _EmployeeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ResidencePermitStatus> _ResidencePermitStatus;
		
		private EntityRef<ResidencePermitType> _ResidencePermitType;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermitIDChanging(int value);
    partial void OnPermitIDChanged();
    partial void OnDocumentIDChanging(string value);
    partial void OnDocumentIDChanged();
    partial void OnValidFromChanging(System.DateTime value);
    partial void OnValidFromChanged();
    partial void OnValidToChanging(System.DateTime value);
    partial void OnValidToChanged();
    partial void OnResidenceTypeIDChanging(int value);
    partial void OnResidenceTypeIDChanged();
    partial void OnResidenceStatusIDChanging(int value);
    partial void OnResidenceStatusIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ResidencePermit()
		{
			this._ResidencePermitStatus = default(EntityRef<ResidencePermitStatus>);
			this._ResidencePermitType = default(EntityRef<ResidencePermitType>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermitID
		{
			get
			{
				return this._PermitID;
			}
			set
			{
				if ((this._PermitID != value))
				{
					this.OnPermitIDChanging(value);
					this.SendPropertyChanging();
					this._PermitID = value;
					this.SendPropertyChanged("PermitID");
					this.OnPermitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidFrom", DbType="DateTime NOT NULL")]
		public System.DateTime ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidTo", DbType="DateTime NOT NULL")]
		public System.DateTime ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this.OnValidToChanging(value);
					this.SendPropertyChanging();
					this._ValidTo = value;
					this.SendPropertyChanged("ValidTo");
					this.OnValidToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceTypeID", DbType="Int NOT NULL")]
		public int ResidenceTypeID
		{
			get
			{
				return this._ResidenceTypeID;
			}
			set
			{
				if ((this._ResidenceTypeID != value))
				{
					if (this._ResidencePermitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidenceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ResidenceTypeID = value;
					this.SendPropertyChanged("ResidenceTypeID");
					this.OnResidenceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceStatusID", DbType="Int NOT NULL")]
		public int ResidenceStatusID
		{
			get
			{
				return this._ResidenceStatusID;
			}
			set
			{
				if ((this._ResidenceStatusID != value))
				{
					if (this._ResidencePermitStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidenceStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ResidenceStatusID = value;
					this.SendPropertyChanged("ResidenceStatusID");
					this.OnResidenceStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResidencePermitStatus_ResidencePermit", Storage="_ResidencePermitStatus", ThisKey="ResidenceStatusID", OtherKey="PermitStatusID", IsForeignKey=true)]
		public ResidencePermitStatus ResidencePermitStatus
		{
			get
			{
				return this._ResidencePermitStatus.Entity;
			}
			set
			{
				ResidencePermitStatus previousValue = this._ResidencePermitStatus.Entity;
				if (((previousValue != value) 
							|| (this._ResidencePermitStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResidencePermitStatus.Entity = null;
						previousValue.ResidencePermits.Remove(this);
					}
					this._ResidencePermitStatus.Entity = value;
					if ((value != null))
					{
						value.ResidencePermits.Add(this);
						this._ResidenceStatusID = value.PermitStatusID;
					}
					else
					{
						this._ResidenceStatusID = default(int);
					}
					this.SendPropertyChanged("ResidencePermitStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResidencePermitType_ResidencePermit", Storage="_ResidencePermitType", ThisKey="ResidenceTypeID", OtherKey="PermitTypeID", IsForeignKey=true)]
		public ResidencePermitType ResidencePermitType
		{
			get
			{
				return this._ResidencePermitType.Entity;
			}
			set
			{
				ResidencePermitType previousValue = this._ResidencePermitType.Entity;
				if (((previousValue != value) 
							|| (this._ResidencePermitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResidencePermitType.Entity = null;
						previousValue.ResidencePermits.Remove(this);
					}
					this._ResidencePermitType.Entity = value;
					if ((value != null))
					{
						value.ResidencePermits.Add(this);
						this._ResidenceTypeID = value.PermitTypeID;
					}
					else
					{
						this._ResidenceTypeID = default(int);
					}
					this.SendPropertyChanged("ResidencePermitType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ResidencePermit", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ResidencePermits.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ResidencePermits.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ResidencePermitStatus")]
	public partial class ResidencePermitStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermitStatusID;
		
		private string _ResidencePermitStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ResidencePermit> _ResidencePermits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermitStatusIDChanging(int value);
    partial void OnPermitStatusIDChanged();
    partial void OnResidencePermitStatus1Changing(string value);
    partial void OnResidencePermitStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ResidencePermitStatus()
		{
			this._ResidencePermits = new EntitySet<ResidencePermit>(new Action<ResidencePermit>(this.attach_ResidencePermits), new Action<ResidencePermit>(this.detach_ResidencePermits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermitStatusID
		{
			get
			{
				return this._PermitStatusID;
			}
			set
			{
				if ((this._PermitStatusID != value))
				{
					this.OnPermitStatusIDChanging(value);
					this.SendPropertyChanging();
					this._PermitStatusID = value;
					this.SendPropertyChanged("PermitStatusID");
					this.OnPermitStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ResidencePermitStatus", Storage="_ResidencePermitStatus1", DbType="NVarChar(100)")]
		public string ResidencePermitStatus1
		{
			get
			{
				return this._ResidencePermitStatus1;
			}
			set
			{
				if ((this._ResidencePermitStatus1 != value))
				{
					this.OnResidencePermitStatus1Changing(value);
					this.SendPropertyChanging();
					this._ResidencePermitStatus1 = value;
					this.SendPropertyChanged("ResidencePermitStatus1");
					this.OnResidencePermitStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResidencePermitStatus_ResidencePermit", Storage="_ResidencePermits", ThisKey="PermitStatusID", OtherKey="ResidenceStatusID")]
		public EntitySet<ResidencePermit> ResidencePermits
		{
			get
			{
				return this._ResidencePermits;
			}
			set
			{
				this._ResidencePermits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResidencePermits(ResidencePermit entity)
		{
			this.SendPropertyChanging();
			entity.ResidencePermitStatus = this;
		}
		
		private void detach_ResidencePermits(ResidencePermit entity)
		{
			this.SendPropertyChanging();
			entity.ResidencePermitStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ResidencePermitType")]
	public partial class ResidencePermitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermitTypeID;
		
		private string _PermitType;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ResidencePermit> _ResidencePermits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermitTypeIDChanging(int value);
    partial void OnPermitTypeIDChanged();
    partial void OnPermitTypeChanging(string value);
    partial void OnPermitTypeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ResidencePermitType()
		{
			this._ResidencePermits = new EntitySet<ResidencePermit>(new Action<ResidencePermit>(this.attach_ResidencePermits), new Action<ResidencePermit>(this.detach_ResidencePermits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermitTypeID
		{
			get
			{
				return this._PermitTypeID;
			}
			set
			{
				if ((this._PermitTypeID != value))
				{
					this.OnPermitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PermitTypeID = value;
					this.SendPropertyChanged("PermitTypeID");
					this.OnPermitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PermitType
		{
			get
			{
				return this._PermitType;
			}
			set
			{
				if ((this._PermitType != value))
				{
					this.OnPermitTypeChanging(value);
					this.SendPropertyChanging();
					this._PermitType = value;
					this.SendPropertyChanged("PermitType");
					this.OnPermitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResidencePermitType_ResidencePermit", Storage="_ResidencePermits", ThisKey="PermitTypeID", OtherKey="ResidenceTypeID")]
		public EntitySet<ResidencePermit> ResidencePermits
		{
			get
			{
				return this._ResidencePermits;
			}
			set
			{
				this._ResidencePermits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResidencePermits(ResidencePermit entity)
		{
			this.SendPropertyChanging();
			entity.ResidencePermitType = this;
		}
		
		private void detach_ResidencePermits(ResidencePermit entity)
		{
			this.SendPropertyChanging();
			entity.ResidencePermitType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ContractExtensions")]
	public partial class ContractExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExtensionID;
		
		private System.DateTime _FromDate;
		
		private int _DurationID;
		
		private int _PeriodID;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private int _ContractID;
		
		private System.Nullable<bool> _ActiveFlag;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Period> _Period;
		
		private EntityRef<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtensionIDChanging(int value);
    partial void OnExtensionIDChanged();
    partial void OnFromDateChanging(System.DateTime value);
    partial void OnFromDateChanged();
    partial void OnDurationIDChanging(int value);
    partial void OnDurationIDChanged();
    partial void OnPeriodIDChanging(int value);
    partial void OnPeriodIDChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnActiveFlagChanging(System.Nullable<bool> value);
    partial void OnActiveFlagChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ContractExtension()
		{
			this._Period = default(EntityRef<Period>);
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExtensionID
		{
			get
			{
				return this._ExtensionID;
			}
			set
			{
				if ((this._ExtensionID != value))
				{
					this.OnExtensionIDChanging(value);
					this.SendPropertyChanging();
					this._ExtensionID = value;
					this.SendPropertyChanged("ExtensionID");
					this.OnExtensionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
		public System.DateTime FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationID", DbType="Int NOT NULL")]
		public int DurationID
		{
			get
			{
				return this._DurationID;
			}
			set
			{
				if ((this._DurationID != value))
				{
					this.OnDurationIDChanging(value);
					this.SendPropertyChanging();
					this._DurationID = value;
					this.SendPropertyChanged("DurationID");
					this.OnDurationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int NOT NULL")]
		public int PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					if (this._Period.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL")]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit")]
		public System.Nullable<bool> ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_ContractExtension", Storage="_Period", ThisKey="PeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period
		{
			get
			{
				return this._Period.Entity;
			}
			set
			{
				Period previousValue = this._Period.Entity;
				if (((previousValue != value) 
							|| (this._Period.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period.Entity = null;
						previousValue.ContractExtensions.Remove(this);
					}
					this._Period.Entity = value;
					if ((value != null))
					{
						value.ContractExtensions.Add(this);
						this._PeriodID = value.PeriodID;
					}
					else
					{
						this._PeriodID = default(int);
					}
					this.SendPropertyChanged("Period");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_ContractExtension", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractExtensions.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractExtensions.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.ContractGroup")]
	public partial class ContractGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private string _Description;
		
		private bool _IsConstraint;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<int> _PeriodID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Contract> _Contracts;
		
		private EntityRef<Period> _Period;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsConstraintChanging(bool value);
    partial void OnIsConstraintChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnPeriodIDChanging(System.Nullable<int> value);
    partial void OnPeriodIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ContractGroup()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Period = default(EntityRef<Period>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConstraint", DbType="Bit NOT NULL")]
		public bool IsConstraint
		{
			get
			{
				return this._IsConstraint;
			}
			set
			{
				if ((this._IsConstraint != value))
				{
					this.OnIsConstraintChanging(value);
					this.SendPropertyChanging();
					this._IsConstraint = value;
					this.SendPropertyChanged("IsConstraint");
					this.OnIsConstraintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int")]
		public System.Nullable<int> PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					if (this._Period.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractGroup_Contract", Storage="_Contracts", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_ContractGroup", Storage="_Period", ThisKey="PeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period
		{
			get
			{
				return this._Period.Entity;
			}
			set
			{
				Period previousValue = this._Period.Entity;
				if (((previousValue != value) 
							|| (this._Period.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period.Entity = null;
						previousValue.ContractGroups.Remove(this);
					}
					this._Period.Entity = value;
					if ((value != null))
					{
						value.ContractGroups.Add(this);
						this._PeriodID = value.PeriodID;
					}
					else
					{
						this._PeriodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Period");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractGroup = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.ContractGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private int _CountryID;
		
		private string _City;
		
		private string _PostalCode;
		
		private int _EmployeeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;

        private System.Nullable<int> _StateID;

        private System.Nullable<int> _CityID;
		
		private EntitySet<ContactDetail> _ContactDetails;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    #endregion
		
		public Address()
		{
			this._ContactDetails = new EntitySet<ContactDetail>(new Action<ContactDetail>(this.attach_ContactDetails), new Action<ContactDetail>(this.detach_ContactDetails));
			this._Country = default(EntityRef<Country>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="NVarChar(200)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(100)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateID", DbType = "Int")]
        public System.Nullable<int> StateID
        {
            get
            {
                return this._StateID;
            }
            set
            {
                if ((this._StateID != value))
                {
                    this.OnStateIDChanging(value);
                    this.SendPropertyChanging();
                    this._StateID = value;
                    this.SendPropertyChanged("StateID");
                    this.OnStateIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CityID", DbType = "Int")]
        public System.Nullable<int> CityID
        {
            get
            {
                return this._CityID;
            }
            set
            {
                if ((this._CityID != value))
                {
                    this.OnCityIDChanging(value);
                    this.SendPropertyChanging();
                    this._CityID = value;
                    this.SendPropertyChanged("CityID");
                    this.OnCityIDChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_ContactDetail", Storage="_ContactDetails", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<ContactDetail> ContactDetails
		{
			get
			{
				return this._ContactDetails;
			}
			set
			{
				this._ContactDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Address", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactDetails(ContactDetail entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_ContactDetails(ContactDetail entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _PersonnelID;
		
		private int _TitleID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _KnownAs;
		
		private System.DateTime _DateofBith;
		
		private int _CountryBirthID;
		
		private int _ReligionID;
		
		private int _GenderID;
		
		private int _MaritalStatusID;
		
		private string _EmailAddress;
		
		private string _Remarks;
		
		private System.Data.Linq.Binary _ProfileImg;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<EmployeeCitizenship> _EmployeeCitizenships;
		
		private EntitySet<AT_EmailRecipient> _AT_EmailRecipients;
		
		private EntitySet<ChangeControlApprovalMember> _ChangeControlApprovalMembers;
		
		private EntitySet<ProblemAction> _ProblemActions;
		
		private EntitySet<ProjectInformation> _ProjectInformations;
		
		private EntitySet<ManagementRepresentative> _ManagementRepresentatives;
		
		private EntitySet<ReviewAction> _ReviewActions;
		
		private EntitySet<Auditor> _Auditors;
		
		private EntitySet<AuditAction> _AuditActions;
		
		private EntitySet<TrainingCourseSchedule> _TrainingCourseSchedules;
		
		private EntitySet<CourseFeedBack> _CourseFeedBacks;
		
		private EntitySet<ChangeControlNote> _ChangeControlNotes;
		
		private EntitySet<ChangeControlNote> _ChangeControlNotes1;
		
		private EntitySet<ResidencePermit> _ResidencePermits;
		
		private EntitySet<Address> _Addresses;

        private EntitySet<ReviewRecipient> _ReviewRecipients;
		
		private EntitySet<Education> _Educations;
		
		private EntitySet<Dependant> _Dependants;
		
		private EntitySet<TrainingCourseEnrollment> _TrainingCourseEnrollments;
		
		private EntitySet<Contract> _Contracts;
		
		private EntitySet<TrainingCourse> _TrainingCourses;
		
		private EntitySet<Record> _Records;
		
		private EntitySet<Record> _Records1;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<RiskMitigationAction> _RiskMitigationActions;
		
		private EntitySet<SystemUser> _SystemUsers;
		
		private EntitySet<ProblemApprovalMember> _ProblemApprovalMembers;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Problem> _Problems1;
		
		private EntitySet<Problem> _Problems2;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<CostCentre> _CostCentres;
		
		private EntitySet<Asset> _Assets;
		
		private EntitySet<Asset> _Assets1;
		
		private EntityRef<Title> _Title;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Religion> _Religion;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<MaritalStatus> _MaritalStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnPersonnelIDChanging(string value);
    partial void OnPersonnelIDChanged();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnKnownAsChanging(string value);
    partial void OnKnownAsChanged();
    partial void OnDateofBithChanging(System.DateTime value);
    partial void OnDateofBithChanged();
    partial void OnCountryBirthIDChanging(int value);
    partial void OnCountryBirthIDChanged();
    partial void OnReligionIDChanging(int value);
    partial void OnReligionIDChanged();
    partial void OnGenderIDChanging(int value);
    partial void OnGenderIDChanged();
    partial void OnMaritalStatusIDChanging(int value);
    partial void OnMaritalStatusIDChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnProfileImgChanging(System.Data.Linq.Binary value);
    partial void OnProfileImgChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeCitizenships = new EntitySet<EmployeeCitizenship>(new Action<EmployeeCitizenship>(this.attach_EmployeeCitizenships), new Action<EmployeeCitizenship>(this.detach_EmployeeCitizenships));
			this._AT_EmailRecipients = new EntitySet<AT_EmailRecipient>(new Action<AT_EmailRecipient>(this.attach_AT_EmailRecipients), new Action<AT_EmailRecipient>(this.detach_AT_EmailRecipients));
			this._ChangeControlApprovalMembers = new EntitySet<ChangeControlApprovalMember>(new Action<ChangeControlApprovalMember>(this.attach_ChangeControlApprovalMembers), new Action<ChangeControlApprovalMember>(this.detach_ChangeControlApprovalMembers));
			this._ProblemActions = new EntitySet<ProblemAction>(new Action<ProblemAction>(this.attach_ProblemActions), new Action<ProblemAction>(this.detach_ProblemActions));
			this._ProjectInformations = new EntitySet<ProjectInformation>(new Action<ProjectInformation>(this.attach_ProjectInformations), new Action<ProjectInformation>(this.detach_ProjectInformations));
			this._ManagementRepresentatives = new EntitySet<ManagementRepresentative>(new Action<ManagementRepresentative>(this.attach_ManagementRepresentatives), new Action<ManagementRepresentative>(this.detach_ManagementRepresentatives));
			this._ReviewActions = new EntitySet<ReviewAction>(new Action<ReviewAction>(this.attach_ReviewActions), new Action<ReviewAction>(this.detach_ReviewActions));
			this._Auditors = new EntitySet<Auditor>(new Action<Auditor>(this.attach_Auditors), new Action<Auditor>(this.detach_Auditors));
			this._AuditActions = new EntitySet<AuditAction>(new Action<AuditAction>(this.attach_AuditActions), new Action<AuditAction>(this.detach_AuditActions));
			this._TrainingCourseSchedules = new EntitySet<TrainingCourseSchedule>(new Action<TrainingCourseSchedule>(this.attach_TrainingCourseSchedules), new Action<TrainingCourseSchedule>(this.detach_TrainingCourseSchedules));
			this._CourseFeedBacks = new EntitySet<CourseFeedBack>(new Action<CourseFeedBack>(this.attach_CourseFeedBacks), new Action<CourseFeedBack>(this.detach_CourseFeedBacks));
			this._ChangeControlNotes = new EntitySet<ChangeControlNote>(new Action<ChangeControlNote>(this.attach_ChangeControlNotes), new Action<ChangeControlNote>(this.detach_ChangeControlNotes));
			this._ChangeControlNotes1 = new EntitySet<ChangeControlNote>(new Action<ChangeControlNote>(this.attach_ChangeControlNotes1), new Action<ChangeControlNote>(this.detach_ChangeControlNotes1));
			this._ResidencePermits = new EntitySet<ResidencePermit>(new Action<ResidencePermit>(this.attach_ResidencePermits), new Action<ResidencePermit>(this.detach_ResidencePermits));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
            this._ReviewRecipients = new EntitySet<ReviewRecipient>(new Action<ReviewRecipient>(this.attach_ReviewRecipients), new Action<ReviewRecipient>(this.detach_ReviewRecipients));
            this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
			this._Dependants = new EntitySet<Dependant>(new Action<Dependant>(this.attach_Dependants), new Action<Dependant>(this.detach_Dependants));
			this._TrainingCourseEnrollments = new EntitySet<TrainingCourseEnrollment>(new Action<TrainingCourseEnrollment>(this.attach_TrainingCourseEnrollments), new Action<TrainingCourseEnrollment>(this.detach_TrainingCourseEnrollments));
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._TrainingCourses = new EntitySet<TrainingCourse>(new Action<TrainingCourse>(this.attach_TrainingCourses), new Action<TrainingCourse>(this.detach_TrainingCourses));
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			this._Records1 = new EntitySet<Record>(new Action<Record>(this.attach_Records1), new Action<Record>(this.detach_Records1));
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._RiskMitigationActions = new EntitySet<RiskMitigationAction>(new Action<RiskMitigationAction>(this.attach_RiskMitigationActions), new Action<RiskMitigationAction>(this.detach_RiskMitigationActions));
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			this._ProblemApprovalMembers = new EntitySet<ProblemApprovalMember>(new Action<ProblemApprovalMember>(this.attach_ProblemApprovalMembers), new Action<ProblemApprovalMember>(this.detach_ProblemApprovalMembers));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Problems1 = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems1), new Action<Problem>(this.detach_Problems1));
			this._Problems2 = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems2), new Action<Problem>(this.detach_Problems2));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._CostCentres = new EntitySet<CostCentre>(new Action<CostCentre>(this.attach_CostCentres), new Action<CostCentre>(this.detach_CostCentres));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._Assets1 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets1), new Action<Asset>(this.detach_Assets1));
			this._Title = default(EntityRef<Title>);
			this._Country = default(EntityRef<Country>);
			this._Religion = default(EntityRef<Religion>);
			this._Gender = default(EntityRef<Gender>);
			this._MaritalStatus = default(EntityRef<MaritalStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PersonnelID
		{
			get
			{
				return this._PersonnelID;
			}
			set
			{
				if ((this._PersonnelID != value))
				{
					this.OnPersonnelIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelID = value;
					this.SendPropertyChanged("PersonnelID");
					this.OnPersonnelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int NOT NULL")]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnownAs", DbType="NVarChar(100)")]
		public string KnownAs
		{
			get
			{
				return this._KnownAs;
			}
			set
			{
				if ((this._KnownAs != value))
				{
					this.OnKnownAsChanging(value);
					this.SendPropertyChanging();
					this._KnownAs = value;
					this.SendPropertyChanged("KnownAs");
					this.OnKnownAsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofBith", DbType="DateTime NOT NULL")]
		public System.DateTime DateofBith
		{
			get
			{
				return this._DateofBith;
			}
			set
			{
				if ((this._DateofBith != value))
				{
					this.OnDateofBithChanging(value);
					this.SendPropertyChanging();
					this._DateofBith = value;
					this.SendPropertyChanged("DateofBith");
					this.OnDateofBithChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryBirthID", DbType="Int NOT NULL")]
		public int CountryBirthID
		{
			get
			{
				return this._CountryBirthID;
			}
			set
			{
				if ((this._CountryBirthID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryBirthIDChanging(value);
					this.SendPropertyChanging();
					this._CountryBirthID = value;
					this.SendPropertyChanged("CountryBirthID");
					this.OnCountryBirthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReligionID", DbType="Int NOT NULL")]
		public int ReligionID
		{
			get
			{
				return this._ReligionID;
			}
			set
			{
				if ((this._ReligionID != value))
				{
					if (this._Religion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReligionIDChanging(value);
					this.SendPropertyChanging();
					this._ReligionID = value;
					this.SendPropertyChanged("ReligionID");
					this.OnReligionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderID", DbType="Int NOT NULL")]
		public int GenderID
		{
			get
			{
				return this._GenderID;
			}
			set
			{
				if ((this._GenderID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIDChanging(value);
					this.SendPropertyChanging();
					this._GenderID = value;
					this.SendPropertyChanged("GenderID");
					this.OnGenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusID", DbType="Int NOT NULL")]
		public int MaritalStatusID
		{
			get
			{
				return this._MaritalStatusID;
			}
			set
			{
				if ((this._MaritalStatusID != value))
				{
					if (this._MaritalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusID = value;
					this.SendPropertyChanged("MaritalStatusID");
					this.OnMaritalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileImg", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ProfileImg
		{
			get
			{
				return this._ProfileImg;
			}
			set
			{
				if ((this._ProfileImg != value))
				{
					this.OnProfileImgChanging(value);
					this.SendPropertyChanging();
					this._ProfileImg = value;
					this.SendPropertyChanged("ProfileImg");
					this.OnProfileImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeCitizenship", Storage="_EmployeeCitizenships", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeCitizenship> EmployeeCitizenships
		{
			get
			{
				return this._EmployeeCitizenships;
			}
			set
			{
				this._EmployeeCitizenships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AT_EmailRecipient", Storage="_AT_EmailRecipients", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<AT_EmailRecipient> AT_EmailRecipients
		{
			get
			{
				return this._AT_EmailRecipients;
			}
			set
			{
				this._AT_EmailRecipients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChangeControlApprovalMember", Storage="_ChangeControlApprovalMembers", ThisKey="EmployeeID", OtherKey="ApproverID")]
		public EntitySet<ChangeControlApprovalMember> ChangeControlApprovalMembers
		{
			get
			{
				return this._ChangeControlApprovalMembers;
			}
			set
			{
				this._ChangeControlApprovalMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProblemAction", Storage="_ProblemActions", ThisKey="EmployeeID", OtherKey="OwnerID")]
		public EntitySet<ProblemAction> ProblemActions
		{
			get
			{
				return this._ProblemActions;
			}
			set
			{
				this._ProblemActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProjectInformation", Storage="_ProjectInformations", ThisKey="EmployeeID", OtherKey="ProjectLeaderID")]
		public EntitySet<ProjectInformation> ProjectInformations
		{
			get
			{
				return this._ProjectInformations;
			}
			set
			{
				this._ProjectInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ManagementRepresentative", Storage="_ManagementRepresentatives", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<ManagementRepresentative> ManagementRepresentatives
		{
			get
			{
				return this._ManagementRepresentatives;
			}
			set
			{
				this._ManagementRepresentatives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ReviewAction", Storage="_ReviewActions", ThisKey="EmployeeID", OtherKey="ActioneeID")]
		public EntitySet<ReviewAction> ReviewActions
		{
			get
			{
				return this._ReviewActions;
			}
			set
			{
				this._ReviewActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Auditor", Storage="_Auditors", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Auditor> Auditors
		{
			get
			{
				return this._Auditors;
			}
			set
			{
				this._Auditors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AuditAction", Storage="_AuditActions", ThisKey="EmployeeID", OtherKey="ActioneeId")]
		public EntitySet<AuditAction> AuditActions
		{
			get
			{
				return this._AuditActions;
			}
			set
			{
				this._AuditActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TrainingCourseSchedule", Storage="_TrainingCourseSchedules", ThisKey="EmployeeID", OtherKey="InternalInstructorID")]
		public EntitySet<TrainingCourseSchedule> TrainingCourseSchedules
		{
			get
			{
				return this._TrainingCourseSchedules;
			}
			set
			{
				this._TrainingCourseSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CourseFeedBack", Storage="_CourseFeedBacks", ThisKey="EmployeeID", OtherKey="EmployeeId")]
		public EntitySet<CourseFeedBack> CourseFeedBacks
		{
			get
			{
				return this._CourseFeedBacks;
			}
			set
			{
				this._CourseFeedBacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChangeControlNote", Storage="_ChangeControlNotes", ThisKey="EmployeeID", OtherKey="OriginatorID")]
		public EntitySet<ChangeControlNote> ChangeControlNotes
		{
			get
			{
				return this._ChangeControlNotes;
			}
			set
			{
				this._ChangeControlNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChangeControlNote1", Storage="_ChangeControlNotes1", ThisKey="EmployeeID", OtherKey="OwnerID")]
		public EntitySet<ChangeControlNote> ChangeControlNotes1
		{
			get
			{
				return this._ChangeControlNotes1;
			}
			set
			{
				this._ChangeControlNotes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ResidencePermit", Storage="_ResidencePermits", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<ResidencePermit> ResidencePermits
		{
			get
			{
				return this._ResidencePermits;
			}
			set
			{
				this._ResidencePermits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Address", Storage="_Addresses", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Employee_ReviewRecipient", Storage = "_ReviewRecipients", ThisKey = "EmployeeID", OtherKey = "EmployeeID")]
        public EntitySet<ReviewRecipient> ReviewRecipients
        {
            get
            {
                return this._ReviewRecipients;
            }
            set
            {
                this._ReviewRecipients.Assign(value);
            }
        }
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Education", Storage="_Educations", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Dependant", Storage="_Dependants", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Dependant> Dependants
		{
			get
			{
				return this._Dependants;
			}
			set
			{
				this._Dependants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TrainingCourseEnrollment", Storage="_TrainingCourseEnrollments", ThisKey="EmployeeID", OtherKey="EmployeeId")]
		public EntitySet<TrainingCourseEnrollment> TrainingCourseEnrollments
		{
			get
			{
				return this._TrainingCourseEnrollments;
			}
			set
			{
				this._TrainingCourseEnrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Contract", Storage="_Contracts", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TrainingCourse", Storage="_TrainingCourses", ThisKey="EmployeeID", OtherKey="CoordenatorID")]
		public EntitySet<TrainingCourse> TrainingCourses
		{
			get
			{
				return this._TrainingCourses;
			}
			set
			{
				this._TrainingCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Record", Storage="_Records", ThisKey="EmployeeID", OtherKey="OriginatorID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Record1", Storage="_Records1", ThisKey="EmployeeID", OtherKey="OwnerID")]
		public EntitySet<Record> Records1
		{
			get
			{
				return this._Records1;
			}
			set
			{
				this._Records1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Risk", Storage="_Risks", ThisKey="EmployeeID", OtherKey="OwnerID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_RiskMitigationAction", Storage="_RiskMitigationActions", ThisKey="EmployeeID", OtherKey="ActioneeID")]
		public EntitySet<RiskMitigationAction> RiskMitigationActions
		{
			get
			{
				return this._RiskMitigationActions;
			}
			set
			{
				this._RiskMitigationActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SystemUser", Storage="_SystemUsers", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProblemApprovalMember", Storage="_ProblemApprovalMembers", ThisKey="EmployeeID", OtherKey="ApproverID")]
		public EntitySet<ProblemApprovalMember> ProblemApprovalMembers
		{
			get
			{
				return this._ProblemApprovalMembers;
			}
			set
			{
				this._ProblemApprovalMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Problem", Storage="_Problems", ThisKey="EmployeeID", OtherKey="OriginatorID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Problem1", Storage="_Problems1", ThisKey="EmployeeID", OtherKey="OwnerID")]
		public EntitySet<Problem> Problems1
		{
			get
			{
				return this._Problems1;
			}
			set
			{
				this._Problems1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Problem2", Storage="_Problems2", ThisKey="EmployeeID", OtherKey="ExecutiveID")]
		public EntitySet<Problem> Problems2
		{
			get
			{
				return this._Problems2;
			}
			set
			{
				this._Problems2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Task", Storage="_Tasks", ThisKey="EmployeeID", OtherKey="OwnerID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CostCentre", Storage="_CostCentres", ThisKey="EmployeeID", OtherKey="ManagerID")]
		public EntitySet<CostCentre> CostCentres
		{
			get
			{
				return this._CostCentres;
			}
			set
			{
				this._CostCentres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Asset", Storage="_Assets", ThisKey="EmployeeID", OtherKey="AnotherOwnerId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Asset1", Storage="_Assets1", ThisKey="EmployeeID", OtherKey="OwnerId")]
		public EntitySet<Asset> Assets1
		{
			get
			{
				return this._Assets1;
			}
			set
			{
				this._Assets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Employee", Storage="_Title", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Employee", Storage="_Country", ThisKey="CountryBirthID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._CountryBirthID = value.CountryID;
					}
					else
					{
						this._CountryBirthID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Religion_Employee", Storage="_Religion", ThisKey="ReligionID", OtherKey="ReligionID", IsForeignKey=true)]
		public Religion Religion
		{
			get
			{
				return this._Religion.Entity;
			}
			set
			{
				Religion previousValue = this._Religion.Entity;
				if (((previousValue != value) 
							|| (this._Religion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Religion.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Religion.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ReligionID = value.ReligionID;
					}
					else
					{
						this._ReligionID = default(int);
					}
					this.SendPropertyChanged("Religion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Employee", Storage="_Gender", ThisKey="GenderID", OtherKey="GenderID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._GenderID = value.GenderID;
					}
					else
					{
						this._GenderID = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Employee", Storage="_MaritalStatus", ThisKey="MaritalStatusID", OtherKey="MaritalStatusID", IsForeignKey=true)]
		public MaritalStatus MaritalStatus
		{
			get
			{
				return this._MaritalStatus.Entity;
			}
			set
			{
				MaritalStatus previousValue = this._MaritalStatus.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatus.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._MaritalStatus.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._MaritalStatusID = value.MaritalStatusID;
					}
					else
					{
						this._MaritalStatusID = default(int);
					}
					this.SendPropertyChanged("MaritalStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeCitizenships(EmployeeCitizenship entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeCitizenships(EmployeeCitizenship entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_AT_EmailRecipients(AT_EmailRecipient entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AT_EmailRecipients(AT_EmailRecipient entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ChangeControlApprovalMembers(ChangeControlApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ProblemActions(ProblemAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ProblemActions(ProblemAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ProjectInformations(ProjectInformation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ProjectInformations(ProjectInformation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ManagementRepresentatives(ManagementRepresentative entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ManagementRepresentatives(ManagementRepresentative entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ReviewActions(ReviewAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ReviewActions(ReviewAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Auditors(Auditor entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Auditors(Auditor entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_AuditActions(AuditAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AuditActions(AuditAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CourseFeedBacks(CourseFeedBack entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CourseFeedBacks(CourseFeedBack entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ChangeControlNotes(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ChangeControlNotes1(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_ChangeControlNotes1(ChangeControlNote entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_ResidencePermits(ResidencePermit entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ResidencePermits(ResidencePermit entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

        private void attach_ReviewRecipients(ReviewRecipient entity)
        {
            this.SendPropertyChanging();
            entity.Employee = this;
        }

        private void detach_ReviewRecipients(ReviewRecipient entity)
        {
            this.SendPropertyChanging();
            entity.Employee = null;
        }
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_TrainingCourses(TrainingCourse entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Records1(Record entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Records1(Record entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_RiskMitigationActions(RiskMitigationAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_RiskMitigationActions(RiskMitigationAction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Problems1(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Problems1(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Problems2(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Employee2 = this;
		}
		
		private void detach_Problems2(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Employee2 = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CostCentres(CostCentre entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CostCentres(CostCentre entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.ContactDetails")]
	public partial class ContactDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private long _ContactTypeID;
		
		private string _ContactNumber;
		
		private int _AddressID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<PhoneNumberType> _PhoneNumberType;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnContactTypeIDChanging(long value);
    partial void OnContactTypeIDChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ContactDetail()
		{
			this._PhoneNumberType = default(EntityRef<PhoneNumberType>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeID", DbType="BigInt NOT NULL")]
		public long ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					if (this._PhoneNumberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneNumberType_ContactDetail", Storage="_PhoneNumberType", ThisKey="ContactTypeID", OtherKey="PhoneNumberTypeId", IsForeignKey=true)]
		public PhoneNumberType PhoneNumberType
		{
			get
			{
				return this._PhoneNumberType.Entity;
			}
			set
			{
				PhoneNumberType previousValue = this._PhoneNumberType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneNumberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneNumberType.Entity = null;
						previousValue.ContactDetails.Remove(this);
					}
					this._PhoneNumberType.Entity = value;
					if ((value != null))
					{
						value.ContactDetails.Add(this);
						this._ContactTypeID = value.PhoneNumberTypeId;
					}
					else
					{
						this._ContactTypeID = default(long);
					}
					this.SendPropertyChanged("PhoneNumberType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_ContactDetail", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.ContactDetails.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.ContactDetails.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.EducationDegree")]
	public partial class EducationDegree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DegreeID;
		
		private string _DegreeTitle;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Education> _Educations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDegreeIDChanging(int value);
    partial void OnDegreeIDChanged();
    partial void OnDegreeTitleChanging(string value);
    partial void OnDegreeTitleChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public EducationDegree()
		{
			this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DegreeID
		{
			get
			{
				return this._DegreeID;
			}
			set
			{
				if ((this._DegreeID != value))
				{
					this.OnDegreeIDChanging(value);
					this.SendPropertyChanging();
					this._DegreeID = value;
					this.SendPropertyChanged("DegreeID");
					this.OnDegreeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DegreeTitle
		{
			get
			{
				return this._DegreeTitle;
			}
			set
			{
				if ((this._DegreeTitle != value))
				{
					this.OnDegreeTitleChanging(value);
					this.SendPropertyChanging();
					this._DegreeTitle = value;
					this.SendPropertyChanged("DegreeTitle");
					this.OnDegreeTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EducationDegree_Education", Storage="_Educations", ThisKey="DegreeID", OtherKey="DegreeID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.EducationDegree = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.EducationDegree = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.StudyMode")]
	public partial class StudyMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudyModeID;
		
		private string _StudyMode1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Education> _Educations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyModeIDChanging(int value);
    partial void OnStudyModeIDChanged();
    partial void OnStudyMode1Changing(string value);
    partial void OnStudyMode1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public StudyMode()
		{
			this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyModeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudyModeID
		{
			get
			{
				return this._StudyModeID;
			}
			set
			{
				if ((this._StudyModeID != value))
				{
					this.OnStudyModeIDChanging(value);
					this.SendPropertyChanging();
					this._StudyModeID = value;
					this.SendPropertyChanged("StudyModeID");
					this.OnStudyModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudyMode", Storage="_StudyMode1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StudyMode1
		{
			get
			{
				return this._StudyMode1;
			}
			set
			{
				if ((this._StudyMode1 != value))
				{
					this.OnStudyMode1Changing(value);
					this.SendPropertyChanging();
					this._StudyMode1 = value;
					this.SendPropertyChanged("StudyMode1");
					this.OnStudyMode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMode_Education", Storage="_Educations", ThisKey="StudyModeID", OtherKey="StudyModeID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.StudyMode = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.StudyMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.GradeSystem")]
	public partial class GradeSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeID;
		
		private string _Grade;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Education> _Educations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public GradeSystem()
		{
			this._Educations = new EntitySet<Education>(new Action<Education>(this.attach_Educations), new Action<Education>(this.detach_Educations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GradeSystem_Education", Storage="_Educations", ThisKey="GradeID", OtherKey="GradeSystemID")]
		public EntitySet<Education> Educations
		{
			get
			{
				return this._Educations;
			}
			set
			{
				this._Educations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.GradeSystem = this;
		}
		
		private void detach_Educations(Education entity)
		{
			this.SendPropertyChanging();
			entity.GradeSystem = null;
		}
	}

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "ManagementReviews.ReviewRecipients")]
    public partial class ReviewRecipient : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _RecipientID;

        private int _ReviewID;

        private int _EmployeeID;

        private System.DateTime _ModifiedDate;

        private string _ModifiedBy;

        private EntityRef<Employee> _Employee;

        private EntityRef<Review> _Review;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRecipientIDChanging(long value);
        partial void OnRecipientIDChanged();
        partial void OnReviewIDChanging(int value);
        partial void OnReviewIDChanged();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnModifiedDateChanging(System.DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnModifiedByChanging(string value);
        partial void OnModifiedByChanged();
        #endregion

        public ReviewRecipient()
        {
            this._Employee = default(EntityRef<Employee>);
            this._Review = default(EntityRef<Review>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RecipientID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long RecipientID
        {
            get
            {
                return this._RecipientID;
            }
            set
            {
                if ((this._RecipientID != value))
                {
                    this.OnRecipientIDChanging(value);
                    this.SendPropertyChanging();
                    this._RecipientID = value;
                    this.SendPropertyChanged("RecipientID");
                    this.OnRecipientIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ReviewID", DbType = "Int NOT NULL")]
        public int ReviewID
        {
            get
            {
                return this._ReviewID;
            }
            set
            {
                if ((this._ReviewID != value))
                {
                    if (this._Review.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnReviewIDChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewID = value;
                    this.SendPropertyChanged("ReviewID");
                    this.OnReviewIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EmployeeID", DbType = "Int NOT NULL")]
        public int EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if ((this._EmployeeID != value))
                {
                    if (this._Employee.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging();
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedDate", DbType = "DateTime NOT NULL")]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._ModifiedDate;
            }
            set
            {
                if ((this._ModifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedDate = value;
                    this.SendPropertyChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedBy", DbType = "NVarChar(128)")]
        public string ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if ((this._ModifiedBy != value))
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Employee_ReviewRecipient", Storage = "_Employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
        public Employee Employee
        {
            get
            {
                return this._Employee.Entity;
            }
            set
            {
                Employee previousValue = this._Employee.Entity;
                if (((previousValue != value)
                            || (this._Employee.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Employee.Entity = null;
                        previousValue.ReviewRecipients.Remove(this);
                    }
                    this._Employee.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewRecipients.Add(this);
                        this._EmployeeID = value.EmployeeID;
                    }
                    else
                    {
                        this._EmployeeID = default(int);
                    }
                    this.SendPropertyChanged("Employee");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Review_ReviewRecipient", Storage = "_Review", ThisKey = "ReviewID", OtherKey = "ReviewID", IsForeignKey = true)]
        public Review Review
        {
            get
            {
                return this._Review.Entity;
            }
            set
            {
                Review previousValue = this._Review.Entity;
                if (((previousValue != value)
                            || (this._Review.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Review.Entity = null;
                        previousValue.ReviewRecipients.Remove(this);
                    }
                    this._Review.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewRecipients.Add(this);
                        this._ReviewID = value.ReviewID;
                    }
                    else
                    {
                        this._ReviewID = default(int);
                    }
                    this.SendPropertyChanged("Review");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Education")]
	public partial class Education : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EducationID;
		
		private int _DegreeID;
		
		private string _AwardTitle;
		
		private int _StudyModeID;
		
		private string _Institute;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Faculty;
		
		private string _Department;
		
		private System.Nullable<int> _GradeSystemID;
		
		private decimal _GradeScore;
		
		private int _CountryID;
		
		private string _City;
		
		private int _EmployeeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;

        private System.Nullable<int> _StateID;

        private System.Nullable<int> _CityID;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<EducationDegree> _EducationDegree;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<GradeSystem> _GradeSystem;
		
		private EntityRef<StudyMode> _StudyMode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEducationIDChanging(int value);
    partial void OnEducationIDChanged();
    partial void OnDegreeIDChanging(int value);
    partial void OnDegreeIDChanged();
    partial void OnAwardTitleChanging(string value);
    partial void OnAwardTitleChanged();
    partial void OnStudyModeIDChanging(int value);
    partial void OnStudyModeIDChanged();
    partial void OnInstituteChanging(string value);
    partial void OnInstituteChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnFacultyChanging(string value);
    partial void OnFacultyChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnGradeSystemIDChanging(System.Nullable<int> value);
    partial void OnGradeSystemIDChanged();
    partial void OnGradeScoreChanging(decimal value);
    partial void OnGradeScoreChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    #endregion
		
		public Education()
		{
			this._Country = default(EntityRef<Country>);
			this._EducationDegree = default(EntityRef<EducationDegree>);
			this._Employee = default(EntityRef<Employee>);
			this._GradeSystem = default(EntityRef<GradeSystem>);
			this._StudyMode = default(EntityRef<StudyMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EducationID
		{
			get
			{
				return this._EducationID;
			}
			set
			{
				if ((this._EducationID != value))
				{
					this.OnEducationIDChanging(value);
					this.SendPropertyChanging();
					this._EducationID = value;
					this.SendPropertyChanged("EducationID");
					this.OnEducationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeID", DbType="Int NOT NULL")]
		public int DegreeID
		{
			get
			{
				return this._DegreeID;
			}
			set
			{
				if ((this._DegreeID != value))
				{
					if (this._EducationDegree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDegreeIDChanging(value);
					this.SendPropertyChanging();
					this._DegreeID = value;
					this.SendPropertyChanged("DegreeID");
					this.OnDegreeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AwardTitle
		{
			get
			{
				return this._AwardTitle;
			}
			set
			{
				if ((this._AwardTitle != value))
				{
					this.OnAwardTitleChanging(value);
					this.SendPropertyChanging();
					this._AwardTitle = value;
					this.SendPropertyChanged("AwardTitle");
					this.OnAwardTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyModeID", DbType="Int NOT NULL")]
		public int StudyModeID
		{
			get
			{
				return this._StudyModeID;
			}
			set
			{
				if ((this._StudyModeID != value))
				{
					if (this._StudyMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyModeIDChanging(value);
					this.SendPropertyChanging();
					this._StudyModeID = value;
					this.SendPropertyChanged("StudyModeID");
					this.OnStudyModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Institute", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Institute
		{
			get
			{
				return this._Institute;
			}
			set
			{
				if ((this._Institute != value))
				{
					this.OnInstituteChanging(value);
					this.SendPropertyChanging();
					this._Institute = value;
					this.SendPropertyChanged("Institute");
					this.OnInstituteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Faculty", DbType="NVarChar(100)")]
		public string Faculty
		{
			get
			{
				return this._Faculty;
			}
			set
			{
				if ((this._Faculty != value))
				{
					this.OnFacultyChanging(value);
					this.SendPropertyChanging();
					this._Faculty = value;
					this.SendPropertyChanged("Faculty");
					this.OnFacultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(100)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeSystemID", DbType="Int")]
		public System.Nullable<int> GradeSystemID
		{
			get
			{
				return this._GradeSystemID;
			}
			set
			{
				if ((this._GradeSystemID != value))
				{
					if (this._GradeSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeSystemIDChanging(value);
					this.SendPropertyChanging();
					this._GradeSystemID = value;
					this.SendPropertyChanged("GradeSystemID");
					this.OnGradeSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeScore", DbType="Decimal(18,2) NOT NULL")]
		public decimal GradeScore
		{
			get
			{
				return this._GradeScore;
			}
			set
			{
				if ((this._GradeScore != value))
				{
					this.OnGradeScoreChanging(value);
					this.SendPropertyChanging();
					this._GradeScore = value;
					this.SendPropertyChanged("GradeScore");
					this.OnGradeScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(300)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StateID", DbType = "Int")]
        public System.Nullable<int> StateID
        {
            get
            {
                return this._StateID;
            }
            set
            {
                if ((this._StateID != value))
                {
                    this.OnStateIDChanging(value);
                    this.SendPropertyChanging();
                    this._StateID = value;
                    this.SendPropertyChanged("StateID");
                    this.OnStateIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CityID", DbType = "Int")]
        public System.Nullable<int> CityID
        {
            get
            {
                return this._CityID;
            }
            set
            {
                if ((this._CityID != value))
                {
                    this.OnCityIDChanging(value);
                    this.SendPropertyChanging();
                    this._CityID = value;
                    this.SendPropertyChanged("CityID");
                    this.OnCityIDChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Education", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EducationDegree_Education", Storage="_EducationDegree", ThisKey="DegreeID", OtherKey="DegreeID", IsForeignKey=true)]
		public EducationDegree EducationDegree
		{
			get
			{
				return this._EducationDegree.Entity;
			}
			set
			{
				EducationDegree previousValue = this._EducationDegree.Entity;
				if (((previousValue != value) 
							|| (this._EducationDegree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EducationDegree.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._EducationDegree.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._DegreeID = value.DegreeID;
					}
					else
					{
						this._DegreeID = default(int);
					}
					this.SendPropertyChanged("EducationDegree");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Education", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GradeSystem_Education", Storage="_GradeSystem", ThisKey="GradeSystemID", OtherKey="GradeID", IsForeignKey=true)]
		public GradeSystem GradeSystem
		{
			get
			{
				return this._GradeSystem.Entity;
			}
			set
			{
				GradeSystem previousValue = this._GradeSystem.Entity;
				if (((previousValue != value) 
							|| (this._GradeSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GradeSystem.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._GradeSystem.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._GradeSystemID = value.GradeID;
					}
					else
					{
						this._GradeSystemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GradeSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMode_Education", Storage="_StudyMode", ThisKey="StudyModeID", OtherKey="StudyModeID", IsForeignKey=true)]
		public StudyMode StudyMode
		{
			get
			{
				return this._StudyMode.Entity;
			}
			set
			{
				StudyMode previousValue = this._StudyMode.Entity;
				if (((previousValue != value) 
							|| (this._StudyMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMode.Entity = null;
						previousValue.Educations.Remove(this);
					}
					this._StudyMode.Entity = value;
					if ((value != null))
					{
						value.Educations.Add(this);
						this._StudyModeID = value.StudyModeID;
					}
					else
					{
						this._StudyModeID = default(int);
					}
					this.SendPropertyChanged("StudyMode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Dependants")]
	public partial class Dependant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DependantID;
		
		private int _TitleID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private int _RelationID;
		
		private System.DateTime _DateofBirth;
		
		private int _EmployeeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Title> _Title;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<DependantRelation> _DependantRelation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDependantIDChanging(int value);
    partial void OnDependantIDChanged();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnRelationIDChanging(int value);
    partial void OnRelationIDChanged();
    partial void OnDateofBirthChanging(System.DateTime value);
    partial void OnDateofBirthChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Dependant()
		{
			this._Title = default(EntityRef<Title>);
			this._Employee = default(EntityRef<Employee>);
			this._DependantRelation = default(EntityRef<DependantRelation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependantID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DependantID
		{
			get
			{
				return this._DependantID;
			}
			set
			{
				if ((this._DependantID != value))
				{
					this.OnDependantIDChanging(value);
					this.SendPropertyChanging();
					this._DependantID = value;
					this.SendPropertyChanged("DependantID");
					this.OnDependantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int NOT NULL")]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", DbType="Int NOT NULL")]
		public int RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					if (this._DependantRelation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateofBirth
		{
			get
			{
				return this._DateofBirth;
			}
			set
			{
				if ((this._DateofBirth != value))
				{
					this.OnDateofBirthChanging(value);
					this.SendPropertyChanging();
					this._DateofBirth = value;
					this.SendPropertyChanged("DateofBirth");
					this.OnDateofBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Title_Dependant", Storage="_Title", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Dependants.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Dependants.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Dependant", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Dependants.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Dependants.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DependantRelation_Dependant", Storage="_DependantRelation", ThisKey="RelationID", OtherKey="RelationID", IsForeignKey=true)]
		public DependantRelation DependantRelation
		{
			get
			{
				return this._DependantRelation.Entity;
			}
			set
			{
				DependantRelation previousValue = this._DependantRelation.Entity;
				if (((previousValue != value) 
							|| (this._DependantRelation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DependantRelation.Entity = null;
						previousValue.Dependants.Remove(this);
					}
					this._DependantRelation.Entity = value;
					if ((value != null))
					{
						value.Dependants.Add(this);
						this._RelationID = value.RelationID;
					}
					else
					{
						this._RelationID = default(int);
					}
					this.SendPropertyChanged("DependantRelation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.DependantRelation")]
	public partial class DependantRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationID;
		
		private string _DependantRelation1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Dependant> _Dependants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIDChanging(int value);
    partial void OnRelationIDChanged();
    partial void OnDependantRelation1Changing(string value);
    partial void OnDependantRelation1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public DependantRelation()
		{
			this._Dependants = new EntitySet<Dependant>(new Action<Dependant>(this.attach_Dependants), new Action<Dependant>(this.detach_Dependants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="DependantRelation", Storage="_DependantRelation1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DependantRelation1
		{
			get
			{
				return this._DependantRelation1;
			}
			set
			{
				if ((this._DependantRelation1 != value))
				{
					this.OnDependantRelation1Changing(value);
					this.SendPropertyChanging();
					this._DependantRelation1 = value;
					this.SendPropertyChanged("DependantRelation1");
					this.OnDependantRelation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DependantRelation_Dependant", Storage="_Dependants", ThisKey="RelationID", OtherKey="RelationID")]
		public EntitySet<Dependant> Dependants
		{
			get
			{
				return this._Dependants;
			}
			set
			{
				this._Dependants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.DependantRelation = this;
		}
		
		private void detach_Dependants(Dependant entity)
		{
			this.SendPropertyChanging();
			entity.DependantRelation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.TrainingCourseEnrollment")]
	public partial class TrainingCourseEnrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TrainingCourseId;
		
		private int _EmployeeId;
		
		private int _AttendanceStatusID;
		
		private bool _IsVegetarian;
		
		private bool _IsVegan;
		
		private bool _OtherNeeds;
		
		private bool _SpecialNeeds;
		
		private string _OtherNeedNotes;
		
		private string _SpecialNeedNotes;
		
		private long _EnrollerLevelId;
		
		private bool _HasProvidedFeedback;
		
		private System.Nullable<int> _ApprovalStatusID;
		
		private string _ApprovalJustification;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ApprovalStatus> _ApprovalStatus;
		
		private EntityRef<CourseAttendanceStatus> _CourseAttendanceStatus;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<EnrollerLevel> _EnrollerLevel;
		
		private EntityRef<TrainingCourse> _TrainingCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingCourseIdChanging(long value);
    partial void OnTrainingCourseIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnAttendanceStatusIDChanging(int value);
    partial void OnAttendanceStatusIDChanged();
    partial void OnIsVegetarianChanging(bool value);
    partial void OnIsVegetarianChanged();
    partial void OnIsVeganChanging(bool value);
    partial void OnIsVeganChanged();
    partial void OnOtherNeedsChanging(bool value);
    partial void OnOtherNeedsChanged();
    partial void OnSpecialNeedsChanging(bool value);
    partial void OnSpecialNeedsChanged();
    partial void OnOtherNeedNotesChanging(string value);
    partial void OnOtherNeedNotesChanged();
    partial void OnSpecialNeedNotesChanging(string value);
    partial void OnSpecialNeedNotesChanged();
    partial void OnEnrollerLevelIdChanging(long value);
    partial void OnEnrollerLevelIdChanged();
    partial void OnHasProvidedFeedbackChanging(bool value);
    partial void OnHasProvidedFeedbackChanged();
    partial void OnApprovalStatusIDChanging(System.Nullable<int> value);
    partial void OnApprovalStatusIDChanged();
    partial void OnApprovalJustificationChanging(string value);
    partial void OnApprovalJustificationChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public TrainingCourseEnrollment()
		{
			this._ApprovalStatus = default(EntityRef<ApprovalStatus>);
			this._CourseAttendanceStatus = default(EntityRef<CourseAttendanceStatus>);
			this._Employee = default(EntityRef<Employee>);
			this._EnrollerLevel = default(EntityRef<EnrollerLevel>);
			this._TrainingCourse = default(EntityRef<TrainingCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TrainingCourseId
		{
			get
			{
				return this._TrainingCourseId;
			}
			set
			{
				if ((this._TrainingCourseId != value))
				{
					if (this._TrainingCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingCourseIdChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseId = value;
					this.SendPropertyChanged("TrainingCourseId");
					this.OnTrainingCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceStatusID", DbType="Int NOT NULL")]
		public int AttendanceStatusID
		{
			get
			{
				return this._AttendanceStatusID;
			}
			set
			{
				if ((this._AttendanceStatusID != value))
				{
					if (this._CourseAttendanceStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendanceStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceStatusID = value;
					this.SendPropertyChanged("AttendanceStatusID");
					this.OnAttendanceStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVegetarian", DbType="Bit NOT NULL")]
		public bool IsVegetarian
		{
			get
			{
				return this._IsVegetarian;
			}
			set
			{
				if ((this._IsVegetarian != value))
				{
					this.OnIsVegetarianChanging(value);
					this.SendPropertyChanging();
					this._IsVegetarian = value;
					this.SendPropertyChanged("IsVegetarian");
					this.OnIsVegetarianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVegan", DbType="Bit NOT NULL")]
		public bool IsVegan
		{
			get
			{
				return this._IsVegan;
			}
			set
			{
				if ((this._IsVegan != value))
				{
					this.OnIsVeganChanging(value);
					this.SendPropertyChanging();
					this._IsVegan = value;
					this.SendPropertyChanged("IsVegan");
					this.OnIsVeganChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherNeeds", DbType="Bit NOT NULL")]
		public bool OtherNeeds
		{
			get
			{
				return this._OtherNeeds;
			}
			set
			{
				if ((this._OtherNeeds != value))
				{
					this.OnOtherNeedsChanging(value);
					this.SendPropertyChanging();
					this._OtherNeeds = value;
					this.SendPropertyChanged("OtherNeeds");
					this.OnOtherNeedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialNeeds", DbType="Bit NOT NULL")]
		public bool SpecialNeeds
		{
			get
			{
				return this._SpecialNeeds;
			}
			set
			{
				if ((this._SpecialNeeds != value))
				{
					this.OnSpecialNeedsChanging(value);
					this.SendPropertyChanging();
					this._SpecialNeeds = value;
					this.SendPropertyChanged("SpecialNeeds");
					this.OnSpecialNeedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherNeedNotes", DbType="NVarChar(MAX)")]
		public string OtherNeedNotes
		{
			get
			{
				return this._OtherNeedNotes;
			}
			set
			{
				if ((this._OtherNeedNotes != value))
				{
					this.OnOtherNeedNotesChanging(value);
					this.SendPropertyChanging();
					this._OtherNeedNotes = value;
					this.SendPropertyChanged("OtherNeedNotes");
					this.OnOtherNeedNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialNeedNotes", DbType="NVarChar(MAX)")]
		public string SpecialNeedNotes
		{
			get
			{
				return this._SpecialNeedNotes;
			}
			set
			{
				if ((this._SpecialNeedNotes != value))
				{
					this.OnSpecialNeedNotesChanging(value);
					this.SendPropertyChanging();
					this._SpecialNeedNotes = value;
					this.SendPropertyChanged("SpecialNeedNotes");
					this.OnSpecialNeedNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollerLevelId", DbType="BigInt NOT NULL")]
		public long EnrollerLevelId
		{
			get
			{
				return this._EnrollerLevelId;
			}
			set
			{
				if ((this._EnrollerLevelId != value))
				{
					if (this._EnrollerLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollerLevelIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollerLevelId = value;
					this.SendPropertyChanged("EnrollerLevelId");
					this.OnEnrollerLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasProvidedFeedback", DbType="Bit NOT NULL")]
		public bool HasProvidedFeedback
		{
			get
			{
				return this._HasProvidedFeedback;
			}
			set
			{
				if ((this._HasProvidedFeedback != value))
				{
					this.OnHasProvidedFeedbackChanging(value);
					this.SendPropertyChanging();
					this._HasProvidedFeedback = value;
					this.SendPropertyChanged("HasProvidedFeedback");
					this.OnHasProvidedFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatusID", DbType="Int")]
		public System.Nullable<int> ApprovalStatusID
		{
			get
			{
				return this._ApprovalStatusID;
			}
			set
			{
				if ((this._ApprovalStatusID != value))
				{
					if (this._ApprovalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatusID = value;
					this.SendPropertyChanged("ApprovalStatusID");
					this.OnApprovalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalJustification", DbType="NVarChar(MAX)")]
		public string ApprovalJustification
		{
			get
			{
				return this._ApprovalJustification;
			}
			set
			{
				if ((this._ApprovalJustification != value))
				{
					this.OnApprovalJustificationChanging(value);
					this.SendPropertyChanging();
					this._ApprovalJustification = value;
					this.SendPropertyChanged("ApprovalJustification");
					this.OnApprovalJustificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalStatus_TrainingCourseEnrollment", Storage="_ApprovalStatus", ThisKey="ApprovalStatusID", OtherKey="ApprovalStatusID", IsForeignKey=true)]
		public ApprovalStatus ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus.Entity;
			}
			set
			{
				ApprovalStatus previousValue = this._ApprovalStatus.Entity;
				if (((previousValue != value) 
							|| (this._ApprovalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovalStatus.Entity = null;
						previousValue.TrainingCourseEnrollments.Remove(this);
					}
					this._ApprovalStatus.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseEnrollments.Add(this);
						this._ApprovalStatusID = value.ApprovalStatusID;
					}
					else
					{
						this._ApprovalStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ApprovalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseAttendanceStatus_TrainingCourseEnrollment", Storage="_CourseAttendanceStatus", ThisKey="AttendanceStatusID", OtherKey="CourseAttendanceStatusID", IsForeignKey=true)]
		public CourseAttendanceStatus CourseAttendanceStatus
		{
			get
			{
				return this._CourseAttendanceStatus.Entity;
			}
			set
			{
				CourseAttendanceStatus previousValue = this._CourseAttendanceStatus.Entity;
				if (((previousValue != value) 
							|| (this._CourseAttendanceStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseAttendanceStatus.Entity = null;
						previousValue.TrainingCourseEnrollments.Remove(this);
					}
					this._CourseAttendanceStatus.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseEnrollments.Add(this);
						this._AttendanceStatusID = value.CourseAttendanceStatusID;
					}
					else
					{
						this._AttendanceStatusID = default(int);
					}
					this.SendPropertyChanged("CourseAttendanceStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TrainingCourseEnrollment", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TrainingCourseEnrollments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseEnrollments.Add(this);
						this._EmployeeId = value.EmployeeID;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnrollerLevel_TrainingCourseEnrollment", Storage="_EnrollerLevel", ThisKey="EnrollerLevelId", OtherKey="EnrollerLevelId", IsForeignKey=true)]
		public EnrollerLevel EnrollerLevel
		{
			get
			{
				return this._EnrollerLevel.Entity;
			}
			set
			{
				EnrollerLevel previousValue = this._EnrollerLevel.Entity;
				if (((previousValue != value) 
							|| (this._EnrollerLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnrollerLevel.Entity = null;
						previousValue.TrainingCourseEnrollments.Remove(this);
					}
					this._EnrollerLevel.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseEnrollments.Add(this);
						this._EnrollerLevelId = value.EnrollerLevelId;
					}
					else
					{
						this._EnrollerLevelId = default(long);
					}
					this.SendPropertyChanged("EnrollerLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseEnrollment", Storage="_TrainingCourse", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingCourse TrainingCourse
		{
			get
			{
				return this._TrainingCourse.Entity;
			}
			set
			{
				TrainingCourse previousValue = this._TrainingCourse.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourse.Entity = null;
						previousValue.TrainingCourseEnrollments.Remove(this);
					}
					this._TrainingCourse.Entity = value;
					if ((value != null))
					{
						value.TrainingCourseEnrollments.Add(this);
						this._TrainingCourseId = value.TrainingCourseId;
					}
					else
					{
						this._TrainingCourseId = default(long);
					}
					this.SendPropertyChanged("TrainingCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HumanResources.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private string _ContractNo;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.Nullable<int> _GroupID;
		
		private int _ContractTypeID;
		
		private System.Nullable<System.DateTime> _TerminationDate;
		
		private string _ReasonForTermination;
		
		private System.Nullable<System.DateTime> _ExtendedToDate;
		
		private int _ContractStatusID;
		
		private string _Remarks;
		
		private int _EmployeeID;
		
		private bool _ActiveFlag;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<OrganizationAssignment> _OrganizationAssignments;
		
		private EntitySet<ContractExtension> _ContractExtensions;
		
		private EntityRef<ContractGroup> _ContractGroup;
		
		private EntityRef<ContractType> _ContractType;
		
		private EntityRef<ContractStatus> _ContractStatus;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnContractTypeIDChanging(int value);
    partial void OnContractTypeIDChanged();
    partial void OnTerminationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTerminationDateChanged();
    partial void OnReasonForTerminationChanging(string value);
    partial void OnReasonForTerminationChanged();
    partial void OnExtendedToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExtendedToDateChanged();
    partial void OnContractStatusIDChanging(int value);
    partial void OnContractStatusIDChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Contract()
		{
			this._OrganizationAssignments = new EntitySet<OrganizationAssignment>(new Action<OrganizationAssignment>(this.attach_OrganizationAssignments), new Action<OrganizationAssignment>(this.detach_OrganizationAssignments));
			this._ContractExtensions = new EntitySet<ContractExtension>(new Action<ContractExtension>(this.attach_ContractExtensions), new Action<ContractExtension>(this.detach_ContractExtensions));
			this._ContractGroup = default(EntityRef<ContractGroup>);
			this._ContractType = default(EntityRef<ContractType>);
			this._ContractStatus = default(EntityRef<ContractStatus>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._ContractGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractTypeID", DbType="Int NOT NULL")]
		public int ContractTypeID
		{
			get
			{
				return this._ContractTypeID;
			}
			set
			{
				if ((this._ContractTypeID != value))
				{
					if (this._ContractType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContractTypeID = value;
					this.SendPropertyChanged("ContractTypeID");
					this.OnContractTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerminationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TerminationDate
		{
			get
			{
				return this._TerminationDate;
			}
			set
			{
				if ((this._TerminationDate != value))
				{
					this.OnTerminationDateChanging(value);
					this.SendPropertyChanging();
					this._TerminationDate = value;
					this.SendPropertyChanged("TerminationDate");
					this.OnTerminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonForTermination", DbType="NVarChar(MAX)")]
		public string ReasonForTermination
		{
			get
			{
				return this._ReasonForTermination;
			}
			set
			{
				if ((this._ReasonForTermination != value))
				{
					this.OnReasonForTerminationChanging(value);
					this.SendPropertyChanging();
					this._ReasonForTermination = value;
					this.SendPropertyChanged("ReasonForTermination");
					this.OnReasonForTerminationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtendedToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExtendedToDate
		{
			get
			{
				return this._ExtendedToDate;
			}
			set
			{
				if ((this._ExtendedToDate != value))
				{
					this.OnExtendedToDateChanging(value);
					this.SendPropertyChanging();
					this._ExtendedToDate = value;
					this.SendPropertyChanged("ExtendedToDate");
					this.OnExtendedToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractStatusID", DbType="Int NOT NULL")]
		public int ContractStatusID
		{
			get
			{
				return this._ContractStatusID;
			}
			set
			{
				if ((this._ContractStatusID != value))
				{
					if (this._ContractStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ContractStatusID = value;
					this.SendPropertyChanged("ContractStatusID");
					this.OnContractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_OrganizationAssignment", Storage="_OrganizationAssignments", ThisKey="ContractID", OtherKey="ContractID")]
		public EntitySet<OrganizationAssignment> OrganizationAssignments
		{
			get
			{
				return this._OrganizationAssignments;
			}
			set
			{
				this._OrganizationAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_ContractExtension", Storage="_ContractExtensions", ThisKey="ContractID", OtherKey="ContractID")]
		public EntitySet<ContractExtension> ContractExtensions
		{
			get
			{
				return this._ContractExtensions;
			}
			set
			{
				this._ContractExtensions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractGroup_Contract", Storage="_ContractGroup", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true, DeleteRule="SET NULL")]
		public ContractGroup ContractGroup
		{
			get
			{
				return this._ContractGroup.Entity;
			}
			set
			{
				ContractGroup previousValue = this._ContractGroup.Entity;
				if (((previousValue != value) 
							|| (this._ContractGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractGroup.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._ContractGroup.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContractGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractType_Contract", Storage="_ContractType", ThisKey="ContractTypeID", OtherKey="ContractTypeID", IsForeignKey=true)]
		public ContractType ContractType
		{
			get
			{
				return this._ContractType.Entity;
			}
			set
			{
				ContractType previousValue = this._ContractType.Entity;
				if (((previousValue != value) 
							|| (this._ContractType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractType.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._ContractType.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._ContractTypeID = value.ContractTypeID;
					}
					else
					{
						this._ContractTypeID = default(int);
					}
					this.SendPropertyChanged("ContractType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractStatus_Contract", Storage="_ContractStatus", ThisKey="ContractStatusID", OtherKey="ContractStatusID", IsForeignKey=true)]
		public ContractStatus ContractStatus
		{
			get
			{
				return this._ContractStatus.Entity;
			}
			set
			{
				ContractStatus previousValue = this._ContractStatus.Entity;
				if (((previousValue != value) 
							|| (this._ContractStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractStatus.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._ContractStatus.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._ContractStatusID = value.ContractStatusID;
					}
					else
					{
						this._ContractStatusID = default(int);
					}
					this.SendPropertyChanged("ContractStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Contract", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationAssignments(OrganizationAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_OrganizationAssignments(OrganizationAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractExtensions(ContractExtension entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractExtensions(ContractExtension entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.ProblemType")]
	public partial class ProblemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemTypeID;
		
		private string _ProblemType1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemTypeIDChanging(int value);
    partial void OnProblemTypeIDChanged();
    partial void OnProblemType1Changing(string value);
    partial void OnProblemType1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProblemType()
		{
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemTypeID
		{
			get
			{
				return this._ProblemTypeID;
			}
			set
			{
				if ((this._ProblemTypeID != value))
				{
					this.OnProblemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemTypeID = value;
					this.SendPropertyChanged("ProblemTypeID");
					this.OnProblemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProblemType", Storage="_ProblemType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProblemType1
		{
			get
			{
				return this._ProblemType1;
			}
			set
			{
				if ((this._ProblemType1 != value))
				{
					this.OnProblemType1Changing(value);
					this.SendPropertyChanging();
					this._ProblemType1 = value;
					this.SendPropertyChanged("ProblemType1");
					this.OnProblemType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProblemType_Problem", Storage="_Problems", ThisKey="ProblemTypeID", OtherKey="ProblemTypeID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.ProblemType = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.ProblemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AT_RAGSigns")]
	public partial class AT_RAGSign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SignID;
		
		private string _Sign;
		
		private bool _IsComparator;
		
		private bool _IsLinkOperator;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RAGLinkedAction> _RAGLinkedActions;
		
		private EntitySet<RiskScoreCriteria> _RiskScoreCriterias;
		
		private EntitySet<RiskRatingCriteria> _RiskRatingCriterias;
		
		private EntitySet<Risk> _Risks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSignIDChanging(long value);
    partial void OnSignIDChanged();
    partial void OnSignChanging(string value);
    partial void OnSignChanged();
    partial void OnIsComparatorChanging(bool value);
    partial void OnIsComparatorChanged();
    partial void OnIsLinkOperatorChanging(bool value);
    partial void OnIsLinkOperatorChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AT_RAGSign()
		{
			this._RAGLinkedActions = new EntitySet<RAGLinkedAction>(new Action<RAGLinkedAction>(this.attach_RAGLinkedActions), new Action<RAGLinkedAction>(this.detach_RAGLinkedActions));
			this._RiskScoreCriterias = new EntitySet<RiskScoreCriteria>(new Action<RiskScoreCriteria>(this.attach_RiskScoreCriterias), new Action<RiskScoreCriteria>(this.detach_RiskScoreCriterias));
			this._RiskRatingCriterias = new EntitySet<RiskRatingCriteria>(new Action<RiskRatingCriteria>(this.attach_RiskRatingCriterias), new Action<RiskRatingCriteria>(this.detach_RiskRatingCriterias));
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SignID
		{
			get
			{
				return this._SignID;
			}
			set
			{
				if ((this._SignID != value))
				{
					this.OnSignIDChanging(value);
					this.SendPropertyChanging();
					this._SignID = value;
					this.SendPropertyChanged("SignID");
					this.OnSignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sign", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Sign
		{
			get
			{
				return this._Sign;
			}
			set
			{
				if ((this._Sign != value))
				{
					this.OnSignChanging(value);
					this.SendPropertyChanging();
					this._Sign = value;
					this.SendPropertyChanged("Sign");
					this.OnSignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComparator", DbType="Bit NOT NULL")]
		public bool IsComparator
		{
			get
			{
				return this._IsComparator;
			}
			set
			{
				if ((this._IsComparator != value))
				{
					this.OnIsComparatorChanging(value);
					this.SendPropertyChanging();
					this._IsComparator = value;
					this.SendPropertyChanged("IsComparator");
					this.OnIsComparatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLinkOperator", DbType="Bit NOT NULL")]
		public bool IsLinkOperator
		{
			get
			{
				return this._IsLinkOperator;
			}
			set
			{
				if ((this._IsLinkOperator != value))
				{
					this.OnIsLinkOperatorChanging(value);
					this.SendPropertyChanging();
					this._IsLinkOperator = value;
					this.SendPropertyChanged("IsLinkOperator");
					this.OnIsLinkOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_RAGLinkedAction", Storage="_RAGLinkedActions", ThisKey="SignID", OtherKey="LinkOperatorID")]
		public EntitySet<RAGLinkedAction> RAGLinkedActions
		{
			get
			{
				return this._RAGLinkedActions;
			}
			set
			{
				this._RAGLinkedActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_RiskScoreCriteria", Storage="_RiskScoreCriterias", ThisKey="SignID", OtherKey="ComparatorID")]
		public EntitySet<RiskScoreCriteria> RiskScoreCriterias
		{
			get
			{
				return this._RiskScoreCriterias;
			}
			set
			{
				this._RiskScoreCriterias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_RiskRatingCriteria", Storage="_RiskRatingCriterias", ThisKey="SignID", OtherKey="ComparatorID")]
		public EntitySet<RiskRatingCriteria> RiskRatingCriterias
		{
			get
			{
				return this._RiskRatingCriterias;
			}
			set
			{
				this._RiskRatingCriterias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_Risk", Storage="_Risks", ThisKey="SignID", OtherKey="CiticalLimitSignID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RAGLinkedActions(RAGLinkedAction entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = this;
		}
		
		private void detach_RAGLinkedActions(RAGLinkedAction entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = null;
		}
		
		private void attach_RiskScoreCriterias(RiskScoreCriteria entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = this;
		}
		
		private void detach_RiskScoreCriterias(RiskScoreCriteria entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = null;
		}
		
		private void attach_RiskRatingCriterias(RiskRatingCriteria entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = this;
		}
		
		private void detach_RiskRatingCriterias(RiskRatingCriteria entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = null;
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.AT_RAGSign = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RAGLinkedAction")]
	public partial class RAGLinkedAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkedActionID;
		
		private long _LinkOperatorID;
		
		private int _RAGConditionID;
		
		private string _SQLStatement;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<AT_RAGSign> _AT_RAGSign;
		
		private EntityRef<RAGCondition> _RAGCondition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkedActionIDChanging(int value);
    partial void OnLinkedActionIDChanged();
    partial void OnLinkOperatorIDChanging(long value);
    partial void OnLinkOperatorIDChanged();
    partial void OnRAGConditionIDChanging(int value);
    partial void OnRAGConditionIDChanged();
    partial void OnSQLStatementChanging(string value);
    partial void OnSQLStatementChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RAGLinkedAction()
		{
			this._AT_RAGSign = default(EntityRef<AT_RAGSign>);
			this._RAGCondition = default(EntityRef<RAGCondition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkedActionID
		{
			get
			{
				return this._LinkedActionID;
			}
			set
			{
				if ((this._LinkedActionID != value))
				{
					this.OnLinkedActionIDChanging(value);
					this.SendPropertyChanging();
					this._LinkedActionID = value;
					this.SendPropertyChanged("LinkedActionID");
					this.OnLinkedActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkOperatorID", DbType="BigInt NOT NULL")]
		public long LinkOperatorID
		{
			get
			{
				return this._LinkOperatorID;
			}
			set
			{
				if ((this._LinkOperatorID != value))
				{
					if (this._AT_RAGSign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkOperatorIDChanging(value);
					this.SendPropertyChanging();
					this._LinkOperatorID = value;
					this.SendPropertyChanged("LinkOperatorID");
					this.OnLinkOperatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAGConditionID", DbType="Int NOT NULL")]
		public int RAGConditionID
		{
			get
			{
				return this._RAGConditionID;
			}
			set
			{
				if ((this._RAGConditionID != value))
				{
					if (this._RAGCondition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRAGConditionIDChanging(value);
					this.SendPropertyChanging();
					this._RAGConditionID = value;
					this.SendPropertyChanged("RAGConditionID");
					this.OnRAGConditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLStatement", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string SQLStatement
		{
			get
			{
				return this._SQLStatement;
			}
			set
			{
				if ((this._SQLStatement != value))
				{
					this.OnSQLStatementChanging(value);
					this.SendPropertyChanging();
					this._SQLStatement = value;
					this.SendPropertyChanged("SQLStatement");
					this.OnSQLStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_RAGLinkedAction", Storage="_AT_RAGSign", ThisKey="LinkOperatorID", OtherKey="SignID", IsForeignKey=true)]
		public AT_RAGSign AT_RAGSign
		{
			get
			{
				return this._AT_RAGSign.Entity;
			}
			set
			{
				AT_RAGSign previousValue = this._AT_RAGSign.Entity;
				if (((previousValue != value) 
							|| (this._AT_RAGSign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_RAGSign.Entity = null;
						previousValue.RAGLinkedActions.Remove(this);
					}
					this._AT_RAGSign.Entity = value;
					if ((value != null))
					{
						value.RAGLinkedActions.Add(this);
						this._LinkOperatorID = value.SignID;
					}
					else
					{
						this._LinkOperatorID = default(long);
					}
					this.SendPropertyChanged("AT_RAGSign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RAGCondition_RAGLinkedAction", Storage="_RAGCondition", ThisKey="RAGConditionID", OtherKey="RAGConditionID", IsForeignKey=true)]
		public RAGCondition RAGCondition
		{
			get
			{
				return this._RAGCondition.Entity;
			}
			set
			{
				RAGCondition previousValue = this._RAGCondition.Entity;
				if (((previousValue != value) 
							|| (this._RAGCondition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RAGCondition.Entity = null;
						previousValue.RAGLinkedActions.Remove(this);
					}
					this._RAGCondition.Entity = value;
					if ((value != null))
					{
						value.RAGLinkedActions.Add(this);
						this._RAGConditionID = value.RAGConditionID;
					}
					else
					{
						this._RAGConditionID = default(int);
					}
					this.SendPropertyChanged("RAGCondition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskFormulaParameters")]
	public partial class RiskFormulaParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParameterID;
		
		private int _RiskTypeID;
		
		private string _ParameterText;
		
		private string _ParameterValue;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<RiskType> _RiskType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterIDChanging(int value);
    partial void OnParameterIDChanged();
    partial void OnRiskTypeIDChanging(int value);
    partial void OnRiskTypeIDChanged();
    partial void OnParameterTextChanging(string value);
    partial void OnParameterTextChanged();
    partial void OnParameterValueChanging(string value);
    partial void OnParameterValueChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskFormulaParameter()
		{
			this._RiskType = default(EntityRef<RiskType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RiskTypeID
		{
			get
			{
				return this._RiskTypeID;
			}
			set
			{
				if ((this._RiskTypeID != value))
				{
					if (this._RiskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskTypeID = value;
					this.SendPropertyChanged("RiskTypeID");
					this.OnRiskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterText", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterText
		{
			get
			{
				return this._ParameterText;
			}
			set
			{
				if ((this._ParameterText != value))
				{
					this.OnParameterTextChanging(value);
					this.SendPropertyChanging();
					this._ParameterText = value;
					this.SendPropertyChanged("ParameterText");
					this.OnParameterTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterValue", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterValue
		{
			get
			{
				return this._ParameterValue;
			}
			set
			{
				if ((this._ParameterValue != value))
				{
					this.OnParameterValueChanging(value);
					this.SendPropertyChanging();
					this._ParameterValue = value;
					this.SendPropertyChanged("ParameterValue");
					this.OnParameterValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskFormulaParameter", Storage="_RiskType", ThisKey="RiskTypeID", OtherKey="RiskTypeID", IsForeignKey=true)]
		public RiskType RiskType
		{
			get
			{
				return this._RiskType.Entity;
			}
			set
			{
				RiskType previousValue = this._RiskType.Entity;
				if (((previousValue != value) 
							|| (this._RiskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskType.Entity = null;
						previousValue.RiskFormulaParameters.Remove(this);
					}
					this._RiskType.Entity = value;
					if ((value != null))
					{
						value.RiskFormulaParameters.Add(this);
						this._RiskTypeID = value.RiskTypeID;
					}
					else
					{
						this._RiskTypeID = default(int);
					}
					this.SendPropertyChanged("RiskType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskFormulas")]
	public partial class RiskFormula : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormulaID;
		
		private int _RiskTypeID;
		
		private string _Formula;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<RiskType> _RiskType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormulaIDChanging(int value);
    partial void OnFormulaIDChanged();
    partial void OnRiskTypeIDChanging(int value);
    partial void OnRiskTypeIDChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskFormula()
		{
			this._RiskType = default(EntityRef<RiskType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormulaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormulaID
		{
			get
			{
				return this._FormulaID;
			}
			set
			{
				if ((this._FormulaID != value))
				{
					this.OnFormulaIDChanging(value);
					this.SendPropertyChanging();
					this._FormulaID = value;
					this.SendPropertyChanged("FormulaID");
					this.OnFormulaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RiskTypeID
		{
			get
			{
				return this._RiskTypeID;
			}
			set
			{
				if ((this._RiskTypeID != value))
				{
					if (this._RiskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskTypeID = value;
					this.SendPropertyChanged("RiskTypeID");
					this.OnRiskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskFormula", Storage="_RiskType", ThisKey="RiskTypeID", OtherKey="RiskTypeID", IsForeignKey=true)]
		public RiskType RiskType
		{
			get
			{
				return this._RiskType.Entity;
			}
			set
			{
				RiskType previousValue = this._RiskType.Entity;
				if (((previousValue != value) 
							|| (this._RiskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskType.Entity = null;
						previousValue.RiskFormulas.Remove(this);
					}
					this._RiskType.Entity = value;
					if ((value != null))
					{
						value.RiskFormulas.Add(this);
						this._RiskTypeID = value.RiskTypeID;
					}
					else
					{
						this._RiskTypeID = default(int);
					}
					this.SendPropertyChanged("RiskType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskImpactProbabilityMatrix")]
	public partial class RiskImpactProbabilityMatrix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProbabilityCriteriaID;
		
		private int _ImpactCriteriaID;
		
		private decimal _Probability;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<RiskCriteria> _RiskCriteria;
		
		private EntityRef<RiskCriteria> _RiskCriteria1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProbabilityCriteriaIDChanging(int value);
    partial void OnProbabilityCriteriaIDChanged();
    partial void OnImpactCriteriaIDChanging(int value);
    partial void OnImpactCriteriaIDChanged();
    partial void OnProbabilityChanging(decimal value);
    partial void OnProbabilityChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskImpactProbabilityMatrix()
		{
			this._RiskCriteria = default(EntityRef<RiskCriteria>);
			this._RiskCriteria1 = default(EntityRef<RiskCriteria>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProbabilityCriteriaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProbabilityCriteriaID
		{
			get
			{
				return this._ProbabilityCriteriaID;
			}
			set
			{
				if ((this._ProbabilityCriteriaID != value))
				{
					if (this._RiskCriteria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProbabilityCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._ProbabilityCriteriaID = value;
					this.SendPropertyChanged("ProbabilityCriteriaID");
					this.OnProbabilityCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImpactCriteriaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ImpactCriteriaID
		{
			get
			{
				return this._ImpactCriteriaID;
			}
			set
			{
				if ((this._ImpactCriteriaID != value))
				{
					if (this._RiskCriteria1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImpactCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._ImpactCriteriaID = value;
					this.SendPropertyChanged("ImpactCriteriaID");
					this.OnImpactCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Decimal(18,2) NOT NULL")]
		public decimal Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskImpactProbabilityMatrix", Storage="_RiskCriteria", ThisKey="ProbabilityCriteriaID", OtherKey="RiskCriteriaID", IsForeignKey=true)]
		public RiskCriteria RiskCriteria
		{
			get
			{
				return this._RiskCriteria.Entity;
			}
			set
			{
				RiskCriteria previousValue = this._RiskCriteria.Entity;
				if (((previousValue != value) 
							|| (this._RiskCriteria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCriteria.Entity = null;
						previousValue.RiskImpactProbabilityMatrixes.Remove(this);
					}
					this._RiskCriteria.Entity = value;
					if ((value != null))
					{
						value.RiskImpactProbabilityMatrixes.Add(this);
						this._ProbabilityCriteriaID = value.RiskCriteriaID;
					}
					else
					{
						this._ProbabilityCriteriaID = default(int);
					}
					this.SendPropertyChanged("RiskCriteria");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskImpactProbabilityMatrix1", Storage="_RiskCriteria1", ThisKey="ImpactCriteriaID", OtherKey="RiskCriteriaID", IsForeignKey=true)]
		public RiskCriteria RiskCriteria1
		{
			get
			{
				return this._RiskCriteria1.Entity;
			}
			set
			{
				RiskCriteria previousValue = this._RiskCriteria1.Entity;
				if (((previousValue != value) 
							|| (this._RiskCriteria1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCriteria1.Entity = null;
						previousValue.RiskImpactProbabilityMatrixes1.Remove(this);
					}
					this._RiskCriteria1.Entity = value;
					if ((value != null))
					{
						value.RiskImpactProbabilityMatrixes1.Add(this);
						this._ImpactCriteriaID = value.RiskCriteriaID;
					}
					else
					{
						this._ImpactCriteriaID = default(int);
					}
					this.SendPropertyChanged("RiskCriteria1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskCategory")]
	public partial class RiskCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskCategoryID;
		
		private string _Category;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RiskSubCategory> _RiskSubCategories;
		
		private EntitySet<Risk> _Risks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskCategoryIDChanging(int value);
    partial void OnRiskCategoryIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskCategory()
		{
			this._RiskSubCategories = new EntitySet<RiskSubCategory>(new Action<RiskSubCategory>(this.attach_RiskSubCategories), new Action<RiskSubCategory>(this.detach_RiskSubCategories));
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskCategoryID
		{
			get
			{
				return this._RiskCategoryID;
			}
			set
			{
				if ((this._RiskCategoryID != value))
				{
					this.OnRiskCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RiskCategoryID = value;
					this.SendPropertyChanged("RiskCategoryID");
					this.OnRiskCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCategory_RiskSubCategory", Storage="_RiskSubCategories", ThisKey="RiskCategoryID", OtherKey="CategoryID")]
		public EntitySet<RiskSubCategory> RiskSubCategories
		{
			get
			{
				return this._RiskSubCategories;
			}
			set
			{
				this._RiskSubCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCategory_Risk", Storage="_Risks", ThisKey="RiskCategoryID", OtherKey="RiskCategoryID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RiskSubCategories(RiskSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.RiskCategory = this;
		}
		
		private void detach_RiskSubCategories(RiskSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.RiskCategory = null;
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskCategory = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskSubCategory")]
	public partial class RiskSubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategoryID;
		
		private string _SubCategory;
		
		private int _CategoryID;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ProblemRiskSubCategory> _ProblemRiskSubCategories;
		
		private EntityRef<RiskCategory> _RiskCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnSubCategoryChanging(string value);
    partial void OnSubCategoryChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskSubCategory()
		{
			this._ProblemRiskSubCategories = new EntitySet<ProblemRiskSubCategory>(new Action<ProblemRiskSubCategory>(this.attach_ProblemRiskSubCategories), new Action<ProblemRiskSubCategory>(this.detach_ProblemRiskSubCategories));
			this._RiskCategory = default(EntityRef<RiskCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategory", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SubCategory
		{
			get
			{
				return this._SubCategory;
			}
			set
			{
				if ((this._SubCategory != value))
				{
					this.OnSubCategoryChanging(value);
					this.SendPropertyChanging();
					this._SubCategory = value;
					this.SendPropertyChanged("SubCategory");
					this.OnSubCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._RiskCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskSubCategory_ProblemRiskSubCategory", Storage="_ProblemRiskSubCategories", ThisKey="SubCategoryID", OtherKey="SubCategoryID")]
		public EntitySet<ProblemRiskSubCategory> ProblemRiskSubCategories
		{
			get
			{
				return this._ProblemRiskSubCategories;
			}
			set
			{
				this._ProblemRiskSubCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCategory_RiskSubCategory", Storage="_RiskCategory", ThisKey="CategoryID", OtherKey="RiskCategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RiskCategory RiskCategory
		{
			get
			{
				return this._RiskCategory.Entity;
			}
			set
			{
				RiskCategory previousValue = this._RiskCategory.Entity;
				if (((previousValue != value) 
							|| (this._RiskCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCategory.Entity = null;
						previousValue.RiskSubCategories.Remove(this);
					}
					this._RiskCategory.Entity = value;
					if ((value != null))
					{
						value.RiskSubCategories.Add(this);
						this._CategoryID = value.RiskCategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("RiskCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProblemRiskSubCategories(ProblemRiskSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.RiskSubCategory = this;
		}
		
		private void detach_ProblemRiskSubCategories(ProblemRiskSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.RiskSubCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskImpact")]
	public partial class RiskImpact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskImpactID;
		
		private int _RiskImpactTypeID;
		
		private string _Description1;
		
		private string _Description2;
		
		private int _RiskCriteriaID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<Risk> _Risks1;
		
		private EntitySet<Risk> _Risks2;
		
		private EntityRef<ImpactType> _ImpactType;
		
		private EntityRef<RiskCriteria> _RiskCriteria;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskImpactIDChanging(int value);
    partial void OnRiskImpactIDChanged();
    partial void OnRiskImpactTypeIDChanging(int value);
    partial void OnRiskImpactTypeIDChanged();
    partial void OnDescription1Changing(string value);
    partial void OnDescription1Changed();
    partial void OnDescription2Changing(string value);
    partial void OnDescription2Changed();
    partial void OnRiskCriteriaIDChanging(int value);
    partial void OnRiskCriteriaIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskImpact()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._Risks1 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks1), new Action<Risk>(this.detach_Risks1));
			this._Risks2 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks2), new Action<Risk>(this.detach_Risks2));
			this._ImpactType = default(EntityRef<ImpactType>);
			this._RiskCriteria = default(EntityRef<RiskCriteria>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskImpactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskImpactID
		{
			get
			{
				return this._RiskImpactID;
			}
			set
			{
				if ((this._RiskImpactID != value))
				{
					this.OnRiskImpactIDChanging(value);
					this.SendPropertyChanging();
					this._RiskImpactID = value;
					this.SendPropertyChanged("RiskImpactID");
					this.OnRiskImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskImpactTypeID", DbType="Int NOT NULL")]
		public int RiskImpactTypeID
		{
			get
			{
				return this._RiskImpactTypeID;
			}
			set
			{
				if ((this._RiskImpactTypeID != value))
				{
					if (this._ImpactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskImpactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskImpactTypeID = value;
					this.SendPropertyChanged("RiskImpactTypeID");
					this.OnRiskImpactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description1", DbType="NVarChar(MAX)")]
		public string Description1
		{
			get
			{
				return this._Description1;
			}
			set
			{
				if ((this._Description1 != value))
				{
					this.OnDescription1Changing(value);
					this.SendPropertyChanging();
					this._Description1 = value;
					this.SendPropertyChanged("Description1");
					this.OnDescription1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description2", DbType="NVarChar(MAX)")]
		public string Description2
		{
			get
			{
				return this._Description2;
			}
			set
			{
				if ((this._Description2 != value))
				{
					this.OnDescription2Changing(value);
					this.SendPropertyChanging();
					this._Description2 = value;
					this.SendPropertyChanged("Description2");
					this.OnDescription2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskCriteriaID", DbType="Int NOT NULL")]
		public int RiskCriteriaID
		{
			get
			{
				return this._RiskCriteriaID;
			}
			set
			{
				if ((this._RiskCriteriaID != value))
				{
					if (this._RiskCriteria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._RiskCriteriaID = value;
					this.SendPropertyChanged("RiskCriteriaID");
					this.OnRiskCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskImpact_Risk", Storage="_Risks", ThisKey="RiskImpactID", OtherKey="CostImpactID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskImpact_Risk1", Storage="_Risks1", ThisKey="RiskImpactID", OtherKey="QOSImpactID")]
		public EntitySet<Risk> Risks1
		{
			get
			{
				return this._Risks1;
			}
			set
			{
				this._Risks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskImpact_Risk2", Storage="_Risks2", ThisKey="RiskImpactID", OtherKey="TimeImpactID")]
		public EntitySet<Risk> Risks2
		{
			get
			{
				return this._Risks2;
			}
			set
			{
				this._Risks2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImpactType_RiskImpact", Storage="_ImpactType", ThisKey="RiskImpactTypeID", OtherKey="ImpactTypeID", IsForeignKey=true)]
		public ImpactType ImpactType
		{
			get
			{
				return this._ImpactType.Entity;
			}
			set
			{
				ImpactType previousValue = this._ImpactType.Entity;
				if (((previousValue != value) 
							|| (this._ImpactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImpactType.Entity = null;
						previousValue.RiskImpacts.Remove(this);
					}
					this._ImpactType.Entity = value;
					if ((value != null))
					{
						value.RiskImpacts.Add(this);
						this._RiskImpactTypeID = value.ImpactTypeID;
					}
					else
					{
						this._RiskImpactTypeID = default(int);
					}
					this.SendPropertyChanged("ImpactType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskImpact", Storage="_RiskCriteria", ThisKey="RiskCriteriaID", OtherKey="RiskCriteriaID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RiskCriteria RiskCriteria
		{
			get
			{
				return this._RiskCriteria.Entity;
			}
			set
			{
				RiskCriteria previousValue = this._RiskCriteria.Entity;
				if (((previousValue != value) 
							|| (this._RiskCriteria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCriteria.Entity = null;
						previousValue.RiskImpacts.Remove(this);
					}
					this._RiskCriteria.Entity = value;
					if ((value != null))
					{
						value.RiskImpacts.Add(this);
						this._RiskCriteriaID = value.RiskCriteriaID;
					}
					else
					{
						this._RiskCriteriaID = default(int);
					}
					this.SendPropertyChanged("RiskCriteria");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskImpact = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskImpact = null;
		}
		
		private void attach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskImpact1 = this;
		}
		
		private void detach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskImpact1 = null;
		}
		
		private void attach_Risks2(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskImpact2 = this;
		}
		
		private void detach_Risks2(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskImpact2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.ImpactType")]
	public partial class ImpactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImpactTypeID;
		
		private string _ImpactType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RiskImpact> _RiskImpacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImpactTypeIDChanging(int value);
    partial void OnImpactTypeIDChanged();
    partial void OnImpactType1Changing(string value);
    partial void OnImpactType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ImpactType()
		{
			this._RiskImpacts = new EntitySet<RiskImpact>(new Action<RiskImpact>(this.attach_RiskImpacts), new Action<RiskImpact>(this.detach_RiskImpacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImpactTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImpactTypeID
		{
			get
			{
				return this._ImpactTypeID;
			}
			set
			{
				if ((this._ImpactTypeID != value))
				{
					this.OnImpactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ImpactTypeID = value;
					this.SendPropertyChanged("ImpactTypeID");
					this.OnImpactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ImpactType", Storage="_ImpactType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ImpactType1
		{
			get
			{
				return this._ImpactType1;
			}
			set
			{
				if ((this._ImpactType1 != value))
				{
					this.OnImpactType1Changing(value);
					this.SendPropertyChanging();
					this._ImpactType1 = value;
					this.SendPropertyChanged("ImpactType1");
					this.OnImpactType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImpactType_RiskImpact", Storage="_RiskImpacts", ThisKey="ImpactTypeID", OtherKey="RiskImpactTypeID")]
		public EntitySet<RiskImpact> RiskImpacts
		{
			get
			{
				return this._RiskImpacts;
			}
			set
			{
				this._RiskImpacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RiskImpacts(RiskImpact entity)
		{
			this.SendPropertyChanging();
			entity.ImpactType = this;
		}
		
		private void detach_RiskImpacts(RiskImpact entity)
		{
			this.SendPropertyChanging();
			entity.ImpactType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.StandardCostImpact")]
	public partial class StandardCostImpact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostImpactID;
		
		private int _RiskCriteriaID;
		
		private decimal _StandardCost;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<RiskCriteria> _RiskCriteria;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostImpactIDChanging(int value);
    partial void OnCostImpactIDChanged();
    partial void OnRiskCriteriaIDChanging(int value);
    partial void OnRiskCriteriaIDChanged();
    partial void OnStandardCostChanging(decimal value);
    partial void OnStandardCostChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public StandardCostImpact()
		{
			this._RiskCriteria = default(EntityRef<RiskCriteria>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostImpactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CostImpactID
		{
			get
			{
				return this._CostImpactID;
			}
			set
			{
				if ((this._CostImpactID != value))
				{
					this.OnCostImpactIDChanging(value);
					this.SendPropertyChanging();
					this._CostImpactID = value;
					this.SendPropertyChanged("CostImpactID");
					this.OnCostImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskCriteriaID", DbType="Int NOT NULL")]
		public int RiskCriteriaID
		{
			get
			{
				return this._RiskCriteriaID;
			}
			set
			{
				if ((this._RiskCriteriaID != value))
				{
					if (this._RiskCriteria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._RiskCriteriaID = value;
					this.SendPropertyChanged("RiskCriteriaID");
					this.OnRiskCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardCost", DbType="Decimal(18,2) NOT NULL")]
		public decimal StandardCost
		{
			get
			{
				return this._StandardCost;
			}
			set
			{
				if ((this._StandardCost != value))
				{
					this.OnStandardCostChanging(value);
					this.SendPropertyChanging();
					this._StandardCost = value;
					this.SendPropertyChanged("StandardCost");
					this.OnStandardCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_StandardCostImpact", Storage="_RiskCriteria", ThisKey="RiskCriteriaID", OtherKey="RiskCriteriaID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RiskCriteria RiskCriteria
		{
			get
			{
				return this._RiskCriteria.Entity;
			}
			set
			{
				RiskCriteria previousValue = this._RiskCriteria.Entity;
				if (((previousValue != value) 
							|| (this._RiskCriteria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCriteria.Entity = null;
						previousValue.StandardCostImpacts.Remove(this);
					}
					this._RiskCriteria.Entity = value;
					if ((value != null))
					{
						value.StandardCostImpacts.Add(this);
						this._RiskCriteriaID = value.RiskCriteriaID;
					}
					else
					{
						this._RiskCriteriaID = default(int);
					}
					this.SendPropertyChanged("RiskCriteria");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskCriteria")]
	public partial class RiskCriteria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskCriteriaID;
		
		private int _RiskTypeID;
		
		private string _RiskCriteria1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RiskImpactProbabilityMatrix> _RiskImpactProbabilityMatrixes;
		
		private EntitySet<RiskImpactProbabilityMatrix> _RiskImpactProbabilityMatrixes1;
		
		private EntitySet<RiskImpact> _RiskImpacts;
		
		private EntitySet<StandardCostImpact> _StandardCostImpacts;
		
		private EntitySet<RiskProbability> _RiskProbabilities;
		
		private EntityRef<RiskType> _RiskType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskCriteriaIDChanging(int value);
    partial void OnRiskCriteriaIDChanged();
    partial void OnRiskTypeIDChanging(int value);
    partial void OnRiskTypeIDChanged();
    partial void OnRiskCriteria1Changing(string value);
    partial void OnRiskCriteria1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskCriteria()
		{
			this._RiskImpactProbabilityMatrixes = new EntitySet<RiskImpactProbabilityMatrix>(new Action<RiskImpactProbabilityMatrix>(this.attach_RiskImpactProbabilityMatrixes), new Action<RiskImpactProbabilityMatrix>(this.detach_RiskImpactProbabilityMatrixes));
			this._RiskImpactProbabilityMatrixes1 = new EntitySet<RiskImpactProbabilityMatrix>(new Action<RiskImpactProbabilityMatrix>(this.attach_RiskImpactProbabilityMatrixes1), new Action<RiskImpactProbabilityMatrix>(this.detach_RiskImpactProbabilityMatrixes1));
			this._RiskImpacts = new EntitySet<RiskImpact>(new Action<RiskImpact>(this.attach_RiskImpacts), new Action<RiskImpact>(this.detach_RiskImpacts));
			this._StandardCostImpacts = new EntitySet<StandardCostImpact>(new Action<StandardCostImpact>(this.attach_StandardCostImpacts), new Action<StandardCostImpact>(this.detach_StandardCostImpacts));
			this._RiskProbabilities = new EntitySet<RiskProbability>(new Action<RiskProbability>(this.attach_RiskProbabilities), new Action<RiskProbability>(this.detach_RiskProbabilities));
			this._RiskType = default(EntityRef<RiskType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskCriteriaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskCriteriaID
		{
			get
			{
				return this._RiskCriteriaID;
			}
			set
			{
				if ((this._RiskCriteriaID != value))
				{
					this.OnRiskCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._RiskCriteriaID = value;
					this.SendPropertyChanged("RiskCriteriaID");
					this.OnRiskCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskTypeID", DbType="Int NOT NULL")]
		public int RiskTypeID
		{
			get
			{
				return this._RiskTypeID;
			}
			set
			{
				if ((this._RiskTypeID != value))
				{
					if (this._RiskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskTypeID = value;
					this.SendPropertyChanged("RiskTypeID");
					this.OnRiskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RiskCriteria", Storage="_RiskCriteria1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RiskCriteria1
		{
			get
			{
				return this._RiskCriteria1;
			}
			set
			{
				if ((this._RiskCriteria1 != value))
				{
					this.OnRiskCriteria1Changing(value);
					this.SendPropertyChanging();
					this._RiskCriteria1 = value;
					this.SendPropertyChanged("RiskCriteria1");
					this.OnRiskCriteria1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskImpactProbabilityMatrix", Storage="_RiskImpactProbabilityMatrixes", ThisKey="RiskCriteriaID", OtherKey="ProbabilityCriteriaID")]
		public EntitySet<RiskImpactProbabilityMatrix> RiskImpactProbabilityMatrixes
		{
			get
			{
				return this._RiskImpactProbabilityMatrixes;
			}
			set
			{
				this._RiskImpactProbabilityMatrixes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskImpactProbabilityMatrix1", Storage="_RiskImpactProbabilityMatrixes1", ThisKey="RiskCriteriaID", OtherKey="ImpactCriteriaID")]
		public EntitySet<RiskImpactProbabilityMatrix> RiskImpactProbabilityMatrixes1
		{
			get
			{
				return this._RiskImpactProbabilityMatrixes1;
			}
			set
			{
				this._RiskImpactProbabilityMatrixes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskImpact", Storage="_RiskImpacts", ThisKey="RiskCriteriaID", OtherKey="RiskCriteriaID")]
		public EntitySet<RiskImpact> RiskImpacts
		{
			get
			{
				return this._RiskImpacts;
			}
			set
			{
				this._RiskImpacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_StandardCostImpact", Storage="_StandardCostImpacts", ThisKey="RiskCriteriaID", OtherKey="RiskCriteriaID")]
		public EntitySet<StandardCostImpact> StandardCostImpacts
		{
			get
			{
				return this._StandardCostImpacts;
			}
			set
			{
				this._StandardCostImpacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskProbability", Storage="_RiskProbabilities", ThisKey="RiskCriteriaID", OtherKey="RiskCriteriaID")]
		public EntitySet<RiskProbability> RiskProbabilities
		{
			get
			{
				return this._RiskProbabilities;
			}
			set
			{
				this._RiskProbabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskCriteria", Storage="_RiskType", ThisKey="RiskTypeID", OtherKey="RiskTypeID", IsForeignKey=true)]
		public RiskType RiskType
		{
			get
			{
				return this._RiskType.Entity;
			}
			set
			{
				RiskType previousValue = this._RiskType.Entity;
				if (((previousValue != value) 
							|| (this._RiskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskType.Entity = null;
						previousValue.RiskCriterias.Remove(this);
					}
					this._RiskType.Entity = value;
					if ((value != null))
					{
						value.RiskCriterias.Add(this);
						this._RiskTypeID = value.RiskTypeID;
					}
					else
					{
						this._RiskTypeID = default(int);
					}
					this.SendPropertyChanged("RiskType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RiskImpactProbabilityMatrixes(RiskImpactProbabilityMatrix entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = this;
		}
		
		private void detach_RiskImpactProbabilityMatrixes(RiskImpactProbabilityMatrix entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = null;
		}
		
		private void attach_RiskImpactProbabilityMatrixes1(RiskImpactProbabilityMatrix entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria1 = this;
		}
		
		private void detach_RiskImpactProbabilityMatrixes1(RiskImpactProbabilityMatrix entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria1 = null;
		}
		
		private void attach_RiskImpacts(RiskImpact entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = this;
		}
		
		private void detach_RiskImpacts(RiskImpact entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = null;
		}
		
		private void attach_StandardCostImpacts(StandardCostImpact entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = this;
		}
		
		private void detach_StandardCostImpacts(StandardCostImpact entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = null;
		}
		
		private void attach_RiskProbabilities(RiskProbability entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = this;
		}
		
		private void detach_RiskProbabilities(RiskProbability entity)
		{
			this.SendPropertyChanging();
			entity.RiskCriteria = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.ISO14001AssessmentCategory")]
	public partial class ISO14001AssessmentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssessmentCategoryID;
		
		private string _AssessmentCategory;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ISO14001AssessmentGuideline> _ISO14001AssessmentGuidelines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssessmentCategoryIDChanging(int value);
    partial void OnAssessmentCategoryIDChanged();
    partial void OnAssessmentCategoryChanging(string value);
    partial void OnAssessmentCategoryChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ISO14001AssessmentCategory()
		{
			this._ISO14001AssessmentGuidelines = new EntitySet<ISO14001AssessmentGuideline>(new Action<ISO14001AssessmentGuideline>(this.attach_ISO14001AssessmentGuidelines), new Action<ISO14001AssessmentGuideline>(this.detach_ISO14001AssessmentGuidelines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssessmentCategoryID
		{
			get
			{
				return this._AssessmentCategoryID;
			}
			set
			{
				if ((this._AssessmentCategoryID != value))
				{
					this.OnAssessmentCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentCategoryID = value;
					this.SendPropertyChanged("AssessmentCategoryID");
					this.OnAssessmentCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentCategory", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AssessmentCategory
		{
			get
			{
				return this._AssessmentCategory;
			}
			set
			{
				if ((this._AssessmentCategory != value))
				{
					this.OnAssessmentCategoryChanging(value);
					this.SendPropertyChanging();
					this._AssessmentCategory = value;
					this.SendPropertyChanged("AssessmentCategory");
					this.OnAssessmentCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentCategory_ISO14001AssessmentGuideline", Storage="_ISO14001AssessmentGuidelines", ThisKey="AssessmentCategoryID", OtherKey="AssessmentCategoryID")]
		public EntitySet<ISO14001AssessmentGuideline> ISO14001AssessmentGuidelines
		{
			get
			{
				return this._ISO14001AssessmentGuidelines;
			}
			set
			{
				this._ISO14001AssessmentGuidelines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISO14001AssessmentGuidelines(ISO14001AssessmentGuideline entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentCategory = this;
		}
		
		private void detach_ISO14001AssessmentGuidelines(ISO14001AssessmentGuideline entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISOStandards")]
	public partial class ISOStandard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ISOStandardID;
		
		private string _ISOStandard1;
		
		private string _Discription;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ISOProcess> _ISOProcesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnISOStandardIDChanging(int value);
    partial void OnISOStandardIDChanged();
    partial void OnISOStandard1Changing(string value);
    partial void OnISOStandard1Changed();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ISOStandard()
		{
			this._ISOProcesses = new EntitySet<ISOProcess>(new Action<ISOProcess>(this.attach_ISOProcesses), new Action<ISOProcess>(this.detach_ISOProcesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOStandardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ISOStandardID
		{
			get
			{
				return this._ISOStandardID;
			}
			set
			{
				if ((this._ISOStandardID != value))
				{
					this.OnISOStandardIDChanging(value);
					this.SendPropertyChanging();
					this._ISOStandardID = value;
					this.SendPropertyChanged("ISOStandardID");
					this.OnISOStandardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ISOStandard", Storage="_ISOStandard1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ISOStandard1
		{
			get
			{
				return this._ISOStandard1;
			}
			set
			{
				if ((this._ISOStandard1 != value))
				{
					this.OnISOStandard1Changing(value);
					this.SendPropertyChanging();
					this._ISOStandard1 = value;
					this.SendPropertyChanged("ISOStandard1");
					this.OnISOStandard1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(MAX)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISOStandard_ISOProcess", Storage="_ISOProcesses", ThisKey="ISOStandardID", OtherKey="ISOStandardID")]
		public EntitySet<ISOProcess> ISOProcesses
		{
			get
			{
				return this._ISOProcesses;
			}
			set
			{
				this._ISOProcesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISOProcesses(ISOProcess entity)
		{
			this.SendPropertyChanging();
			entity.ISOStandard = this;
		}
		
		private void detach_ISOProcesses(ISOProcess entity)
		{
			this.SendPropertyChanging();
			entity.ISOStandard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskType")]
	public partial class RiskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskTypeID;
		
		private string _RiskType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RiskFormulaParameter> _RiskFormulaParameters;
		
		private EntitySet<RiskFormula> _RiskFormulas;
		
		private EntitySet<RiskCriteria> _RiskCriterias;
		
		private EntitySet<RiskScoreCriteria> _RiskScoreCriterias;
		
		private EntitySet<Risk> _Risks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskTypeIDChanging(int value);
    partial void OnRiskTypeIDChanged();
    partial void OnRiskType1Changing(string value);
    partial void OnRiskType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskType()
		{
			this._RiskFormulaParameters = new EntitySet<RiskFormulaParameter>(new Action<RiskFormulaParameter>(this.attach_RiskFormulaParameters), new Action<RiskFormulaParameter>(this.detach_RiskFormulaParameters));
			this._RiskFormulas = new EntitySet<RiskFormula>(new Action<RiskFormula>(this.attach_RiskFormulas), new Action<RiskFormula>(this.detach_RiskFormulas));
			this._RiskCriterias = new EntitySet<RiskCriteria>(new Action<RiskCriteria>(this.attach_RiskCriterias), new Action<RiskCriteria>(this.detach_RiskCriterias));
			this._RiskScoreCriterias = new EntitySet<RiskScoreCriteria>(new Action<RiskScoreCriteria>(this.attach_RiskScoreCriterias), new Action<RiskScoreCriteria>(this.detach_RiskScoreCriterias));
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskTypeID
		{
			get
			{
				return this._RiskTypeID;
			}
			set
			{
				if ((this._RiskTypeID != value))
				{
					this.OnRiskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskTypeID = value;
					this.SendPropertyChanged("RiskTypeID");
					this.OnRiskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RiskType", Storage="_RiskType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RiskType1
		{
			get
			{
				return this._RiskType1;
			}
			set
			{
				if ((this._RiskType1 != value))
				{
					this.OnRiskType1Changing(value);
					this.SendPropertyChanging();
					this._RiskType1 = value;
					this.SendPropertyChanged("RiskType1");
					this.OnRiskType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskFormulaParameter", Storage="_RiskFormulaParameters", ThisKey="RiskTypeID", OtherKey="RiskTypeID")]
		public EntitySet<RiskFormulaParameter> RiskFormulaParameters
		{
			get
			{
				return this._RiskFormulaParameters;
			}
			set
			{
				this._RiskFormulaParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskFormula", Storage="_RiskFormulas", ThisKey="RiskTypeID", OtherKey="RiskTypeID")]
		public EntitySet<RiskFormula> RiskFormulas
		{
			get
			{
				return this._RiskFormulas;
			}
			set
			{
				this._RiskFormulas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskCriteria", Storage="_RiskCriterias", ThisKey="RiskTypeID", OtherKey="RiskTypeID")]
		public EntitySet<RiskCriteria> RiskCriterias
		{
			get
			{
				return this._RiskCriterias;
			}
			set
			{
				this._RiskCriterias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskScoreCriteria", Storage="_RiskScoreCriterias", ThisKey="RiskTypeID", OtherKey="RiskTypeID")]
		public EntitySet<RiskScoreCriteria> RiskScoreCriterias
		{
			get
			{
				return this._RiskScoreCriterias;
			}
			set
			{
				this._RiskScoreCriterias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_Risk", Storage="_Risks", ThisKey="RiskTypeID", OtherKey="RiskTypeID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RiskFormulaParameters(RiskFormulaParameter entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = this;
		}
		
		private void detach_RiskFormulaParameters(RiskFormulaParameter entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = null;
		}
		
		private void attach_RiskFormulas(RiskFormula entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = this;
		}
		
		private void detach_RiskFormulas(RiskFormula entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = null;
		}
		
		private void attach_RiskCriterias(RiskCriteria entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = this;
		}
		
		private void detach_RiskCriterias(RiskCriteria entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = null;
		}
		
		private void attach_RiskScoreCriterias(RiskScoreCriteria entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = this;
		}
		
		private void detach_RiskScoreCriterias(RiskScoreCriteria entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = null;
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskStatus")]
	public partial class RiskStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StatusId;
		
		private string _RiskStatus1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIdChanging(long value);
    partial void OnStatusIdChanged();
    partial void OnRiskStatus1Changing(string value);
    partial void OnRiskStatus1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskStatus()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RiskStatus", Storage="_RiskStatus1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RiskStatus1
		{
			get
			{
				return this._RiskStatus1;
			}
			set
			{
				if ((this._RiskStatus1 != value))
				{
					this.OnRiskStatus1Changing(value);
					this.SendPropertyChanging();
					this._RiskStatus1 = value;
					this.SendPropertyChanged("RiskStatus1");
					this.OnRiskStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskStatus_Risk", Storage="_Risks", ThisKey="StatusId", OtherKey="RiskStatusID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskStatus = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskMode")]
	public partial class RiskMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskModeID;
		
		private string _RiskMode1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskModeIDChanging(int value);
    partial void OnRiskModeIDChanged();
    partial void OnRiskMode1Changing(string value);
    partial void OnRiskMode1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskMode()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskModeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskModeID
		{
			get
			{
				return this._RiskModeID;
			}
			set
			{
				if ((this._RiskModeID != value))
				{
					this.OnRiskModeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskModeID = value;
					this.SendPropertyChanged("RiskModeID");
					this.OnRiskModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RiskMode", Storage="_RiskMode1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RiskMode1
		{
			get
			{
				return this._RiskMode1;
			}
			set
			{
				if ((this._RiskMode1 != value))
				{
					this.OnRiskMode1Changing(value);
					this.SendPropertyChanging();
					this._RiskMode1 = value;
					this.SendPropertyChanged("RiskMode1");
					this.OnRiskMode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskMode_Risk", Storage="_Risks", ThisKey="RiskModeID", OtherKey="RiskModeID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskMode = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskScoreCriteria")]
	public partial class RiskScoreCriteria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskScoreCriteriaID;
		
		private string _Description;
		
		private int _RiskTypeID;
		
		private long _ComparatorID;
		
		private decimal _ComparatorValue;
		
		private int _Rank;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<RiskType> _RiskType;
		
		private EntityRef<AT_RAGSign> _AT_RAGSign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskScoreCriteriaIDChanging(int value);
    partial void OnRiskScoreCriteriaIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRiskTypeIDChanging(int value);
    partial void OnRiskTypeIDChanged();
    partial void OnComparatorIDChanging(long value);
    partial void OnComparatorIDChanged();
    partial void OnComparatorValueChanging(decimal value);
    partial void OnComparatorValueChanged();
    partial void OnRankChanging(int value);
    partial void OnRankChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskScoreCriteria()
		{
			this._RiskType = default(EntityRef<RiskType>);
			this._AT_RAGSign = default(EntityRef<AT_RAGSign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskScoreCriteriaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskScoreCriteriaID
		{
			get
			{
				return this._RiskScoreCriteriaID;
			}
			set
			{
				if ((this._RiskScoreCriteriaID != value))
				{
					this.OnRiskScoreCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._RiskScoreCriteriaID = value;
					this.SendPropertyChanged("RiskScoreCriteriaID");
					this.OnRiskScoreCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskTypeID", DbType="Int NOT NULL")]
		public int RiskTypeID
		{
			get
			{
				return this._RiskTypeID;
			}
			set
			{
				if ((this._RiskTypeID != value))
				{
					if (this._RiskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskTypeID = value;
					this.SendPropertyChanged("RiskTypeID");
					this.OnRiskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparatorID", DbType="BigInt NOT NULL")]
		public long ComparatorID
		{
			get
			{
				return this._ComparatorID;
			}
			set
			{
				if ((this._ComparatorID != value))
				{
					if (this._AT_RAGSign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComparatorIDChanging(value);
					this.SendPropertyChanging();
					this._ComparatorID = value;
					this.SendPropertyChanged("ComparatorID");
					this.OnComparatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparatorValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal ComparatorValue
		{
			get
			{
				return this._ComparatorValue;
			}
			set
			{
				if ((this._ComparatorValue != value))
				{
					this.OnComparatorValueChanging(value);
					this.SendPropertyChanging();
					this._ComparatorValue = value;
					this.SendPropertyChanged("ComparatorValue");
					this.OnComparatorValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int NOT NULL")]
		public int Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_RiskScoreCriteria", Storage="_RiskType", ThisKey="RiskTypeID", OtherKey="RiskTypeID", IsForeignKey=true)]
		public RiskType RiskType
		{
			get
			{
				return this._RiskType.Entity;
			}
			set
			{
				RiskType previousValue = this._RiskType.Entity;
				if (((previousValue != value) 
							|| (this._RiskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskType.Entity = null;
						previousValue.RiskScoreCriterias.Remove(this);
					}
					this._RiskType.Entity = value;
					if ((value != null))
					{
						value.RiskScoreCriterias.Add(this);
						this._RiskTypeID = value.RiskTypeID;
					}
					else
					{
						this._RiskTypeID = default(int);
					}
					this.SendPropertyChanged("RiskType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_RiskScoreCriteria", Storage="_AT_RAGSign", ThisKey="ComparatorID", OtherKey="SignID", IsForeignKey=true)]
		public AT_RAGSign AT_RAGSign
		{
			get
			{
				return this._AT_RAGSign.Entity;
			}
			set
			{
				AT_RAGSign previousValue = this._AT_RAGSign.Entity;
				if (((previousValue != value) 
							|| (this._AT_RAGSign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_RAGSign.Entity = null;
						previousValue.RiskScoreCriterias.Remove(this);
					}
					this._AT_RAGSign.Entity = value;
					if ((value != null))
					{
						value.RiskScoreCriterias.Add(this);
						this._ComparatorID = value.SignID;
					}
					else
					{
						this._ComparatorID = default(long);
					}
					this.SendPropertyChanged("AT_RAGSign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskRatingCriteria")]
	public partial class RiskRatingCriteria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingCriteriaID;
		
		private int _Rating;
		
		private string _Description;
		
		private long _ComparatorID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<AT_RAGSign> _AT_RAGSign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingCriteriaIDChanging(int value);
    partial void OnRatingCriteriaIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnComparatorIDChanging(long value);
    partial void OnComparatorIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskRatingCriteria()
		{
			this._AT_RAGSign = default(EntityRef<AT_RAGSign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingCriteriaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RatingCriteriaID
		{
			get
			{
				return this._RatingCriteriaID;
			}
			set
			{
				if ((this._RatingCriteriaID != value))
				{
					this.OnRatingCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._RatingCriteriaID = value;
					this.SendPropertyChanged("RatingCriteriaID");
					this.OnRatingCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparatorID", DbType="BigInt NOT NULL")]
		public long ComparatorID
		{
			get
			{
				return this._ComparatorID;
			}
			set
			{
				if ((this._ComparatorID != value))
				{
					if (this._AT_RAGSign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComparatorIDChanging(value);
					this.SendPropertyChanging();
					this._ComparatorID = value;
					this.SendPropertyChanged("ComparatorID");
					this.OnComparatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_RiskRatingCriteria", Storage="_AT_RAGSign", ThisKey="ComparatorID", OtherKey="SignID", IsForeignKey=true)]
		public AT_RAGSign AT_RAGSign
		{
			get
			{
				return this._AT_RAGSign.Entity;
			}
			set
			{
				AT_RAGSign previousValue = this._AT_RAGSign.Entity;
				if (((previousValue != value) 
							|| (this._AT_RAGSign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_RAGSign.Entity = null;
						previousValue.RiskRatingCriterias.Remove(this);
					}
					this._AT_RAGSign.Entity = value;
					if ((value != null))
					{
						value.RiskRatingCriterias.Add(this);
						this._ComparatorID = value.SignID;
					}
					else
					{
						this._ComparatorID = default(long);
					}
					this.SendPropertyChanged("AT_RAGSign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.ISO14001AssessmentGuidelines")]
	public partial class ISO14001AssessmentGuideline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssessmentGuidelineID;
		
		private string _AssessmentGuideline;
		
		private int _AssessmentCategoryID;
		
		private int _Value;
		
		private System.Nullable<decimal> _Score;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<Risk> _Risks1;
		
		private EntitySet<Risk> _Risks2;
		
		private EntitySet<Risk> _Risks3;
		
		private EntitySet<Risk> _Risks4;
		
		private EntitySet<Risk> _Risks5;
		
		private EntityRef<ISO14001AssessmentCategory> _ISO14001AssessmentCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssessmentGuidelineIDChanging(int value);
    partial void OnAssessmentGuidelineIDChanged();
    partial void OnAssessmentGuidelineChanging(string value);
    partial void OnAssessmentGuidelineChanged();
    partial void OnAssessmentCategoryIDChanging(int value);
    partial void OnAssessmentCategoryIDChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnScoreChanging(System.Nullable<decimal> value);
    partial void OnScoreChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ISO14001AssessmentGuideline()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._Risks1 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks1), new Action<Risk>(this.detach_Risks1));
			this._Risks2 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks2), new Action<Risk>(this.detach_Risks2));
			this._Risks3 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks3), new Action<Risk>(this.detach_Risks3));
			this._Risks4 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks4), new Action<Risk>(this.detach_Risks4));
			this._Risks5 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks5), new Action<Risk>(this.detach_Risks5));
			this._ISO14001AssessmentCategory = default(EntityRef<ISO14001AssessmentCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentGuidelineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssessmentGuidelineID
		{
			get
			{
				return this._AssessmentGuidelineID;
			}
			set
			{
				if ((this._AssessmentGuidelineID != value))
				{
					this.OnAssessmentGuidelineIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentGuidelineID = value;
					this.SendPropertyChanged("AssessmentGuidelineID");
					this.OnAssessmentGuidelineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentGuideline", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AssessmentGuideline
		{
			get
			{
				return this._AssessmentGuideline;
			}
			set
			{
				if ((this._AssessmentGuideline != value))
				{
					this.OnAssessmentGuidelineChanging(value);
					this.SendPropertyChanging();
					this._AssessmentGuideline = value;
					this.SendPropertyChanged("AssessmentGuideline");
					this.OnAssessmentGuidelineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentCategoryID", DbType="Int NOT NULL")]
		public int AssessmentCategoryID
		{
			get
			{
				return this._AssessmentCategoryID;
			}
			set
			{
				if ((this._AssessmentCategoryID != value))
				{
					if (this._ISO14001AssessmentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AssessmentCategoryID = value;
					this.SendPropertyChanged("AssessmentCategoryID");
					this.OnAssessmentCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk", Storage="_Risks", ThisKey="AssessmentGuidelineID", OtherKey="InterestedPartyID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk1", Storage="_Risks1", ThisKey="AssessmentGuidelineID", OtherKey="LackInformationID")]
		public EntitySet<Risk> Risks1
		{
			get
			{
				return this._Risks1;
			}
			set
			{
				this._Risks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk2", Storage="_Risks2", ThisKey="AssessmentGuidelineID", OtherKey="NusianceID")]
		public EntitySet<Risk> Risks2
		{
			get
			{
				return this._Risks2;
			}
			set
			{
				this._Risks2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk3", Storage="_Risks3", ThisKey="AssessmentGuidelineID", OtherKey="OperationalComplexityID")]
		public EntitySet<Risk> Risks3
		{
			get
			{
				return this._Risks3;
			}
			set
			{
				this._Risks3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk4", Storage="_Risks4", ThisKey="AssessmentGuidelineID", OtherKey="PolicyIssueID")]
		public EntitySet<Risk> Risks4
		{
			get
			{
				return this._Risks4;
			}
			set
			{
				this._Risks4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk5", Storage="_Risks5", ThisKey="AssessmentGuidelineID", OtherKey="RegularityID")]
		public EntitySet<Risk> Risks5
		{
			get
			{
				return this._Risks5;
			}
			set
			{
				this._Risks5.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentCategory_ISO14001AssessmentGuideline", Storage="_ISO14001AssessmentCategory", ThisKey="AssessmentCategoryID", OtherKey="AssessmentCategoryID", IsForeignKey=true)]
		public ISO14001AssessmentCategory ISO14001AssessmentCategory
		{
			get
			{
				return this._ISO14001AssessmentCategory.Entity;
			}
			set
			{
				ISO14001AssessmentCategory previousValue = this._ISO14001AssessmentCategory.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentCategory.Entity = null;
						previousValue.ISO14001AssessmentGuidelines.Remove(this);
					}
					this._ISO14001AssessmentCategory.Entity = value;
					if ((value != null))
					{
						value.ISO14001AssessmentGuidelines.Add(this);
						this._AssessmentCategoryID = value.AssessmentCategoryID;
					}
					else
					{
						this._AssessmentCategoryID = default(int);
					}
					this.SendPropertyChanged("ISO14001AssessmentCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline = null;
		}
		
		private void attach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline1 = this;
		}
		
		private void detach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline1 = null;
		}
		
		private void attach_Risks2(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline2 = this;
		}
		
		private void detach_Risks2(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline2 = null;
		}
		
		private void attach_Risks3(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline3 = this;
		}
		
		private void detach_Risks3(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline3 = null;
		}
		
		private void attach_Risks4(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline4 = this;
		}
		
		private void detach_Risks4(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline4 = null;
		}
		
		private void attach_Risks5(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline5 = this;
		}
		
		private void detach_Risks5(Risk entity)
		{
			this.SendPropertyChanging();
			entity.ISO14001AssessmentGuideline5 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskProbability")]
	public partial class RiskProbability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RiskProbabilityId;
		
		private int _RiskCriteriaID;
		
		private decimal _Probability;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
		private EntityRef<RiskCriteria> _RiskCriteria;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskProbabilityIdChanging(long value);
    partial void OnRiskProbabilityIdChanged();
    partial void OnRiskCriteriaIDChanging(int value);
    partial void OnRiskCriteriaIDChanged();
    partial void OnProbabilityChanging(decimal value);
    partial void OnProbabilityChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskProbability()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._RiskCriteria = default(EntityRef<RiskCriteria>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskProbabilityId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RiskProbabilityId
		{
			get
			{
				return this._RiskProbabilityId;
			}
			set
			{
				if ((this._RiskProbabilityId != value))
				{
					this.OnRiskProbabilityIdChanging(value);
					this.SendPropertyChanging();
					this._RiskProbabilityId = value;
					this.SendPropertyChanged("RiskProbabilityId");
					this.OnRiskProbabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskCriteriaID", DbType="Int NOT NULL")]
		public int RiskCriteriaID
		{
			get
			{
				return this._RiskCriteriaID;
			}
			set
			{
				if ((this._RiskCriteriaID != value))
				{
					if (this._RiskCriteria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskCriteriaIDChanging(value);
					this.SendPropertyChanging();
					this._RiskCriteriaID = value;
					this.SendPropertyChanged("RiskCriteriaID");
					this.OnRiskCriteriaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Decimal(18,2) NOT NULL")]
		public decimal Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskProbability_Risk", Storage="_Risks", ThisKey="RiskProbabilityId", OtherKey="RiskProbabilityID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCriteria_RiskProbability", Storage="_RiskCriteria", ThisKey="RiskCriteriaID", OtherKey="RiskCriteriaID", IsForeignKey=true)]
		public RiskCriteria RiskCriteria
		{
			get
			{
				return this._RiskCriteria.Entity;
			}
			set
			{
				RiskCriteria previousValue = this._RiskCriteria.Entity;
				if (((previousValue != value) 
							|| (this._RiskCriteria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCriteria.Entity = null;
						previousValue.RiskProbabilities.Remove(this);
					}
					this._RiskCriteria.Entity = value;
					if ((value != null))
					{
						value.RiskProbabilities.Add(this);
						this._RiskCriteriaID = value.RiskCriteriaID;
					}
					else
					{
						this._RiskCriteriaID = default(int);
					}
					this.SendPropertyChanged("RiskCriteria");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskProbability = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskProbability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmployeeTraining.TrainingCourse")]
	public partial class TrainingCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TrainingCourseId;
		
		private string _CourseNo;
		
		private string _Title;
		
		private System.Nullable<long> _MaterialID;
		
		private string _Description;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<int> _PeriodID;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _Capacity;
		
		private bool _Lunch;
		
		private bool _Refreshment;
		
		private bool _Transportation;
		
		private string _Notes;
		
		private int _CoordenatorID;
		
		private int _CourseStatusID;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<TrainingCourseSchedule> _TrainingCourseSchedules;
		
		private EntitySet<TrainingCourseQuestion> _TrainingCourseQuestions;
		
		private EntitySet<CourseFeedBack> _CourseFeedBacks;
		
		private EntitySet<TrainingCourseEnrollment> _TrainingCourseEnrollments;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Period> _Period;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<TrainingCourseStatus> _TrainingCourseStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingCourseIdChanging(long value);
    partial void OnTrainingCourseIdChanged();
    partial void OnCourseNoChanging(string value);
    partial void OnCourseNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMaterialIDChanging(System.Nullable<long> value);
    partial void OnMaterialIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnPeriodIDChanging(System.Nullable<int> value);
    partial void OnPeriodIDChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnLunchChanging(bool value);
    partial void OnLunchChanged();
    partial void OnRefreshmentChanging(bool value);
    partial void OnRefreshmentChanged();
    partial void OnTransportationChanging(bool value);
    partial void OnTransportationChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCoordenatorIDChanging(int value);
    partial void OnCoordenatorIDChanged();
    partial void OnCourseStatusIDChanging(int value);
    partial void OnCourseStatusIDChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public TrainingCourse()
		{
			this._TrainingCourseSchedules = new EntitySet<TrainingCourseSchedule>(new Action<TrainingCourseSchedule>(this.attach_TrainingCourseSchedules), new Action<TrainingCourseSchedule>(this.detach_TrainingCourseSchedules));
			this._TrainingCourseQuestions = new EntitySet<TrainingCourseQuestion>(new Action<TrainingCourseQuestion>(this.attach_TrainingCourseQuestions), new Action<TrainingCourseQuestion>(this.detach_TrainingCourseQuestions));
			this._CourseFeedBacks = new EntitySet<CourseFeedBack>(new Action<CourseFeedBack>(this.attach_CourseFeedBacks), new Action<CourseFeedBack>(this.detach_CourseFeedBacks));
			this._TrainingCourseEnrollments = new EntitySet<TrainingCourseEnrollment>(new Action<TrainingCourseEnrollment>(this.attach_TrainingCourseEnrollments), new Action<TrainingCourseEnrollment>(this.detach_TrainingCourseEnrollments));
			this._Employee = default(EntityRef<Employee>);
			this._Document = default(EntityRef<Document>);
			this._Period = default(EntityRef<Period>);
			this._RecordMode = default(EntityRef<RecordMode>);
			this._TrainingCourseStatus = default(EntityRef<TrainingCourseStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCourseId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TrainingCourseId
		{
			get
			{
				return this._TrainingCourseId;
			}
			set
			{
				if ((this._TrainingCourseId != value))
				{
					this.OnTrainingCourseIdChanging(value);
					this.SendPropertyChanging();
					this._TrainingCourseId = value;
					this.SendPropertyChanged("TrainingCourseId");
					this.OnTrainingCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CourseNo
		{
			get
			{
				return this._CourseNo;
			}
			set
			{
				if ((this._CourseNo != value))
				{
					this.OnCourseNoChanging(value);
					this.SendPropertyChanging();
					this._CourseNo = value;
					this.SendPropertyChanged("CourseNo");
					this.OnCourseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="BigInt")]
		public System.Nullable<long> MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int")]
		public System.Nullable<int> PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					if (this._Period.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lunch", DbType="Bit NOT NULL")]
		public bool Lunch
		{
			get
			{
				return this._Lunch;
			}
			set
			{
				if ((this._Lunch != value))
				{
					this.OnLunchChanging(value);
					this.SendPropertyChanging();
					this._Lunch = value;
					this.SendPropertyChanged("Lunch");
					this.OnLunchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refreshment", DbType="Bit NOT NULL")]
		public bool Refreshment
		{
			get
			{
				return this._Refreshment;
			}
			set
			{
				if ((this._Refreshment != value))
				{
					this.OnRefreshmentChanging(value);
					this.SendPropertyChanging();
					this._Refreshment = value;
					this.SendPropertyChanged("Refreshment");
					this.OnRefreshmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transportation", DbType="Bit NOT NULL")]
		public bool Transportation
		{
			get
			{
				return this._Transportation;
			}
			set
			{
				if ((this._Transportation != value))
				{
					this.OnTransportationChanging(value);
					this.SendPropertyChanging();
					this._Transportation = value;
					this.SendPropertyChanged("Transportation");
					this.OnTransportationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoordenatorID", DbType="Int NOT NULL")]
		public int CoordenatorID
		{
			get
			{
				return this._CoordenatorID;
			}
			set
			{
				if ((this._CoordenatorID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoordenatorIDChanging(value);
					this.SendPropertyChanging();
					this._CoordenatorID = value;
					this.SendPropertyChanged("CoordenatorID");
					this.OnCoordenatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseStatusID", DbType="Int NOT NULL")]
		public int CourseStatusID
		{
			get
			{
				return this._CourseStatusID;
			}
			set
			{
				if ((this._CourseStatusID != value))
				{
					if (this._TrainingCourseStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CourseStatusID = value;
					this.SendPropertyChanged("CourseStatusID");
					this.OnCourseStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseSchedule", Storage="_TrainingCourseSchedules", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId")]
		public EntitySet<TrainingCourseSchedule> TrainingCourseSchedules
		{
			get
			{
				return this._TrainingCourseSchedules;
			}
			set
			{
				this._TrainingCourseSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseQuestion", Storage="_TrainingCourseQuestions", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId")]
		public EntitySet<TrainingCourseQuestion> TrainingCourseQuestions
		{
			get
			{
				return this._TrainingCourseQuestions;
			}
			set
			{
				this._TrainingCourseQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_CourseFeedBack", Storage="_CourseFeedBacks", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId")]
		public EntitySet<CourseFeedBack> CourseFeedBacks
		{
			get
			{
				return this._CourseFeedBacks;
			}
			set
			{
				this._CourseFeedBacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourse_TrainingCourseEnrollment", Storage="_TrainingCourseEnrollments", ThisKey="TrainingCourseId", OtherKey="TrainingCourseId")]
		public EntitySet<TrainingCourseEnrollment> TrainingCourseEnrollments
		{
			get
			{
				return this._TrainingCourseEnrollments;
			}
			set
			{
				this._TrainingCourseEnrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TrainingCourse", Storage="_Employee", ThisKey="CoordenatorID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TrainingCourses.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TrainingCourses.Add(this);
						this._CoordenatorID = value.EmployeeID;
					}
					else
					{
						this._CoordenatorID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_TrainingCourse", Storage="_Document", ThisKey="MaterialID", OtherKey="DocumentId", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.TrainingCourses.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.TrainingCourses.Add(this);
						this._MaterialID = value.DocumentId;
					}
					else
					{
						this._MaterialID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_TrainingCourse", Storage="_Period", ThisKey="PeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period
		{
			get
			{
				return this._Period.Entity;
			}
			set
			{
				Period previousValue = this._Period.Entity;
				if (((previousValue != value) 
							|| (this._Period.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period.Entity = null;
						previousValue.TrainingCourses.Remove(this);
					}
					this._Period.Entity = value;
					if ((value != null))
					{
						value.TrainingCourses.Add(this);
						this._PeriodID = value.PeriodID;
					}
					else
					{
						this._PeriodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Period");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_TrainingCourse", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.TrainingCourses.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.TrainingCourses.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingCourseStatus_TrainingCourse", Storage="_TrainingCourseStatus", ThisKey="CourseStatusID", OtherKey="TrainingStatusID", IsForeignKey=true)]
		public TrainingCourseStatus TrainingCourseStatus
		{
			get
			{
				return this._TrainingCourseStatus.Entity;
			}
			set
			{
				TrainingCourseStatus previousValue = this._TrainingCourseStatus.Entity;
				if (((previousValue != value) 
							|| (this._TrainingCourseStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingCourseStatus.Entity = null;
						previousValue.TrainingCourses.Remove(this);
					}
					this._TrainingCourseStatus.Entity = value;
					if ((value != null))
					{
						value.TrainingCourses.Add(this);
						this._CourseStatusID = value.TrainingStatusID;
					}
					else
					{
						this._CourseStatusID = default(int);
					}
					this.SendPropertyChanged("TrainingCourseStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = this;
		}
		
		private void detach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = null;
		}
		
		private void attach_TrainingCourseQuestions(TrainingCourseQuestion entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = this;
		}
		
		private void detach_TrainingCourseQuestions(TrainingCourseQuestion entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = null;
		}
		
		private void attach_CourseFeedBacks(CourseFeedBack entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = this;
		}
		
		private void detach_CourseFeedBacks(CourseFeedBack entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = null;
		}
		
		private void attach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = this;
		}
		
		private void detach_TrainingCourseEnrollments(TrainingCourseEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.TrainingCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="QualityRecords.QualityRecordStatus")]
	public partial class QualityRecordStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordStatusID;
		
		private string _RecordStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Record> _Records;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordStatusIDChanging(int value);
    partial void OnRecordStatusIDChanged();
    partial void OnRecordStatusChanging(string value);
    partial void OnRecordStatusChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public QualityRecordStatus()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordStatusID
		{
			get
			{
				return this._RecordStatusID;
			}
			set
			{
				if ((this._RecordStatusID != value))
				{
					this.OnRecordStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RecordStatusID = value;
					this.SendPropertyChanged("RecordStatusID");
					this.OnRecordStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordStatus", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RecordStatus
		{
			get
			{
				return this._RecordStatus;
			}
			set
			{
				if ((this._RecordStatus != value))
				{
					this.OnRecordStatusChanging(value);
					this.SendPropertyChanging();
					this._RecordStatus = value;
					this.SendPropertyChanged("RecordStatus");
					this.OnRecordStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityRecordStatus_Record", Storage="_Records", ThisKey="RecordStatusID", OtherKey="RecordStatusID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.QualityRecordStatus = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.QualityRecordStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="QualityRecords.Record")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private string _RecordNo;
		
		private string _Title;
		
		private long _RecordFileTypeID;
		
		private string _RecordFileURL;
		
		private System.Data.Linq.Binary _RecordFile;
		
		private string _RecordFileName;
		
		private int _DepartmentID;
		
		private int _OriginatorID;
		
		private int _OwnerID;
		
		private System.DateTime _IssueDate;
		
		private System.Nullable<System.DateTime> _ReviewDate;
		
		private int _RetentionDuration;
		
		private int _ReviewDuration;
		
		private int _ReviewPeriodID;
		
		private int _RetentionPeriodID;
		
		private string _Remarks;
		
		private int _RecordStatusID;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<DocumentFileType> _DocumentFileType;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<QualityRecordStatus> _QualityRecordStatus;
		
		private EntityRef<Period> _Period;
		
		private EntityRef<Period> _Period1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnRecordNoChanging(string value);
    partial void OnRecordNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRecordFileTypeIDChanging(long value);
    partial void OnRecordFileTypeIDChanged();
    partial void OnRecordFileURLChanging(string value);
    partial void OnRecordFileURLChanged();
    partial void OnRecordFileChanging(System.Data.Linq.Binary value);
    partial void OnRecordFileChanged();
    partial void OnRecordFileNameChanging(string value);
    partial void OnRecordFileNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnOriginatorIDChanging(int value);
    partial void OnOriginatorIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviewDateChanged();
    partial void OnRetentionDurationChanging(int value);
    partial void OnRetentionDurationChanged();
    partial void OnReviewDurationChanging(int value);
    partial void OnReviewDurationChanged();
    partial void OnReviewPeriodIDChanging(int value);
    partial void OnReviewPeriodIDChanged();
    partial void OnRetentionPeriodIDChanging(int value);
    partial void OnRetentionPeriodIDChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnRecordStatusIDChanging(int value);
    partial void OnRecordStatusIDChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Record()
		{
			this._DocumentFileType = default(EntityRef<DocumentFileType>);
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._RecordMode = default(EntityRef<RecordMode>);
			this._QualityRecordStatus = default(EntityRef<QualityRecordStatus>);
			this._Period = default(EntityRef<Period>);
			this._Period1 = default(EntityRef<Period>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RecordNo
		{
			get
			{
				return this._RecordNo;
			}
			set
			{
				if ((this._RecordNo != value))
				{
					this.OnRecordNoChanging(value);
					this.SendPropertyChanging();
					this._RecordNo = value;
					this.SendPropertyChanged("RecordNo");
					this.OnRecordNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordFileTypeID", DbType="BigInt NOT NULL")]
		public long RecordFileTypeID
		{
			get
			{
				return this._RecordFileTypeID;
			}
			set
			{
				if ((this._RecordFileTypeID != value))
				{
					if (this._DocumentFileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordFileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordFileTypeID = value;
					this.SendPropertyChanged("RecordFileTypeID");
					this.OnRecordFileTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordFileURL", DbType="NVarChar(MAX)")]
		public string RecordFileURL
		{
			get
			{
				return this._RecordFileURL;
			}
			set
			{
				if ((this._RecordFileURL != value))
				{
					this.OnRecordFileURLChanging(value);
					this.SendPropertyChanging();
					this._RecordFileURL = value;
					this.SendPropertyChanged("RecordFileURL");
					this.OnRecordFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordFile", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecordFile
		{
			get
			{
				return this._RecordFile;
			}
			set
			{
				if ((this._RecordFile != value))
				{
					this.OnRecordFileChanging(value);
					this.SendPropertyChanging();
					this._RecordFile = value;
					this.SendPropertyChanged("RecordFile");
					this.OnRecordFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordFileName", DbType="NVarChar(300)")]
		public string RecordFileName
		{
			get
			{
				return this._RecordFileName;
			}
			set
			{
				if ((this._RecordFileName != value))
				{
					this.OnRecordFileNameChanging(value);
					this.SendPropertyChanging();
					this._RecordFileName = value;
					this.SendPropertyChanged("RecordFileName");
					this.OnRecordFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginatorID", DbType="Int NOT NULL")]
		public int OriginatorID
		{
			get
			{
				return this._OriginatorID;
			}
			set
			{
				if ((this._OriginatorID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOriginatorIDChanging(value);
					this.SendPropertyChanging();
					this._OriginatorID = value;
					this.SendPropertyChanged("OriginatorID");
					this.OnOriginatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetentionDuration", DbType="Int NOT NULL")]
		public int RetentionDuration
		{
			get
			{
				return this._RetentionDuration;
			}
			set
			{
				if ((this._RetentionDuration != value))
				{
					this.OnRetentionDurationChanging(value);
					this.SendPropertyChanging();
					this._RetentionDuration = value;
					this.SendPropertyChanged("RetentionDuration");
					this.OnRetentionDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDuration", DbType="Int NOT NULL")]
		public int ReviewDuration
		{
			get
			{
				return this._ReviewDuration;
			}
			set
			{
				if ((this._ReviewDuration != value))
				{
					this.OnReviewDurationChanging(value);
					this.SendPropertyChanging();
					this._ReviewDuration = value;
					this.SendPropertyChanged("ReviewDuration");
					this.OnReviewDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewPeriodID", DbType="Int NOT NULL")]
		public int ReviewPeriodID
		{
			get
			{
				return this._ReviewPeriodID;
			}
			set
			{
				if ((this._ReviewPeriodID != value))
				{
					if (this._Period1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewPeriodID = value;
					this.SendPropertyChanged("ReviewPeriodID");
					this.OnReviewPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetentionPeriodID", DbType="Int NOT NULL")]
		public int RetentionPeriodID
		{
			get
			{
				return this._RetentionPeriodID;
			}
			set
			{
				if ((this._RetentionPeriodID != value))
				{
					if (this._Period.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRetentionPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._RetentionPeriodID = value;
					this.SendPropertyChanged("RetentionPeriodID");
					this.OnRetentionPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordStatusID", DbType="Int NOT NULL")]
		public int RecordStatusID
		{
			get
			{
				return this._RecordStatusID;
			}
			set
			{
				if ((this._RecordStatusID != value))
				{
					if (this._QualityRecordStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RecordStatusID = value;
					this.SendPropertyChanged("RecordStatusID");
					this.OnRecordStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFileType_Record", Storage="_DocumentFileType", ThisKey="RecordFileTypeID", OtherKey="DocumentFileTypeId", IsForeignKey=true)]
		public DocumentFileType DocumentFileType
		{
			get
			{
				return this._DocumentFileType.Entity;
			}
			set
			{
				DocumentFileType previousValue = this._DocumentFileType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFileType.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._DocumentFileType.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._RecordFileTypeID = value.DocumentFileTypeId;
					}
					else
					{
						this._RecordFileTypeID = default(long);
					}
					this.SendPropertyChanged("DocumentFileType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Record", Storage="_OrganizationUnit", ThisKey="DepartmentID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._DepartmentID = value.UnitID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Record", Storage="_Employee", ThisKey="OriginatorID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._OriginatorID = value.EmployeeID;
					}
					else
					{
						this._OriginatorID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Record1", Storage="_Employee1", ThisKey="OwnerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Records1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Records1.Add(this);
						this._OwnerID = value.EmployeeID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Record", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityRecordStatus_Record", Storage="_QualityRecordStatus", ThisKey="RecordStatusID", OtherKey="RecordStatusID", IsForeignKey=true)]
		public QualityRecordStatus QualityRecordStatus
		{
			get
			{
				return this._QualityRecordStatus.Entity;
			}
			set
			{
				QualityRecordStatus previousValue = this._QualityRecordStatus.Entity;
				if (((previousValue != value) 
							|| (this._QualityRecordStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityRecordStatus.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._QualityRecordStatus.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._RecordStatusID = value.RecordStatusID;
					}
					else
					{
						this._RecordStatusID = default(int);
					}
					this.SendPropertyChanged("QualityRecordStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Record", Storage="_Period", ThisKey="RetentionPeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period
		{
			get
			{
				return this._Period.Entity;
			}
			set
			{
				Period previousValue = this._Period.Entity;
				if (((previousValue != value) 
							|| (this._Period.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Period.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._RetentionPeriodID = value.PeriodID;
					}
					else
					{
						this._RetentionPeriodID = default(int);
					}
					this.SendPropertyChanged("Period");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Record1", Storage="_Period1", ThisKey="ReviewPeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period1
		{
			get
			{
				return this._Period1.Entity;
			}
			set
			{
				Period previousValue = this._Period1.Entity;
				if (((previousValue != value) 
							|| (this._Period1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period1.Entity = null;
						previousValue.Records1.Remove(this);
					}
					this._Period1.Entity = value;
					if ((value != null))
					{
						value.Records1.Add(this);
						this._ReviewPeriodID = value.PeriodID;
					}
					else
					{
						this._ReviewPeriodID = default(int);
					}
					this.SendPropertyChanged("Period1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.Risk")]
	public partial class Risk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RiskId;
		
		private string _RiskNo;
		
		private string _RiskName;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _AssessedDate;
		
		private int _RiskTypeID;
		
		private int _RiskModeID;
		
		private int _RiskCategoryID;
		
		private long _RiskStatusID;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<long> _RiskProbabilityID;
		
		private System.Nullable<int> _SeverityID;
		
		private System.Nullable<int> _QOSImpactID;
		
		private System.Nullable<int> _CostImpactID;
		
		private System.Nullable<int> _TimeImpactID;
		
		private System.Nullable<int> _CostCentre1ID;
		
		private System.Nullable<int> _CostCentre2ID;
		
		private System.Nullable<System.DateTime> _ClosureDate;
		
		private System.DateTime _RegisterDate;
		
		private int _OwnerID;
		
		private System.Nullable<decimal> _AdjustedImpactCost;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<int> _SeverityEnvironmentID;
		
		private System.Nullable<int> _SeverityHumanID;
		
		private System.Nullable<int> _OperationalComplexityID;
		
		private System.Nullable<int> _RegularityID;
		
		private System.Nullable<int> _NusianceID;
		
		private System.Nullable<int> _InterestedPartyID;
		
		private System.Nullable<int> _LackInformationID;
		
		private System.Nullable<int> _PolicyIssueID;
		
		private decimal _Score;
		
		private System.Nullable<decimal> _SIR;
		
		private System.Nullable<long> _CiticalLimitSignID;
		
		private System.Nullable<decimal> _CriticalLimit;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RiskMitigationAction> _RiskMitigationActions;
		
		private EntityRef<RiskImpact> _RiskImpact;
		
		private EntityRef<ISO14001AssessmentGuideline> _ISO14001AssessmentGuideline;
		
		private EntityRef<ISO14001AssessmentGuideline> _ISO14001AssessmentGuideline1;
		
		private EntityRef<ISO14001AssessmentGuideline> _ISO14001AssessmentGuideline2;
		
		private EntityRef<ISO14001AssessmentGuideline> _ISO14001AssessmentGuideline3;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<ISO14001AssessmentGuideline> _ISO14001AssessmentGuideline4;
		
		private EntityRef<ProjectInformation> _ProjectInformation;
		
		private EntityRef<RiskImpact> _RiskImpact1;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<ISO14001AssessmentGuideline> _ISO14001AssessmentGuideline5;
		
		private EntityRef<RiskCategory> _RiskCategory;
		
		private EntityRef<RiskMode> _RiskMode;
		
		private EntityRef<RiskProbability> _RiskProbability;
		
		private EntityRef<RiskStatus> _RiskStatus;
		
		private EntityRef<RiskType> _RiskType;
		
		private EntityRef<Severity> _Severity;
		
		private EntityRef<Severity> _Severity1;
		
		private EntityRef<Severity> _Severity2;
		
		private EntityRef<AT_RAGSign> _AT_RAGSign;
		
		private EntityRef<RiskImpact> _RiskImpact2;
		
		private EntityRef<CostCentre> _CostCentre;
		
		private EntityRef<CostCentre> _CostCentre1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskIdChanging(long value);
    partial void OnRiskIdChanged();
    partial void OnRiskNoChanging(string value);
    partial void OnRiskNoChanged();
    partial void OnRiskNameChanging(string value);
    partial void OnRiskNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAssessedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssessedDateChanged();
    partial void OnRiskTypeIDChanging(int value);
    partial void OnRiskTypeIDChanged();
    partial void OnRiskModeIDChanging(int value);
    partial void OnRiskModeIDChanged();
    partial void OnRiskCategoryIDChanging(int value);
    partial void OnRiskCategoryIDChanged();
    partial void OnRiskStatusIDChanging(long value);
    partial void OnRiskStatusIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnRiskProbabilityIDChanging(System.Nullable<long> value);
    partial void OnRiskProbabilityIDChanged();
    partial void OnSeverityIDChanging(System.Nullable<int> value);
    partial void OnSeverityIDChanged();
    partial void OnQOSImpactIDChanging(System.Nullable<int> value);
    partial void OnQOSImpactIDChanged();
    partial void OnCostImpactIDChanging(System.Nullable<int> value);
    partial void OnCostImpactIDChanged();
    partial void OnTimeImpactIDChanging(System.Nullable<int> value);
    partial void OnTimeImpactIDChanged();
    partial void OnCostCentre1IDChanging(System.Nullable<int> value);
    partial void OnCostCentre1IDChanged();
    partial void OnCostCentre2IDChanging(System.Nullable<int> value);
    partial void OnCostCentre2IDChanged();
    partial void OnClosureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosureDateChanged();
    partial void OnRegisterDateChanging(System.DateTime value);
    partial void OnRegisterDateChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnAdjustedImpactCostChanging(System.Nullable<decimal> value);
    partial void OnAdjustedImpactCostChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnSeverityEnvironmentIDChanging(System.Nullable<int> value);
    partial void OnSeverityEnvironmentIDChanged();
    partial void OnSeverityHumanIDChanging(System.Nullable<int> value);
    partial void OnSeverityHumanIDChanged();
    partial void OnOperationalComplexityIDChanging(System.Nullable<int> value);
    partial void OnOperationalComplexityIDChanged();
    partial void OnRegularityIDChanging(System.Nullable<int> value);
    partial void OnRegularityIDChanged();
    partial void OnNusianceIDChanging(System.Nullable<int> value);
    partial void OnNusianceIDChanged();
    partial void OnInterestedPartyIDChanging(System.Nullable<int> value);
    partial void OnInterestedPartyIDChanged();
    partial void OnLackInformationIDChanging(System.Nullable<int> value);
    partial void OnLackInformationIDChanged();
    partial void OnPolicyIssueIDChanging(System.Nullable<int> value);
    partial void OnPolicyIssueIDChanged();
    partial void OnScoreChanging(decimal value);
    partial void OnScoreChanged();
    partial void OnSIRChanging(System.Nullable<decimal> value);
    partial void OnSIRChanged();
    partial void OnCiticalLimitSignIDChanging(System.Nullable<long> value);
    partial void OnCiticalLimitSignIDChanged();
    partial void OnCriticalLimitChanging(System.Nullable<decimal> value);
    partial void OnCriticalLimitChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Risk()
		{
			this._RiskMitigationActions = new EntitySet<RiskMitigationAction>(new Action<RiskMitigationAction>(this.attach_RiskMitigationActions), new Action<RiskMitigationAction>(this.detach_RiskMitigationActions));
			this._RiskImpact = default(EntityRef<RiskImpact>);
			this._ISO14001AssessmentGuideline = default(EntityRef<ISO14001AssessmentGuideline>);
			this._ISO14001AssessmentGuideline1 = default(EntityRef<ISO14001AssessmentGuideline>);
			this._ISO14001AssessmentGuideline2 = default(EntityRef<ISO14001AssessmentGuideline>);
			this._ISO14001AssessmentGuideline3 = default(EntityRef<ISO14001AssessmentGuideline>);
			this._Employee = default(EntityRef<Employee>);
			this._ISO14001AssessmentGuideline4 = default(EntityRef<ISO14001AssessmentGuideline>);
			this._ProjectInformation = default(EntityRef<ProjectInformation>);
			this._RiskImpact1 = default(EntityRef<RiskImpact>);
			this._RecordMode = default(EntityRef<RecordMode>);
			this._ISO14001AssessmentGuideline5 = default(EntityRef<ISO14001AssessmentGuideline>);
			this._RiskCategory = default(EntityRef<RiskCategory>);
			this._RiskMode = default(EntityRef<RiskMode>);
			this._RiskProbability = default(EntityRef<RiskProbability>);
			this._RiskStatus = default(EntityRef<RiskStatus>);
			this._RiskType = default(EntityRef<RiskType>);
			this._Severity = default(EntityRef<Severity>);
			this._Severity1 = default(EntityRef<Severity>);
			this._Severity2 = default(EntityRef<Severity>);
			this._AT_RAGSign = default(EntityRef<AT_RAGSign>);
			this._RiskImpact2 = default(EntityRef<RiskImpact>);
			this._CostCentre = default(EntityRef<CostCentre>);
			this._CostCentre1 = default(EntityRef<CostCentre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RiskId
		{
			get
			{
				return this._RiskId;
			}
			set
			{
				if ((this._RiskId != value))
				{
					this.OnRiskIdChanging(value);
					this.SendPropertyChanging();
					this._RiskId = value;
					this.SendPropertyChanged("RiskId");
					this.OnRiskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RiskNo
		{
			get
			{
				return this._RiskNo;
			}
			set
			{
				if ((this._RiskNo != value))
				{
					this.OnRiskNoChanging(value);
					this.SendPropertyChanging();
					this._RiskNo = value;
					this.SendPropertyChanged("RiskNo");
					this.OnRiskNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RiskName
		{
			get
			{
				return this._RiskName;
			}
			set
			{
				if ((this._RiskName != value))
				{
					this.OnRiskNameChanging(value);
					this.SendPropertyChanging();
					this._RiskName = value;
					this.SendPropertyChanged("RiskName");
					this.OnRiskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AssessedDate
		{
			get
			{
				return this._AssessedDate;
			}
			set
			{
				if ((this._AssessedDate != value))
				{
					this.OnAssessedDateChanging(value);
					this.SendPropertyChanging();
					this._AssessedDate = value;
					this.SendPropertyChanged("AssessedDate");
					this.OnAssessedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskTypeID", DbType="Int NOT NULL")]
		public int RiskTypeID
		{
			get
			{
				return this._RiskTypeID;
			}
			set
			{
				if ((this._RiskTypeID != value))
				{
					if (this._RiskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskTypeID = value;
					this.SendPropertyChanged("RiskTypeID");
					this.OnRiskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskModeID", DbType="Int NOT NULL")]
		public int RiskModeID
		{
			get
			{
				return this._RiskModeID;
			}
			set
			{
				if ((this._RiskModeID != value))
				{
					if (this._RiskMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskModeIDChanging(value);
					this.SendPropertyChanging();
					this._RiskModeID = value;
					this.SendPropertyChanged("RiskModeID");
					this.OnRiskModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskCategoryID", DbType="Int NOT NULL")]
		public int RiskCategoryID
		{
			get
			{
				return this._RiskCategoryID;
			}
			set
			{
				if ((this._RiskCategoryID != value))
				{
					if (this._RiskCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RiskCategoryID = value;
					this.SendPropertyChanged("RiskCategoryID");
					this.OnRiskCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskStatusID", DbType="BigInt NOT NULL")]
		public long RiskStatusID
		{
			get
			{
				return this._RiskStatusID;
			}
			set
			{
				if ((this._RiskStatusID != value))
				{
					if (this._RiskStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RiskStatusID = value;
					this.SendPropertyChanged("RiskStatusID");
					this.OnRiskStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskProbabilityID", DbType="BigInt")]
		public System.Nullable<long> RiskProbabilityID
		{
			get
			{
				return this._RiskProbabilityID;
			}
			set
			{
				if ((this._RiskProbabilityID != value))
				{
					if (this._RiskProbability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskProbabilityIDChanging(value);
					this.SendPropertyChanging();
					this._RiskProbabilityID = value;
					this.SendPropertyChanged("RiskProbabilityID");
					this.OnRiskProbabilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeverityID", DbType="Int")]
		public System.Nullable<int> SeverityID
		{
			get
			{
				return this._SeverityID;
			}
			set
			{
				if ((this._SeverityID != value))
				{
					if (this._Severity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeverityIDChanging(value);
					this.SendPropertyChanging();
					this._SeverityID = value;
					this.SendPropertyChanged("SeverityID");
					this.OnSeverityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOSImpactID", DbType="Int")]
		public System.Nullable<int> QOSImpactID
		{
			get
			{
				return this._QOSImpactID;
			}
			set
			{
				if ((this._QOSImpactID != value))
				{
					if (this._RiskImpact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQOSImpactIDChanging(value);
					this.SendPropertyChanging();
					this._QOSImpactID = value;
					this.SendPropertyChanged("QOSImpactID");
					this.OnQOSImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostImpactID", DbType="Int")]
		public System.Nullable<int> CostImpactID
		{
			get
			{
				return this._CostImpactID;
			}
			set
			{
				if ((this._CostImpactID != value))
				{
					if (this._RiskImpact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostImpactIDChanging(value);
					this.SendPropertyChanging();
					this._CostImpactID = value;
					this.SendPropertyChanged("CostImpactID");
					this.OnCostImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeImpactID", DbType="Int")]
		public System.Nullable<int> TimeImpactID
		{
			get
			{
				return this._TimeImpactID;
			}
			set
			{
				if ((this._TimeImpactID != value))
				{
					if (this._RiskImpact2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeImpactIDChanging(value);
					this.SendPropertyChanging();
					this._TimeImpactID = value;
					this.SendPropertyChanged("TimeImpactID");
					this.OnTimeImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCentre1ID", DbType="Int")]
		public System.Nullable<int> CostCentre1ID
		{
			get
			{
				return this._CostCentre1ID;
			}
			set
			{
				if ((this._CostCentre1ID != value))
				{
					if (this._CostCentre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCentre1IDChanging(value);
					this.SendPropertyChanging();
					this._CostCentre1ID = value;
					this.SendPropertyChanged("CostCentre1ID");
					this.OnCostCentre1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCentre2ID", DbType="Int")]
		public System.Nullable<int> CostCentre2ID
		{
			get
			{
				return this._CostCentre2ID;
			}
			set
			{
				if ((this._CostCentre2ID != value))
				{
					if (this._CostCentre1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCentre2IDChanging(value);
					this.SendPropertyChanging();
					this._CostCentre2ID = value;
					this.SendPropertyChanged("CostCentre2ID");
					this.OnCostCentre2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosureDate
		{
			get
			{
				return this._ClosureDate;
			}
			set
			{
				if ((this._ClosureDate != value))
				{
					this.OnClosureDateChanging(value);
					this.SendPropertyChanging();
					this._ClosureDate = value;
					this.SendPropertyChanged("ClosureDate");
					this.OnClosureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this.OnRegisterDateChanging(value);
					this.SendPropertyChanging();
					this._RegisterDate = value;
					this.SendPropertyChanged("RegisterDate");
					this.OnRegisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustedImpactCost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AdjustedImpactCost
		{
			get
			{
				return this._AdjustedImpactCost;
			}
			set
			{
				if ((this._AdjustedImpactCost != value))
				{
					this.OnAdjustedImpactCostChanging(value);
					this.SendPropertyChanging();
					this._AdjustedImpactCost = value;
					this.SendPropertyChanged("AdjustedImpactCost");
					this.OnAdjustedImpactCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeverityEnvironmentID", DbType="Int")]
		public System.Nullable<int> SeverityEnvironmentID
		{
			get
			{
				return this._SeverityEnvironmentID;
			}
			set
			{
				if ((this._SeverityEnvironmentID != value))
				{
					if (this._Severity1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeverityEnvironmentIDChanging(value);
					this.SendPropertyChanging();
					this._SeverityEnvironmentID = value;
					this.SendPropertyChanged("SeverityEnvironmentID");
					this.OnSeverityEnvironmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeverityHumanID", DbType="Int")]
		public System.Nullable<int> SeverityHumanID
		{
			get
			{
				return this._SeverityHumanID;
			}
			set
			{
				if ((this._SeverityHumanID != value))
				{
					if (this._Severity2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeverityHumanIDChanging(value);
					this.SendPropertyChanging();
					this._SeverityHumanID = value;
					this.SendPropertyChanged("SeverityHumanID");
					this.OnSeverityHumanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationalComplexityID", DbType="Int")]
		public System.Nullable<int> OperationalComplexityID
		{
			get
			{
				return this._OperationalComplexityID;
			}
			set
			{
				if ((this._OperationalComplexityID != value))
				{
					if (this._ISO14001AssessmentGuideline3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationalComplexityIDChanging(value);
					this.SendPropertyChanging();
					this._OperationalComplexityID = value;
					this.SendPropertyChanged("OperationalComplexityID");
					this.OnOperationalComplexityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularityID", DbType="Int")]
		public System.Nullable<int> RegularityID
		{
			get
			{
				return this._RegularityID;
			}
			set
			{
				if ((this._RegularityID != value))
				{
					if (this._ISO14001AssessmentGuideline5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularityIDChanging(value);
					this.SendPropertyChanging();
					this._RegularityID = value;
					this.SendPropertyChanged("RegularityID");
					this.OnRegularityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NusianceID", DbType="Int")]
		public System.Nullable<int> NusianceID
		{
			get
			{
				return this._NusianceID;
			}
			set
			{
				if ((this._NusianceID != value))
				{
					if (this._ISO14001AssessmentGuideline2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNusianceIDChanging(value);
					this.SendPropertyChanging();
					this._NusianceID = value;
					this.SendPropertyChanged("NusianceID");
					this.OnNusianceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestedPartyID", DbType="Int")]
		public System.Nullable<int> InterestedPartyID
		{
			get
			{
				return this._InterestedPartyID;
			}
			set
			{
				if ((this._InterestedPartyID != value))
				{
					if (this._ISO14001AssessmentGuideline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInterestedPartyIDChanging(value);
					this.SendPropertyChanging();
					this._InterestedPartyID = value;
					this.SendPropertyChanged("InterestedPartyID");
					this.OnInterestedPartyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LackInformationID", DbType="Int")]
		public System.Nullable<int> LackInformationID
		{
			get
			{
				return this._LackInformationID;
			}
			set
			{
				if ((this._LackInformationID != value))
				{
					if (this._ISO14001AssessmentGuideline1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLackInformationIDChanging(value);
					this.SendPropertyChanging();
					this._LackInformationID = value;
					this.SendPropertyChanged("LackInformationID");
					this.OnLackInformationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyIssueID", DbType="Int")]
		public System.Nullable<int> PolicyIssueID
		{
			get
			{
				return this._PolicyIssueID;
			}
			set
			{
				if ((this._PolicyIssueID != value))
				{
					if (this._ISO14001AssessmentGuideline4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicyIssueIDChanging(value);
					this.SendPropertyChanging();
					this._PolicyIssueID = value;
					this.SendPropertyChanged("PolicyIssueID");
					this.OnPolicyIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(18,2) NOT NULL")]
		public decimal Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIR", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SIR
		{
			get
			{
				return this._SIR;
			}
			set
			{
				if ((this._SIR != value))
				{
					this.OnSIRChanging(value);
					this.SendPropertyChanging();
					this._SIR = value;
					this.SendPropertyChanged("SIR");
					this.OnSIRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CiticalLimitSignID", DbType="BigInt")]
		public System.Nullable<long> CiticalLimitSignID
		{
			get
			{
				return this._CiticalLimitSignID;
			}
			set
			{
				if ((this._CiticalLimitSignID != value))
				{
					if (this._AT_RAGSign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCiticalLimitSignIDChanging(value);
					this.SendPropertyChanging();
					this._CiticalLimitSignID = value;
					this.SendPropertyChanged("CiticalLimitSignID");
					this.OnCiticalLimitSignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CriticalLimit", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CriticalLimit
		{
			get
			{
				return this._CriticalLimit;
			}
			set
			{
				if ((this._CriticalLimit != value))
				{
					this.OnCriticalLimitChanging(value);
					this.SendPropertyChanging();
					this._CriticalLimit = value;
					this.SendPropertyChanged("CriticalLimit");
					this.OnCriticalLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Risk_RiskMitigationAction", Storage="_RiskMitigationActions", ThisKey="RiskId", OtherKey="RiskID")]
		public EntitySet<RiskMitigationAction> RiskMitigationActions
		{
			get
			{
				return this._RiskMitigationActions;
			}
			set
			{
				this._RiskMitigationActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskImpact_Risk", Storage="_RiskImpact", ThisKey="CostImpactID", OtherKey="RiskImpactID", IsForeignKey=true)]
		public RiskImpact RiskImpact
		{
			get
			{
				return this._RiskImpact.Entity;
			}
			set
			{
				RiskImpact previousValue = this._RiskImpact.Entity;
				if (((previousValue != value) 
							|| (this._RiskImpact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskImpact.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskImpact.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._CostImpactID = value.RiskImpactID;
					}
					else
					{
						this._CostImpactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RiskImpact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk", Storage="_ISO14001AssessmentGuideline", ThisKey="InterestedPartyID", OtherKey="AssessmentGuidelineID", IsForeignKey=true)]
		public ISO14001AssessmentGuideline ISO14001AssessmentGuideline
		{
			get
			{
				return this._ISO14001AssessmentGuideline.Entity;
			}
			set
			{
				ISO14001AssessmentGuideline previousValue = this._ISO14001AssessmentGuideline.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentGuideline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentGuideline.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._ISO14001AssessmentGuideline.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._InterestedPartyID = value.AssessmentGuidelineID;
					}
					else
					{
						this._InterestedPartyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISO14001AssessmentGuideline");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk1", Storage="_ISO14001AssessmentGuideline1", ThisKey="LackInformationID", OtherKey="AssessmentGuidelineID", IsForeignKey=true)]
		public ISO14001AssessmentGuideline ISO14001AssessmentGuideline1
		{
			get
			{
				return this._ISO14001AssessmentGuideline1.Entity;
			}
			set
			{
				ISO14001AssessmentGuideline previousValue = this._ISO14001AssessmentGuideline1.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentGuideline1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentGuideline1.Entity = null;
						previousValue.Risks1.Remove(this);
					}
					this._ISO14001AssessmentGuideline1.Entity = value;
					if ((value != null))
					{
						value.Risks1.Add(this);
						this._LackInformationID = value.AssessmentGuidelineID;
					}
					else
					{
						this._LackInformationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISO14001AssessmentGuideline1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk2", Storage="_ISO14001AssessmentGuideline2", ThisKey="NusianceID", OtherKey="AssessmentGuidelineID", IsForeignKey=true)]
		public ISO14001AssessmentGuideline ISO14001AssessmentGuideline2
		{
			get
			{
				return this._ISO14001AssessmentGuideline2.Entity;
			}
			set
			{
				ISO14001AssessmentGuideline previousValue = this._ISO14001AssessmentGuideline2.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentGuideline2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentGuideline2.Entity = null;
						previousValue.Risks2.Remove(this);
					}
					this._ISO14001AssessmentGuideline2.Entity = value;
					if ((value != null))
					{
						value.Risks2.Add(this);
						this._NusianceID = value.AssessmentGuidelineID;
					}
					else
					{
						this._NusianceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISO14001AssessmentGuideline2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk3", Storage="_ISO14001AssessmentGuideline3", ThisKey="OperationalComplexityID", OtherKey="AssessmentGuidelineID", IsForeignKey=true)]
		public ISO14001AssessmentGuideline ISO14001AssessmentGuideline3
		{
			get
			{
				return this._ISO14001AssessmentGuideline3.Entity;
			}
			set
			{
				ISO14001AssessmentGuideline previousValue = this._ISO14001AssessmentGuideline3.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentGuideline3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentGuideline3.Entity = null;
						previousValue.Risks3.Remove(this);
					}
					this._ISO14001AssessmentGuideline3.Entity = value;
					if ((value != null))
					{
						value.Risks3.Add(this);
						this._OperationalComplexityID = value.AssessmentGuidelineID;
					}
					else
					{
						this._OperationalComplexityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISO14001AssessmentGuideline3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Risk", Storage="_Employee", ThisKey="OwnerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._OwnerID = value.EmployeeID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk4", Storage="_ISO14001AssessmentGuideline4", ThisKey="PolicyIssueID", OtherKey="AssessmentGuidelineID", IsForeignKey=true)]
		public ISO14001AssessmentGuideline ISO14001AssessmentGuideline4
		{
			get
			{
				return this._ISO14001AssessmentGuideline4.Entity;
			}
			set
			{
				ISO14001AssessmentGuideline previousValue = this._ISO14001AssessmentGuideline4.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentGuideline4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentGuideline4.Entity = null;
						previousValue.Risks4.Remove(this);
					}
					this._ISO14001AssessmentGuideline4.Entity = value;
					if ((value != null))
					{
						value.Risks4.Add(this);
						this._PolicyIssueID = value.AssessmentGuidelineID;
					}
					else
					{
						this._PolicyIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISO14001AssessmentGuideline4");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectInformation_Risk", Storage="_ProjectInformation", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true)]
		public ProjectInformation ProjectInformation
		{
			get
			{
				return this._ProjectInformation.Entity;
			}
			set
			{
				ProjectInformation previousValue = this._ProjectInformation.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInformation.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._ProjectInformation.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskImpact_Risk1", Storage="_RiskImpact1", ThisKey="QOSImpactID", OtherKey="RiskImpactID", IsForeignKey=true)]
		public RiskImpact RiskImpact1
		{
			get
			{
				return this._RiskImpact1.Entity;
			}
			set
			{
				RiskImpact previousValue = this._RiskImpact1.Entity;
				if (((previousValue != value) 
							|| (this._RiskImpact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskImpact1.Entity = null;
						previousValue.Risks1.Remove(this);
					}
					this._RiskImpact1.Entity = value;
					if ((value != null))
					{
						value.Risks1.Add(this);
						this._QOSImpactID = value.RiskImpactID;
					}
					else
					{
						this._QOSImpactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RiskImpact1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Risk", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISO14001AssessmentGuideline_Risk5", Storage="_ISO14001AssessmentGuideline5", ThisKey="RegularityID", OtherKey="AssessmentGuidelineID", IsForeignKey=true)]
		public ISO14001AssessmentGuideline ISO14001AssessmentGuideline5
		{
			get
			{
				return this._ISO14001AssessmentGuideline5.Entity;
			}
			set
			{
				ISO14001AssessmentGuideline previousValue = this._ISO14001AssessmentGuideline5.Entity;
				if (((previousValue != value) 
							|| (this._ISO14001AssessmentGuideline5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISO14001AssessmentGuideline5.Entity = null;
						previousValue.Risks5.Remove(this);
					}
					this._ISO14001AssessmentGuideline5.Entity = value;
					if ((value != null))
					{
						value.Risks5.Add(this);
						this._RegularityID = value.AssessmentGuidelineID;
					}
					else
					{
						this._RegularityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ISO14001AssessmentGuideline5");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCategory_Risk", Storage="_RiskCategory", ThisKey="RiskCategoryID", OtherKey="RiskCategoryID", IsForeignKey=true)]
		public RiskCategory RiskCategory
		{
			get
			{
				return this._RiskCategory.Entity;
			}
			set
			{
				RiskCategory previousValue = this._RiskCategory.Entity;
				if (((previousValue != value) 
							|| (this._RiskCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCategory.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskCategory.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._RiskCategoryID = value.RiskCategoryID;
					}
					else
					{
						this._RiskCategoryID = default(int);
					}
					this.SendPropertyChanged("RiskCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskMode_Risk", Storage="_RiskMode", ThisKey="RiskModeID", OtherKey="RiskModeID", IsForeignKey=true)]
		public RiskMode RiskMode
		{
			get
			{
				return this._RiskMode.Entity;
			}
			set
			{
				RiskMode previousValue = this._RiskMode.Entity;
				if (((previousValue != value) 
							|| (this._RiskMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskMode.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskMode.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._RiskModeID = value.RiskModeID;
					}
					else
					{
						this._RiskModeID = default(int);
					}
					this.SendPropertyChanged("RiskMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskProbability_Risk", Storage="_RiskProbability", ThisKey="RiskProbabilityID", OtherKey="RiskProbabilityId", IsForeignKey=true)]
		public RiskProbability RiskProbability
		{
			get
			{
				return this._RiskProbability.Entity;
			}
			set
			{
				RiskProbability previousValue = this._RiskProbability.Entity;
				if (((previousValue != value) 
							|| (this._RiskProbability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskProbability.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskProbability.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._RiskProbabilityID = value.RiskProbabilityId;
					}
					else
					{
						this._RiskProbabilityID = default(Nullable<long>);
					}
					this.SendPropertyChanged("RiskProbability");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskStatus_Risk", Storage="_RiskStatus", ThisKey="RiskStatusID", OtherKey="StatusId", IsForeignKey=true)]
		public RiskStatus RiskStatus
		{
			get
			{
				return this._RiskStatus.Entity;
			}
			set
			{
				RiskStatus previousValue = this._RiskStatus.Entity;
				if (((previousValue != value) 
							|| (this._RiskStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskStatus.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskStatus.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._RiskStatusID = value.StatusId;
					}
					else
					{
						this._RiskStatusID = default(long);
					}
					this.SendPropertyChanged("RiskStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskType_Risk", Storage="_RiskType", ThisKey="RiskTypeID", OtherKey="RiskTypeID", IsForeignKey=true)]
		public RiskType RiskType
		{
			get
			{
				return this._RiskType.Entity;
			}
			set
			{
				RiskType previousValue = this._RiskType.Entity;
				if (((previousValue != value) 
							|| (this._RiskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskType.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskType.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._RiskTypeID = value.RiskTypeID;
					}
					else
					{
						this._RiskTypeID = default(int);
					}
					this.SendPropertyChanged("RiskType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Risk", Storage="_Severity", ThisKey="SeverityID", OtherKey="SeverityID", IsForeignKey=true)]
		public Severity Severity
		{
			get
			{
				return this._Severity.Entity;
			}
			set
			{
				Severity previousValue = this._Severity.Entity;
				if (((previousValue != value) 
							|| (this._Severity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Severity.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._Severity.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._SeverityID = value.SeverityID;
					}
					else
					{
						this._SeverityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Severity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Risk1", Storage="_Severity1", ThisKey="SeverityEnvironmentID", OtherKey="SeverityID", IsForeignKey=true)]
		public Severity Severity1
		{
			get
			{
				return this._Severity1.Entity;
			}
			set
			{
				Severity previousValue = this._Severity1.Entity;
				if (((previousValue != value) 
							|| (this._Severity1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Severity1.Entity = null;
						previousValue.Risks1.Remove(this);
					}
					this._Severity1.Entity = value;
					if ((value != null))
					{
						value.Risks1.Add(this);
						this._SeverityEnvironmentID = value.SeverityID;
					}
					else
					{
						this._SeverityEnvironmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Severity1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Risk2", Storage="_Severity2", ThisKey="SeverityHumanID", OtherKey="SeverityID", IsForeignKey=true)]
		public Severity Severity2
		{
			get
			{
				return this._Severity2.Entity;
			}
			set
			{
				Severity previousValue = this._Severity2.Entity;
				if (((previousValue != value) 
							|| (this._Severity2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Severity2.Entity = null;
						previousValue.Risks2.Remove(this);
					}
					this._Severity2.Entity = value;
					if ((value != null))
					{
						value.Risks2.Add(this);
						this._SeverityHumanID = value.SeverityID;
					}
					else
					{
						this._SeverityHumanID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Severity2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AT_RAGSign_Risk", Storage="_AT_RAGSign", ThisKey="CiticalLimitSignID", OtherKey="SignID", IsForeignKey=true)]
		public AT_RAGSign AT_RAGSign
		{
			get
			{
				return this._AT_RAGSign.Entity;
			}
			set
			{
				AT_RAGSign previousValue = this._AT_RAGSign.Entity;
				if (((previousValue != value) 
							|| (this._AT_RAGSign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AT_RAGSign.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._AT_RAGSign.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._CiticalLimitSignID = value.SignID;
					}
					else
					{
						this._CiticalLimitSignID = default(Nullable<long>);
					}
					this.SendPropertyChanged("AT_RAGSign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskImpact_Risk2", Storage="_RiskImpact2", ThisKey="TimeImpactID", OtherKey="RiskImpactID", IsForeignKey=true)]
		public RiskImpact RiskImpact2
		{
			get
			{
				return this._RiskImpact2.Entity;
			}
			set
			{
				RiskImpact previousValue = this._RiskImpact2.Entity;
				if (((previousValue != value) 
							|| (this._RiskImpact2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskImpact2.Entity = null;
						previousValue.Risks2.Remove(this);
					}
					this._RiskImpact2.Entity = value;
					if ((value != null))
					{
						value.Risks2.Add(this);
						this._TimeImpactID = value.RiskImpactID;
					}
					else
					{
						this._TimeImpactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RiskImpact2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Risk", Storage="_CostCentre", ThisKey="CostCentre1ID", OtherKey="CostCentreID", IsForeignKey=true)]
		public CostCentre CostCentre
		{
			get
			{
				return this._CostCentre.Entity;
			}
			set
			{
				CostCentre previousValue = this._CostCentre.Entity;
				if (((previousValue != value) 
							|| (this._CostCentre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCentre.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._CostCentre.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._CostCentre1ID = value.CostCentreID;
					}
					else
					{
						this._CostCentre1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CostCentre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Risk1", Storage="_CostCentre1", ThisKey="CostCentre2ID", OtherKey="CostCentreID", IsForeignKey=true)]
		public CostCentre CostCentre1
		{
			get
			{
				return this._CostCentre1.Entity;
			}
			set
			{
				CostCentre previousValue = this._CostCentre1.Entity;
				if (((previousValue != value) 
							|| (this._CostCentre1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCentre1.Entity = null;
						previousValue.Risks1.Remove(this);
					}
					this._CostCentre1.Entity = value;
					if ((value != null))
					{
						value.Risks1.Add(this);
						this._CostCentre2ID = value.CostCentreID;
					}
					else
					{
						this._CostCentre2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CostCentre1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RiskMitigationActions(RiskMitigationAction entity)
		{
			this.SendPropertyChanging();
			entity.Risk = this;
		}
		
		private void detach_RiskMitigationActions(RiskMitigationAction entity)
		{
			this.SendPropertyChanging();
			entity.Risk = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskMitigationActions")]
	public partial class RiskMitigationAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MitigationActionID;
		
		private long _RiskID;
		
		private System.Nullable<int> _MitigationTypeID;
		
		private string _PotentialImpact;
		
		private string _Countermeasures;
		
		private string _Actions;
		
		private System.DateTime _TargetCloseDate;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private int _ActioneeID;
		
		private bool _IsClosed;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Risk> _Risk;
		
		private EntityRef<RiskMitigationType> _RiskMitigationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMitigationActionIDChanging(int value);
    partial void OnMitigationActionIDChanged();
    partial void OnRiskIDChanging(long value);
    partial void OnRiskIDChanged();
    partial void OnMitigationTypeIDChanging(System.Nullable<int> value);
    partial void OnMitigationTypeIDChanged();
    partial void OnPotentialImpactChanging(string value);
    partial void OnPotentialImpactChanged();
    partial void OnCountermeasuresChanging(string value);
    partial void OnCountermeasuresChanged();
    partial void OnActionsChanging(string value);
    partial void OnActionsChanged();
    partial void OnTargetCloseDateChanging(System.DateTime value);
    partial void OnTargetCloseDateChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnActioneeIDChanging(int value);
    partial void OnActioneeIDChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskMitigationAction()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Risk = default(EntityRef<Risk>);
			this._RiskMitigationType = default(EntityRef<RiskMitigationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MitigationActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MitigationActionID
		{
			get
			{
				return this._MitigationActionID;
			}
			set
			{
				if ((this._MitigationActionID != value))
				{
					this.OnMitigationActionIDChanging(value);
					this.SendPropertyChanging();
					this._MitigationActionID = value;
					this.SendPropertyChanged("MitigationActionID");
					this.OnMitigationActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskID", DbType="BigInt NOT NULL")]
		public long RiskID
		{
			get
			{
				return this._RiskID;
			}
			set
			{
				if ((this._RiskID != value))
				{
					if (this._Risk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskIDChanging(value);
					this.SendPropertyChanging();
					this._RiskID = value;
					this.SendPropertyChanged("RiskID");
					this.OnRiskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MitigationTypeID", DbType="Int")]
		public System.Nullable<int> MitigationTypeID
		{
			get
			{
				return this._MitigationTypeID;
			}
			set
			{
				if ((this._MitigationTypeID != value))
				{
					if (this._RiskMitigationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMitigationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MitigationTypeID = value;
					this.SendPropertyChanged("MitigationTypeID");
					this.OnMitigationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PotentialImpact", DbType="NVarChar(MAX)")]
		public string PotentialImpact
		{
			get
			{
				return this._PotentialImpact;
			}
			set
			{
				if ((this._PotentialImpact != value))
				{
					this.OnPotentialImpactChanging(value);
					this.SendPropertyChanging();
					this._PotentialImpact = value;
					this.SendPropertyChanged("PotentialImpact");
					this.OnPotentialImpactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Countermeasures", DbType="NVarChar(MAX)")]
		public string Countermeasures
		{
			get
			{
				return this._Countermeasures;
			}
			set
			{
				if ((this._Countermeasures != value))
				{
					this.OnCountermeasuresChanging(value);
					this.SendPropertyChanging();
					this._Countermeasures = value;
					this.SendPropertyChanged("Countermeasures");
					this.OnCountermeasuresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actions", DbType="NVarChar(MAX)")]
		public string Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				if ((this._Actions != value))
				{
					this.OnActionsChanging(value);
					this.SendPropertyChanging();
					this._Actions = value;
					this.SendPropertyChanged("Actions");
					this.OnActionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetCloseDate", DbType="DateTime NOT NULL")]
		public System.DateTime TargetCloseDate
		{
			get
			{
				return this._TargetCloseDate;
			}
			set
			{
				if ((this._TargetCloseDate != value))
				{
					this.OnTargetCloseDateChanging(value);
					this.SendPropertyChanging();
					this._TargetCloseDate = value;
					this.SendPropertyChanged("TargetCloseDate");
					this.OnTargetCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActioneeID", DbType="Int NOT NULL")]
		public int ActioneeID
		{
			get
			{
				return this._ActioneeID;
			}
			set
			{
				if ((this._ActioneeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActioneeIDChanging(value);
					this.SendPropertyChanging();
					this._ActioneeID = value;
					this.SendPropertyChanged("ActioneeID");
					this.OnActioneeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_RiskMitigationAction", Storage="_Employee", ThisKey="ActioneeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.RiskMitigationActions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.RiskMitigationActions.Add(this);
						this._ActioneeID = value.EmployeeID;
					}
					else
					{
						this._ActioneeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Risk_RiskMitigationAction", Storage="_Risk", ThisKey="RiskID", OtherKey="RiskId", IsForeignKey=true)]
		public Risk Risk
		{
			get
			{
				return this._Risk.Entity;
			}
			set
			{
				Risk previousValue = this._Risk.Entity;
				if (((previousValue != value) 
							|| (this._Risk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Risk.Entity = null;
						previousValue.RiskMitigationActions.Remove(this);
					}
					this._Risk.Entity = value;
					if ((value != null))
					{
						value.RiskMitigationActions.Add(this);
						this._RiskID = value.RiskId;
					}
					else
					{
						this._RiskID = default(long);
					}
					this.SendPropertyChanged("Risk");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskMitigationType_RiskMitigationAction", Storage="_RiskMitigationType", ThisKey="MitigationTypeID", OtherKey="MitigationTypeID", IsForeignKey=true)]
		public RiskMitigationType RiskMitigationType
		{
			get
			{
				return this._RiskMitigationType.Entity;
			}
			set
			{
				RiskMitigationType previousValue = this._RiskMitigationType.Entity;
				if (((previousValue != value) 
							|| (this._RiskMitigationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskMitigationType.Entity = null;
						previousValue.RiskMitigationActions.Remove(this);
					}
					this._RiskMitigationType.Entity = value;
					if ((value != null))
					{
						value.RiskMitigationActions.Add(this);
						this._MitigationTypeID = value.MitigationTypeID;
					}
					else
					{
						this._MitigationTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RiskMitigationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="RiskManagement.RiskMitigationType")]
	public partial class RiskMitigationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MitigationTypeID;
		
		private string _MitigationType;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<RiskMitigationAction> _RiskMitigationActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMitigationTypeIDChanging(int value);
    partial void OnMitigationTypeIDChanged();
    partial void OnMitigationTypeChanging(string value);
    partial void OnMitigationTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public RiskMitigationType()
		{
			this._RiskMitigationActions = new EntitySet<RiskMitigationAction>(new Action<RiskMitigationAction>(this.attach_RiskMitigationActions), new Action<RiskMitigationAction>(this.detach_RiskMitigationActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MitigationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MitigationTypeID
		{
			get
			{
				return this._MitigationTypeID;
			}
			set
			{
				if ((this._MitigationTypeID != value))
				{
					this.OnMitigationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MitigationTypeID = value;
					this.SendPropertyChanged("MitigationTypeID");
					this.OnMitigationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MitigationType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MitigationType
		{
			get
			{
				return this._MitigationType;
			}
			set
			{
				if ((this._MitigationType != value))
				{
					this.OnMitigationTypeChanging(value);
					this.SendPropertyChanging();
					this._MitigationType = value;
					this.SendPropertyChanged("MitigationType");
					this.OnMitigationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskMitigationType_RiskMitigationAction", Storage="_RiskMitigationActions", ThisKey="MitigationTypeID", OtherKey="MitigationTypeID")]
		public EntitySet<RiskMitigationAction> RiskMitigationActions
		{
			get
			{
				return this._RiskMitigationActions;
			}
			set
			{
				this._RiskMitigationActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RiskMitigationActions(RiskMitigationAction entity)
		{
			this.SendPropertyChanging();
			entity.RiskMitigationType = this;
		}
		
		private void detach_RiskMitigationActions(RiskMitigationAction entity)
		{
			this.SendPropertyChanging();
			entity.RiskMitigationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemUsers")]
	public partial class SystemUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private System.Nullable<int> _EmployeeID;
		
		private int _UserTypeID;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _UserPassword;
		
		private string _CurrentSessionID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<SystemUserPermission> _SystemUserPermissions;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SystemUserType> _SystemUserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(System.Data.Linq.Binary value);
    partial void OnUserPasswordChanged();
    partial void OnCurrentSessionIDChanging(string value);
    partial void OnCurrentSessionIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public SystemUser()
		{
			this._SystemUserPermissions = new EntitySet<SystemUserPermission>(new Action<SystemUserPermission>(this.attach_SystemUserPermissions), new Action<SystemUserPermission>(this.detach_SystemUserPermissions));
			this._Employee = default(EntityRef<Employee>);
			this._SystemUserType = default(EntityRef<SystemUserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID", DbType="Int NOT NULL")]
		public int UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					if (this._SystemUserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentSessionID", DbType="NVarChar(MAX)")]
		public string CurrentSessionID
		{
			get
			{
				return this._CurrentSessionID;
			}
			set
			{
				if ((this._CurrentSessionID != value))
				{
					this.OnCurrentSessionIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentSessionID = value;
					this.SendPropertyChanged("CurrentSessionID");
					this.OnCurrentSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_SystemUserPermission", Storage="_SystemUserPermissions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<SystemUserPermission> SystemUserPermissions
		{
			get
			{
				return this._SystemUserPermissions;
			}
			set
			{
				this._SystemUserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SystemUser", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUserType_SystemUser", Storage="_SystemUserType", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
		public SystemUserType SystemUserType
		{
			get
			{
				return this._SystemUserType.Entity;
			}
			set
			{
				SystemUserType previousValue = this._SystemUserType.Entity;
				if (((previousValue != value) 
							|| (this._SystemUserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUserType.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._SystemUserType.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._UserTypeID = value.UserTypeID;
					}
					else
					{
						this._UserTypeID = default(int);
					}
					this.SendPropertyChanged("SystemUserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUserPermissions(SystemUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_SystemUserPermissions(SystemUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetAcquisitionMethod")]
	public partial class AssetAcquisitionMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetAcquisitionMethodId;
		
		private string _AcquisitionMethod;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetAcquisitionMethodIdChanging(long value);
    partial void OnAssetAcquisitionMethodIdChanged();
    partial void OnAcquisitionMethodChanging(string value);
    partial void OnAcquisitionMethodChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetAcquisitionMethod()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetAcquisitionMethodId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetAcquisitionMethodId
		{
			get
			{
				return this._AssetAcquisitionMethodId;
			}
			set
			{
				if ((this._AssetAcquisitionMethodId != value))
				{
					this.OnAssetAcquisitionMethodIdChanging(value);
					this.SendPropertyChanging();
					this._AssetAcquisitionMethodId = value;
					this.SendPropertyChanged("AssetAcquisitionMethodId");
					this.OnAssetAcquisitionMethodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcquisitionMethod", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AcquisitionMethod
		{
			get
			{
				return this._AcquisitionMethod;
			}
			set
			{
				if ((this._AcquisitionMethod != value))
				{
					this.OnAcquisitionMethodChanging(value);
					this.SendPropertyChanging();
					this._AcquisitionMethod = value;
					this.SendPropertyChanged("AcquisitionMethod");
					this.OnAcquisitionMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetAcquisitionMethod_Asset", Storage="_Assets", ThisKey="AssetAcquisitionMethodId", OtherKey="AssetAcquisitionMethodId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetAcquisitionMethod = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetAcquisitionMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetDepreciationMethod")]
	public partial class AssetDepreciationMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetDepreciationMethodId;
		
		private string _DepreciationMethod;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetDepreciationMethodIdChanging(long value);
    partial void OnAssetDepreciationMethodIdChanged();
    partial void OnDepreciationMethodChanging(string value);
    partial void OnDepreciationMethodChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetDepreciationMethod()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetDepreciationMethodId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetDepreciationMethodId
		{
			get
			{
				return this._AssetDepreciationMethodId;
			}
			set
			{
				if ((this._AssetDepreciationMethodId != value))
				{
					this.OnAssetDepreciationMethodIdChanging(value);
					this.SendPropertyChanging();
					this._AssetDepreciationMethodId = value;
					this.SendPropertyChanged("AssetDepreciationMethodId");
					this.OnAssetDepreciationMethodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepreciationMethod", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DepreciationMethod
		{
			get
			{
				return this._DepreciationMethod;
			}
			set
			{
				if ((this._DepreciationMethod != value))
				{
					this.OnDepreciationMethodChanging(value);
					this.SendPropertyChanging();
					this._DepreciationMethod = value;
					this.SendPropertyChanged("DepreciationMethod");
					this.OnDepreciationMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetDepreciationMethod_Asset", Storage="_Assets", ThisKey="AssetDepreciationMethodId", OtherKey="DepreciationMethodId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetDepreciationMethod = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetDepreciationMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.CustomerType")]
	public partial class CustomerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerTypeID;
		
		private string _CustomerType1;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerTypeIDChanging(int value);
    partial void OnCustomerTypeIDChanged();
    partial void OnCustomerType1Changing(string value);
    partial void OnCustomerType1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CustomerType()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerTypeID
		{
			get
			{
				return this._CustomerTypeID;
			}
			set
			{
				if ((this._CustomerTypeID != value))
				{
					this.OnCustomerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeID = value;
					this.SendPropertyChanged("CustomerTypeID");
					this.OnCustomerTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CustomerType", Storage="_CustomerType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CustomerType1
		{
			get
			{
				return this._CustomerType1;
			}
			set
			{
				if ((this._CustomerType1 != value))
				{
					this.OnCustomerType1Changing(value);
					this.SendPropertyChanging();
					this._CustomerType1 = value;
					this.SendPropertyChanged("CustomerType1");
					this.OnCustomerType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_Customer", Storage="_Customers", ThisKey="CustomerTypeID", OtherKey="CustomerTypeID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Person.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private System.Nullable<int> _CustomerTypeID;
		
		private string _CustomerReference;
		
		private string _CustomerName;
		
		private string _ContactPerson;
		
		private string _EmailAddress;
		
		private string _Website;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<CustomerAddress> _CustomerAddresses;
		
		private EntitySet<CustomerContact> _CustomerContacts;
		
		private EntitySet<TrainingCourseSchedule> _TrainingCourseSchedules;
		
		private EntitySet<AssetCalibration> _AssetCalibrations;
		
		private EntitySet<AssetMaintenance> _AssetMaintenances;
		
		private EntitySet<AssetElectricalTest> _AssetElectricalTests;
		
		private EntitySet<Problem> _Problems;
		
		private EntitySet<Audit> _Audits;
		
		private EntitySet<Asset> _Assets;
		
		private EntitySet<Asset> _Assets1;
		
		private EntityRef<CustomerType> _CustomerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerTypeIDChanging(System.Nullable<int> value);
    partial void OnCustomerTypeIDChanged();
    partial void OnCustomerReferenceChanging(string value);
    partial void OnCustomerReferenceChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerAddresses = new EntitySet<CustomerAddress>(new Action<CustomerAddress>(this.attach_CustomerAddresses), new Action<CustomerAddress>(this.detach_CustomerAddresses));
			this._CustomerContacts = new EntitySet<CustomerContact>(new Action<CustomerContact>(this.attach_CustomerContacts), new Action<CustomerContact>(this.detach_CustomerContacts));
			this._TrainingCourseSchedules = new EntitySet<TrainingCourseSchedule>(new Action<TrainingCourseSchedule>(this.attach_TrainingCourseSchedules), new Action<TrainingCourseSchedule>(this.detach_TrainingCourseSchedules));
			this._AssetCalibrations = new EntitySet<AssetCalibration>(new Action<AssetCalibration>(this.attach_AssetCalibrations), new Action<AssetCalibration>(this.detach_AssetCalibrations));
			this._AssetMaintenances = new EntitySet<AssetMaintenance>(new Action<AssetMaintenance>(this.attach_AssetMaintenances), new Action<AssetMaintenance>(this.detach_AssetMaintenances));
			this._AssetElectricalTests = new EntitySet<AssetElectricalTest>(new Action<AssetElectricalTest>(this.attach_AssetElectricalTests), new Action<AssetElectricalTest>(this.detach_AssetElectricalTests));
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._Assets1 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets1), new Action<Asset>(this.detach_Assets1));
			this._CustomerType = default(EntityRef<CustomerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTypeID", DbType="Int")]
		public System.Nullable<int> CustomerTypeID
		{
			get
			{
				return this._CustomerTypeID;
			}
			set
			{
				if ((this._CustomerTypeID != value))
				{
					if (this._CustomerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeID = value;
					this.SendPropertyChanged("CustomerTypeID");
					this.OnCustomerTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerReference", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerReference
		{
			get
			{
				return this._CustomerReference;
			}
			set
			{
				if ((this._CustomerReference != value))
				{
					this.OnCustomerReferenceChanging(value);
					this.SendPropertyChanging();
					this._CustomerReference = value;
					this.SendPropertyChanged("CustomerReference");
					this.OnCustomerReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="NVarChar(100)")]
		public string ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(100)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(100)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAddress", Storage="_CustomerAddresses", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CustomerAddress> CustomerAddresses
		{
			get
			{
				return this._CustomerAddresses;
			}
			set
			{
				this._CustomerAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerContact", Storage="_CustomerContacts", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CustomerContact> CustomerContacts
		{
			get
			{
				return this._CustomerContacts;
			}
			set
			{
				this._CustomerContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_TrainingCourseSchedule", Storage="_TrainingCourseSchedules", ThisKey="CustomerID", OtherKey="ExternalInstructorID")]
		public EntitySet<TrainingCourseSchedule> TrainingCourseSchedules
		{
			get
			{
				return this._TrainingCourseSchedules;
			}
			set
			{
				this._TrainingCourseSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AssetCalibration", Storage="_AssetCalibrations", ThisKey="CustomerID", OtherKey="CalibrationProviderID")]
		public EntitySet<AssetCalibration> AssetCalibrations
		{
			get
			{
				return this._AssetCalibrations;
			}
			set
			{
				this._AssetCalibrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AssetMaintenance", Storage="_AssetMaintenances", ThisKey="CustomerID", OtherKey="MaintenanceProviderID")]
		public EntitySet<AssetMaintenance> AssetMaintenances
		{
			get
			{
				return this._AssetMaintenances;
			}
			set
			{
				this._AssetMaintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AssetElectricalTest", Storage="_AssetElectricalTests", ThisKey="CustomerID", OtherKey="ElectricalTestProviderID")]
		public EntitySet<AssetElectricalTest> AssetElectricalTests
		{
			get
			{
				return this._AssetElectricalTests;
			}
			set
			{
				this._AssetElectricalTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Problem", Storage="_Problems", ThisKey="CustomerID", OtherKey="AffectedPartyID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Audit", Storage="_Audits", ThisKey="CustomerID", OtherKey="SupplierID")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Asset", Storage="_Assets", ThisKey="CustomerID", OtherKey="AnotherExternalOwnerID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Asset1", Storage="_Assets1", ThisKey="CustomerID", OtherKey="SupplierId")]
		public EntitySet<Asset> Assets1
		{
			get
			{
				return this._Assets1;
			}
			set
			{
				this._Assets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_Customer", Storage="_CustomerType", ThisKey="CustomerTypeID", OtherKey="CustomerTypeID", IsForeignKey=true, DeleteRule="SET NULL")]
		public CustomerType CustomerType
		{
			get
			{
				return this._CustomerType.Entity;
			}
			set
			{
				CustomerType previousValue = this._CustomerType.Entity;
				if (((previousValue != value) 
							|| (this._CustomerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerType.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerType.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerTypeID = value.CustomerTypeID;
					}
					else
					{
						this._CustomerTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerContacts(CustomerContact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_TrainingCourseSchedules(TrainingCourseSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = this;
		}
		
		private void detach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.AssetCategory")]
	public partial class AssetCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetCategoryId;
		
		private string _CategoryName;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetCategoryIdChanging(long value);
    partial void OnAssetCategoryIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AssetCategory()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetCategoryId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetCategoryId
		{
			get
			{
				return this._AssetCategoryId;
			}
			set
			{
				if ((this._AssetCategoryId != value))
				{
					this.OnAssetCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AssetCategoryId = value;
					this.SendPropertyChanged("AssetCategoryId");
					this.OnAssetCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetCategory_Asset", Storage="_Assets", ThisKey="AssetCategoryId", OtherKey="AssetCategoryId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetCategory = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.AssetCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.BillingCategory")]
	public partial class BillingCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BillingCategoryId;
		
		private string _PaymentMethod;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingCategoryIdChanging(long value);
    partial void OnBillingCategoryIdChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public BillingCategory()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long BillingCategoryId
		{
			get
			{
				return this._BillingCategoryId;
			}
			set
			{
				if ((this._BillingCategoryId != value))
				{
					this.OnBillingCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryId = value;
					this.SendPropertyChanged("BillingCategoryId");
					this.OnBillingCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingCategory_Asset", Storage="_Assets", ThisKey="BillingCategoryId", OtherKey="BillingCategoryId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.BillingCategory = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.BillingCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.AffectedPartyType")]
	public partial class AffectedPartyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AffectedPartyTypeID;
		
		private string _AffectedPartyType1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Problem> _Problems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAffectedPartyTypeIDChanging(int value);
    partial void OnAffectedPartyTypeIDChanged();
    partial void OnAffectedPartyType1Changing(string value);
    partial void OnAffectedPartyType1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public AffectedPartyType()
		{
			this._Problems = new EntitySet<Problem>(new Action<Problem>(this.attach_Problems), new Action<Problem>(this.detach_Problems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectedPartyTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AffectedPartyTypeID
		{
			get
			{
				return this._AffectedPartyTypeID;
			}
			set
			{
				if ((this._AffectedPartyTypeID != value))
				{
					this.OnAffectedPartyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AffectedPartyTypeID = value;
					this.SendPropertyChanged("AffectedPartyTypeID");
					this.OnAffectedPartyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AffectedPartyType", Storage="_AffectedPartyType1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AffectedPartyType1
		{
			get
			{
				return this._AffectedPartyType1;
			}
			set
			{
				if ((this._AffectedPartyType1 != value))
				{
					this.OnAffectedPartyType1Changing(value);
					this.SendPropertyChanging();
					this._AffectedPartyType1 = value;
					this.SendPropertyChanged("AffectedPartyType1");
					this.OnAffectedPartyType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AffectedPartyType_Problem", Storage="_Problems", ThisKey="AffectedPartyTypeID", OtherKey="AffectedPartyTypeID")]
		public EntitySet<Problem> Problems
		{
			get
			{
				return this._Problems;
			}
			set
			{
				this._Problems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.AffectedPartyType = this;
		}
		
		private void detach_Problems(Problem entity)
		{
			this.SendPropertyChanging();
			entity.AffectedPartyType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.ProblemApprovalMember")]
	public partial class ProblemApprovalMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private int _ApproverID;
		
		private int _MemberTypeID;
		
		private int _ProblemID;
		
		private System.Nullable<int> _ApprovalStatusID;
		
		private string _ApprovalRemarks;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<ApprovalMemberType> _ApprovalMemberType;
		
		private EntityRef<ApprovalStatus> _ApprovalStatus;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnApproverIDChanging(int value);
    partial void OnApproverIDChanged();
    partial void OnMemberTypeIDChanging(int value);
    partial void OnMemberTypeIDChanged();
    partial void OnProblemIDChanging(int value);
    partial void OnProblemIDChanged();
    partial void OnApprovalStatusIDChanging(System.Nullable<int> value);
    partial void OnApprovalStatusIDChanged();
    partial void OnApprovalRemarksChanging(string value);
    partial void OnApprovalRemarksChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public ProblemApprovalMember()
		{
			this._Employee = default(EntityRef<Employee>);
			this._ApprovalMemberType = default(EntityRef<ApprovalMemberType>);
			this._ApprovalStatus = default(EntityRef<ApprovalStatus>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproverID", DbType="Int NOT NULL")]
		public int ApproverID
		{
			get
			{
				return this._ApproverID;
			}
			set
			{
				if ((this._ApproverID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverIDChanging(value);
					this.SendPropertyChanging();
					this._ApproverID = value;
					this.SendPropertyChanged("ApproverID");
					this.OnApproverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", DbType="Int NOT NULL")]
		public int MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					if (this._ApprovalMemberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemID", DbType="Int NOT NULL")]
		public int ProblemID
		{
			get
			{
				return this._ProblemID;
			}
			set
			{
				if ((this._ProblemID != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemID = value;
					this.SendPropertyChanged("ProblemID");
					this.OnProblemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatusID", DbType="Int")]
		public System.Nullable<int> ApprovalStatusID
		{
			get
			{
				return this._ApprovalStatusID;
			}
			set
			{
				if ((this._ApprovalStatusID != value))
				{
					if (this._ApprovalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatusID = value;
					this.SendPropertyChanged("ApprovalStatusID");
					this.OnApprovalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalRemarks", DbType="NVarChar(300)")]
		public string ApprovalRemarks
		{
			get
			{
				return this._ApprovalRemarks;
			}
			set
			{
				if ((this._ApprovalRemarks != value))
				{
					this.OnApprovalRemarksChanging(value);
					this.SendPropertyChanging();
					this._ApprovalRemarks = value;
					this.SendPropertyChanged("ApprovalRemarks");
					this.OnApprovalRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProblemApprovalMember", Storage="_Employee", ThisKey="ApproverID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ProblemApprovalMembers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ProblemApprovalMembers.Add(this);
						this._ApproverID = value.EmployeeID;
					}
					else
					{
						this._ApproverID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalMemberType_ProblemApprovalMember", Storage="_ApprovalMemberType", ThisKey="MemberTypeID", OtherKey="MemberTypeID", IsForeignKey=true)]
		public ApprovalMemberType ApprovalMemberType
		{
			get
			{
				return this._ApprovalMemberType.Entity;
			}
			set
			{
				ApprovalMemberType previousValue = this._ApprovalMemberType.Entity;
				if (((previousValue != value) 
							|| (this._ApprovalMemberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovalMemberType.Entity = null;
						previousValue.ProblemApprovalMembers.Remove(this);
					}
					this._ApprovalMemberType.Entity = value;
					if ((value != null))
					{
						value.ProblemApprovalMembers.Add(this);
						this._MemberTypeID = value.MemberTypeID;
					}
					else
					{
						this._MemberTypeID = default(int);
					}
					this.SendPropertyChanged("ApprovalMemberType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApprovalStatus_ProblemApprovalMember", Storage="_ApprovalStatus", ThisKey="ApprovalStatusID", OtherKey="ApprovalStatusID", IsForeignKey=true)]
		public ApprovalStatus ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus.Entity;
			}
			set
			{
				ApprovalStatus previousValue = this._ApprovalStatus.Entity;
				if (((previousValue != value) 
							|| (this._ApprovalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovalStatus.Entity = null;
						previousValue.ProblemApprovalMembers.Remove(this);
					}
					this._ApprovalStatus.Entity = value;
					if ((value != null))
					{
						value.ProblemApprovalMembers.Add(this);
						this._ApprovalStatusID = value.ApprovalStatusID;
					}
					else
					{
						this._ApprovalStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ApprovalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_ProblemApprovalMember", Storage="_Problem", ThisKey="ProblemID", OtherKey="ProblemID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.ProblemApprovalMembers.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.ProblemApprovalMembers.Add(this);
						this._ProblemID = value.ProblemID;
					}
					else
					{
						this._ProblemID = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ProblemManagement.Problem")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProblemID;
		
		private System.Nullable<int> _ProblemTypeID;
		
		private int _AffectedPartyTypeID;
		
		private System.Nullable<int> _AffectedPartyID;
		
		private System.Nullable<long> _AffectedDocumentID;
		
		private System.Nullable<int> _AffectedDepartmentID;
		
		private string _CaseNo;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _RaiseDate;
		
		private int _OriginatorID;
		
		private System.Nullable<System.DateTime> _OriginationDate;
		
		private int _OwnerID;
		
		private int _ExecutiveID;
		
		private System.Nullable<int> _CauseID;
		
		private System.Nullable<int> _SeverityID;
		
		private System.Nullable<int> _ReportDepartmentID;
		
		private System.Nullable<int> _ProblemRelatedDepartmentID;
		
		private System.DateTime _TargetCloseDate;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private System.Nullable<System.DateTime> _ReviewReportIssueDate;
		
		private int _StatusID;
		
		private string _Remarks;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;

        private System.Nullable<int> _SubCauseID;

        private EntitySet<ProblemRiskSubCategory> _ProblemRiskSubCategories;
		
		private EntitySet<ProblemAction> _ProblemActions;
		
		private EntitySet<ProblemApprovalMember> _ProblemApprovalMembers;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<ProblemStatus> _ProblemStatus;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
		private EntityRef<AffectedPartyType> _AffectedPartyType;
		
		private EntityRef<ProblemType> _ProblemType;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Employee> _Employee2;
		
		private EntityRef<Cause> _Cause;
		
		private EntityRef<Severity> _Severity;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit1;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblemIDChanging(int value);
    partial void OnProblemIDChanged();
    partial void OnProblemTypeIDChanging(System.Nullable<int> value);
    partial void OnProblemTypeIDChanged();
    partial void OnAffectedPartyTypeIDChanging(int value);
    partial void OnAffectedPartyTypeIDChanged();
    partial void OnAffectedPartyIDChanging(System.Nullable<int> value);
    partial void OnAffectedPartyIDChanged();
    partial void OnAffectedDocumentIDChanging(System.Nullable<long> value);
    partial void OnAffectedDocumentIDChanged();
    partial void OnAffectedDepartmentIDChanging(System.Nullable<int> value);
    partial void OnAffectedDepartmentIDChanged();
    partial void OnCaseNoChanging(string value);
    partial void OnCaseNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRaiseDateChanging(System.DateTime value);
    partial void OnRaiseDateChanged();
    partial void OnOriginatorIDChanging(int value);
    partial void OnOriginatorIDChanged();
    partial void OnOriginationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOriginationDateChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnExecutiveIDChanging(int value);
    partial void OnExecutiveIDChanged();
    partial void OnCauseIDChanging(System.Nullable<int> value);
    partial void OnCauseIDChanged();
    partial void OnSeverityIDChanging(System.Nullable<int> value);
    partial void OnSeverityIDChanged();
    partial void OnReportDepartmentIDChanging(System.Nullable<int> value);
    partial void OnReportDepartmentIDChanged();
    partial void OnProblemRelatedDepartmentIDChanging(System.Nullable<int> value);
    partial void OnProblemRelatedDepartmentIDChanged();
    partial void OnTargetCloseDateChanging(System.DateTime value);
    partial void OnTargetCloseDateChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnReviewReportIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviewReportIssueDateChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnSubCauseIDChanging(System.Nullable<int> value);
    partial void OnSubCauseIDChanged();
    #endregion

        public Problem()
		{
			this._ProblemRiskSubCategories = new EntitySet<ProblemRiskSubCategory>(new Action<ProblemRiskSubCategory>(this.attach_ProblemRiskSubCategories), new Action<ProblemRiskSubCategory>(this.detach_ProblemRiskSubCategories));
			this._ProblemActions = new EntitySet<ProblemAction>(new Action<ProblemAction>(this.attach_ProblemActions), new Action<ProblemAction>(this.detach_ProblemActions));
			this._ProblemApprovalMembers = new EntitySet<ProblemApprovalMember>(new Action<ProblemApprovalMember>(this.attach_ProblemApprovalMembers), new Action<ProblemApprovalMember>(this.detach_ProblemApprovalMembers));
			this._RecordMode = default(EntityRef<RecordMode>);
			this._ProblemStatus = default(EntityRef<ProblemStatus>);
			this._Document = default(EntityRef<Document>);
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			this._AffectedPartyType = default(EntityRef<AffectedPartyType>);
			this._ProblemType = default(EntityRef<ProblemType>);
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Employee2 = default(EntityRef<Employee>);
			this._Cause = default(EntityRef<Cause>);
			this._Severity = default(EntityRef<Severity>);
			this._OrganizationUnit1 = default(EntityRef<OrganizationUnit>);
			this._OrganizationUnit2 = default(EntityRef<OrganizationUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProblemID
		{
			get
			{
				return this._ProblemID;
			}
			set
			{
				if ((this._ProblemID != value))
				{
					this.OnProblemIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemID = value;
					this.SendPropertyChanged("ProblemID");
					this.OnProblemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemTypeID", DbType="Int")]
		public System.Nullable<int> ProblemTypeID
		{
			get
			{
				return this._ProblemTypeID;
			}
			set
			{
				if ((this._ProblemTypeID != value))
				{
					if (this._ProblemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemTypeID = value;
					this.SendPropertyChanged("ProblemTypeID");
					this.OnProblemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectedPartyTypeID", DbType="Int NOT NULL")]
		public int AffectedPartyTypeID
		{
			get
			{
				return this._AffectedPartyTypeID;
			}
			set
			{
				if ((this._AffectedPartyTypeID != value))
				{
					if (this._AffectedPartyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffectedPartyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AffectedPartyTypeID = value;
					this.SendPropertyChanged("AffectedPartyTypeID");
					this.OnAffectedPartyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectedPartyID", DbType="Int")]
		public System.Nullable<int> AffectedPartyID
		{
			get
			{
				return this._AffectedPartyID;
			}
			set
			{
				if ((this._AffectedPartyID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffectedPartyIDChanging(value);
					this.SendPropertyChanging();
					this._AffectedPartyID = value;
					this.SendPropertyChanged("AffectedPartyID");
					this.OnAffectedPartyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectedDocumentID", DbType="BigInt")]
		public System.Nullable<long> AffectedDocumentID
		{
			get
			{
				return this._AffectedDocumentID;
			}
			set
			{
				if ((this._AffectedDocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffectedDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._AffectedDocumentID = value;
					this.SendPropertyChanged("AffectedDocumentID");
					this.OnAffectedDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectedDepartmentID", DbType="Int")]
		public System.Nullable<int> AffectedDepartmentID
		{
			get
			{
				return this._AffectedDepartmentID;
			}
			set
			{
				if ((this._AffectedDepartmentID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffectedDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._AffectedDepartmentID = value;
					this.SendPropertyChanged("AffectedDepartmentID");
					this.OnAffectedDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaiseDate", DbType="DateTime NOT NULL")]
		public System.DateTime RaiseDate
		{
			get
			{
				return this._RaiseDate;
			}
			set
			{
				if ((this._RaiseDate != value))
				{
					this.OnRaiseDateChanging(value);
					this.SendPropertyChanging();
					this._RaiseDate = value;
					this.SendPropertyChanged("RaiseDate");
					this.OnRaiseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginatorID", DbType="Int NOT NULL")]
		public int OriginatorID
		{
			get
			{
				return this._OriginatorID;
			}
			set
			{
				if ((this._OriginatorID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOriginatorIDChanging(value);
					this.SendPropertyChanging();
					this._OriginatorID = value;
					this.SendPropertyChanged("OriginatorID");
					this.OnOriginatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OriginationDate
		{
			get
			{
				return this._OriginationDate;
			}
			set
			{
				if ((this._OriginationDate != value))
				{
					this.OnOriginationDateChanging(value);
					this.SendPropertyChanging();
					this._OriginationDate = value;
					this.SendPropertyChanged("OriginationDate");
					this.OnOriginationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveID", DbType="Int NOT NULL")]
		public int ExecutiveID
		{
			get
			{
				return this._ExecutiveID;
			}
			set
			{
				if ((this._ExecutiveID != value))
				{
					if (this._Employee2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveIDChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveID = value;
					this.SendPropertyChanged("ExecutiveID");
					this.OnExecutiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", DbType="Int")]
		public System.Nullable<int> CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					if (this._Cause.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCauseIDChanging(value);
					this.SendPropertyChanging();
					this._CauseID = value;
					this.SendPropertyChanged("CauseID");
					this.OnCauseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeverityID", DbType="Int")]
		public System.Nullable<int> SeverityID
		{
			get
			{
				return this._SeverityID;
			}
			set
			{
				if ((this._SeverityID != value))
				{
					if (this._Severity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeverityIDChanging(value);
					this.SendPropertyChanging();
					this._SeverityID = value;
					this.SendPropertyChanged("SeverityID");
					this.OnSeverityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportDepartmentID", DbType="Int")]
		public System.Nullable<int> ReportDepartmentID
		{
			get
			{
				return this._ReportDepartmentID;
			}
			set
			{
				if ((this._ReportDepartmentID != value))
				{
					if (this._OrganizationUnit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._ReportDepartmentID = value;
					this.SendPropertyChanged("ReportDepartmentID");
					this.OnReportDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemRelatedDepartmentID", DbType="Int")]
		public System.Nullable<int> ProblemRelatedDepartmentID
		{
			get
			{
				return this._ProblemRelatedDepartmentID;
			}
			set
			{
				if ((this._ProblemRelatedDepartmentID != value))
				{
					if (this._OrganizationUnit2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemRelatedDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._ProblemRelatedDepartmentID = value;
					this.SendPropertyChanged("ProblemRelatedDepartmentID");
					this.OnProblemRelatedDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetCloseDate", DbType="DateTime NOT NULL")]
		public System.DateTime TargetCloseDate
		{
			get
			{
				return this._TargetCloseDate;
			}
			set
			{
				if ((this._TargetCloseDate != value))
				{
					this.OnTargetCloseDateChanging(value);
					this.SendPropertyChanging();
					this._TargetCloseDate = value;
					this.SendPropertyChanged("TargetCloseDate");
					this.OnTargetCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewReportIssueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReviewReportIssueDate
		{
			get
			{
				return this._ReviewReportIssueDate;
			}
			set
			{
				if ((this._ReviewReportIssueDate != value))
				{
					this.OnReviewReportIssueDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewReportIssueDate = value;
					this.SendPropertyChanged("ReviewReportIssueDate");
					this.OnReviewReportIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._ProblemStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubCauseID", DbType = "Int")]
         public System.Nullable<int> SubCauseID
         {
             get
             {
                 return this._SubCauseID;
             }
             set
             {
                 if ((this._SubCauseID != value))
                 {
        this.OnSubCauseIDChanging(value);
        this.SendPropertyChanging();
        this._SubCauseID = value;
        this.SendPropertyChanged("SubCauseID");
        this.OnSubCauseIDChanged();
                      }
            }
        }

[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_ProblemRiskSubCategory", Storage="_ProblemRiskSubCategories", ThisKey="ProblemID", OtherKey="ProblemID")]
		public EntitySet<ProblemRiskSubCategory> ProblemRiskSubCategories
		{
			get
			{
				return this._ProblemRiskSubCategories;
			}
			set
			{
				this._ProblemRiskSubCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_ProblemAction", Storage="_ProblemActions", ThisKey="ProblemID", OtherKey="ProblemID")]
		public EntitySet<ProblemAction> ProblemActions
		{
			get
			{
				return this._ProblemActions;
			}
			set
			{
				this._ProblemActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_ProblemApprovalMember", Storage="_ProblemApprovalMembers", ThisKey="ProblemID", OtherKey="ProblemID")]
		public EntitySet<ProblemApprovalMember> ProblemApprovalMembers
		{
			get
			{
				return this._ProblemApprovalMembers;
			}
			set
			{
				this._ProblemApprovalMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Problem", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProblemStatus_Problem", Storage="_ProblemStatus", ThisKey="StatusID", OtherKey="ProblemStatusID", IsForeignKey=true)]
		public ProblemStatus ProblemStatus
		{
			get
			{
				return this._ProblemStatus.Entity;
			}
			set
			{
				ProblemStatus previousValue = this._ProblemStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProblemStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProblemStatus.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._ProblemStatus.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._StatusID = value.ProblemStatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("ProblemStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Problem", Storage="_Document", ThisKey="AffectedDocumentID", OtherKey="DocumentId", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._AffectedDocumentID = value.DocumentId;
					}
					else
					{
						this._AffectedDocumentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Problem", Storage="_OrganizationUnit", ThisKey="AffectedDepartmentID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._AffectedDepartmentID = value.UnitID;
					}
					else
					{
						this._AffectedDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AffectedPartyType_Problem", Storage="_AffectedPartyType", ThisKey="AffectedPartyTypeID", OtherKey="AffectedPartyTypeID", IsForeignKey=true)]
		public AffectedPartyType AffectedPartyType
		{
			get
			{
				return this._AffectedPartyType.Entity;
			}
			set
			{
				AffectedPartyType previousValue = this._AffectedPartyType.Entity;
				if (((previousValue != value) 
							|| (this._AffectedPartyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AffectedPartyType.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._AffectedPartyType.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._AffectedPartyTypeID = value.AffectedPartyTypeID;
					}
					else
					{
						this._AffectedPartyTypeID = default(int);
					}
					this.SendPropertyChanged("AffectedPartyType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProblemType_Problem", Storage="_ProblemType", ThisKey="ProblemTypeID", OtherKey="ProblemTypeID", IsForeignKey=true, DeleteRule="SET NULL")]
		public ProblemType ProblemType
		{
			get
			{
				return this._ProblemType.Entity;
			}
			set
			{
				ProblemType previousValue = this._ProblemType.Entity;
				if (((previousValue != value) 
							|| (this._ProblemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProblemType.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._ProblemType.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._ProblemTypeID = value.ProblemTypeID;
					}
					else
					{
						this._ProblemTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProblemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Problem", Storage="_Customer", ThisKey="AffectedPartyID", OtherKey="CustomerID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._AffectedPartyID = value.CustomerID;
					}
					else
					{
						this._AffectedPartyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Problem", Storage="_Employee", ThisKey="OriginatorID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._OriginatorID = value.EmployeeID;
					}
					else
					{
						this._OriginatorID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Problem1", Storage="_Employee1", ThisKey="OwnerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Problems1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Problems1.Add(this);
						this._OwnerID = value.EmployeeID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Problem2", Storage="_Employee2", ThisKey="ExecutiveID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee2
		{
			get
			{
				return this._Employee2.Entity;
			}
			set
			{
				Employee previousValue = this._Employee2.Entity;
				if (((previousValue != value) 
							|| (this._Employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee2.Entity = null;
						previousValue.Problems2.Remove(this);
					}
					this._Employee2.Entity = value;
					if ((value != null))
					{
						value.Problems2.Add(this);
						this._ExecutiveID = value.EmployeeID;
					}
					else
					{
						this._ExecutiveID = default(int);
					}
					this.SendPropertyChanged("Employee2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cause_Problem", Storage="_Cause", ThisKey="CauseID", OtherKey="CauseID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Cause Cause
		{
			get
			{
				return this._Cause.Entity;
			}
			set
			{
				Cause previousValue = this._Cause.Entity;
				if (((previousValue != value) 
							|| (this._Cause.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cause.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Cause.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._CauseID = value.CauseID;
					}
					else
					{
						this._CauseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cause");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Severity_Problem", Storage="_Severity", ThisKey="SeverityID", OtherKey="SeverityID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Severity Severity
		{
			get
			{
				return this._Severity.Entity;
			}
			set
			{
				Severity previousValue = this._Severity.Entity;
				if (((previousValue != value) 
							|| (this._Severity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Severity.Entity = null;
						previousValue.Problems.Remove(this);
					}
					this._Severity.Entity = value;
					if ((value != null))
					{
						value.Problems.Add(this);
						this._SeverityID = value.SeverityID;
					}
					else
					{
						this._SeverityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Severity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Problem1", Storage="_OrganizationUnit1", ThisKey="ReportDepartmentID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit1
		{
			get
			{
				return this._OrganizationUnit1.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit1.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit1.Entity = null;
						previousValue.Problems1.Remove(this);
					}
					this._OrganizationUnit1.Entity = value;
					if ((value != null))
					{
						value.Problems1.Add(this);
						this._ReportDepartmentID = value.UnitID;
					}
					else
					{
						this._ReportDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationUnit1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Problem2", Storage="_OrganizationUnit2", ThisKey="ProblemRelatedDepartmentID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit2
		{
			get
			{
				return this._OrganizationUnit2.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit2.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit2.Entity = null;
						previousValue.Problems2.Remove(this);
					}
					this._OrganizationUnit2.Entity = value;
					if ((value != null))
					{
						value.Problems2.Add(this);
						this._ProblemRelatedDepartmentID = value.UnitID;
					}
					else
					{
						this._ProblemRelatedDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationUnit2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProblemRiskSubCategories(ProblemRiskSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_ProblemRiskSubCategories(ProblemRiskSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_ProblemActions(ProblemAction entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_ProblemActions(ProblemAction entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_ProblemApprovalMembers(ProblemApprovalMember entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.Audit")]
	public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuditId;
		
		private string _AuditReference;
		
		private string _AuditTitle;
		
		private System.DateTime _PlannedAuditDate;
		
		private System.Nullable<System.DateTime> _ActualAuditDate;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private long _AuditTypeId;
		
		private System.Nullable<long> _ProcessDocumentID;
		
		private System.Nullable<int> _AuditStatusID;
		
		private string _Scope;
		
		private string _Summery;
		
		private string _Notes;
		
		private System.Nullable<int> _SupplierID;
		
		private System.Nullable<int> _ProjectID;
		
		private int @__Completed;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<CheckList> _CheckLists;
		
		private EntitySet<Auditor> _Auditors;
		
		private EntitySet<RelatedAuditUnit> _RelatedAuditUnits;
		
		private EntitySet<Finding> _Findings;
		
		private EntitySet<Recipient> _Recipients;
		
		private EntityRef<AuditType> _AuditType;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<ProjectInformation> _ProjectInformation;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<AuditStatus> _AuditStatus;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIdChanging(long value);
    partial void OnAuditIdChanged();
    partial void OnAuditReferenceChanging(string value);
    partial void OnAuditReferenceChanged();
    partial void OnAuditTitleChanging(string value);
    partial void OnAuditTitleChanged();
    partial void OnPlannedAuditDateChanging(System.DateTime value);
    partial void OnPlannedAuditDateChanged();
    partial void OnActualAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualAuditDateChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnAuditTypeIdChanging(long value);
    partial void OnAuditTypeIdChanged();
    partial void OnProcessDocumentIDChanging(System.Nullable<long> value);
    partial void OnProcessDocumentIDChanged();
    partial void OnAuditStatusIDChanging(System.Nullable<int> value);
    partial void OnAuditStatusIDChanged();
    partial void OnScopeChanging(string value);
    partial void OnScopeChanged();
    partial void OnSummeryChanging(string value);
    partial void OnSummeryChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void On_CompletedChanging(int value);
    partial void On_CompletedChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Audit()
		{
			this._CheckLists = new EntitySet<CheckList>(new Action<CheckList>(this.attach_CheckLists), new Action<CheckList>(this.detach_CheckLists));
			this._Auditors = new EntitySet<Auditor>(new Action<Auditor>(this.attach_Auditors), new Action<Auditor>(this.detach_Auditors));
			this._RelatedAuditUnits = new EntitySet<RelatedAuditUnit>(new Action<RelatedAuditUnit>(this.attach_RelatedAuditUnits), new Action<RelatedAuditUnit>(this.detach_RelatedAuditUnits));
			this._Findings = new EntitySet<Finding>(new Action<Finding>(this.attach_Findings), new Action<Finding>(this.detach_Findings));
			this._Recipients = new EntitySet<Recipient>(new Action<Recipient>(this.attach_Recipients), new Action<Recipient>(this.detach_Recipients));
			this._AuditType = default(EntityRef<AuditType>);
			this._Document = default(EntityRef<Document>);
			this._ProjectInformation = default(EntityRef<ProjectInformation>);
			this._RecordMode = default(EntityRef<RecordMode>);
			this._AuditStatus = default(EntityRef<AuditStatus>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditReference", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuditReference
		{
			get
			{
				return this._AuditReference;
			}
			set
			{
				if ((this._AuditReference != value))
				{
					this.OnAuditReferenceChanging(value);
					this.SendPropertyChanging();
					this._AuditReference = value;
					this.SendPropertyChanged("AuditReference");
					this.OnAuditReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditTitle", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string AuditTitle
		{
			get
			{
				return this._AuditTitle;
			}
			set
			{
				if ((this._AuditTitle != value))
				{
					this.OnAuditTitleChanging(value);
					this.SendPropertyChanging();
					this._AuditTitle = value;
					this.SendPropertyChanged("AuditTitle");
					this.OnAuditTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedAuditDate", DbType="DateTime NOT NULL")]
		public System.DateTime PlannedAuditDate
		{
			get
			{
				return this._PlannedAuditDate;
			}
			set
			{
				if ((this._PlannedAuditDate != value))
				{
					this.OnPlannedAuditDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedAuditDate = value;
					this.SendPropertyChanged("PlannedAuditDate");
					this.OnPlannedAuditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualAuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualAuditDate
		{
			get
			{
				return this._ActualAuditDate;
			}
			set
			{
				if ((this._ActualAuditDate != value))
				{
					this.OnActualAuditDateChanging(value);
					this.SendPropertyChanging();
					this._ActualAuditDate = value;
					this.SendPropertyChanged("ActualAuditDate");
					this.OnActualAuditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditTypeId", DbType="BigInt NOT NULL")]
		public long AuditTypeId
		{
			get
			{
				return this._AuditTypeId;
			}
			set
			{
				if ((this._AuditTypeId != value))
				{
					if (this._AuditType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AuditTypeId = value;
					this.SendPropertyChanged("AuditTypeId");
					this.OnAuditTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessDocumentID", DbType="BigInt")]
		public System.Nullable<long> ProcessDocumentID
		{
			get
			{
				return this._ProcessDocumentID;
			}
			set
			{
				if ((this._ProcessDocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessDocumentID = value;
					this.SendPropertyChanged("ProcessDocumentID");
					this.OnProcessDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditStatusID", DbType="Int")]
		public System.Nullable<int> AuditStatusID
		{
			get
			{
				return this._AuditStatusID;
			}
			set
			{
				if ((this._AuditStatusID != value))
				{
					if (this._AuditStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AuditStatusID = value;
					this.SendPropertyChanged("AuditStatusID");
					this.OnAuditStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scope", DbType="NVarChar(MAX)")]
		public string Scope
		{
			get
			{
				return this._Scope;
			}
			set
			{
				if ((this._Scope != value))
				{
					this.OnScopeChanging(value);
					this.SendPropertyChanging();
					this._Scope = value;
					this.SendPropertyChanged("Scope");
					this.OnScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summery", DbType="NVarChar(MAX)")]
		public string Summery
		{
			get
			{
				return this._Summery;
			}
			set
			{
				if ((this._Summery != value))
				{
					this.OnSummeryChanging(value);
					this.SendPropertyChanging();
					this._Summery = value;
					this.SendPropertyChanged("Summery");
					this.OnSummeryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[%Completed]", Storage="__Completed", DbType="Int NOT NULL")]
		public int _Completed
		{
			get
			{
				return this.@__Completed;
			}
			set
			{
				if ((this.@__Completed != value))
				{
					this.On_CompletedChanging(value);
					this.SendPropertyChanging();
					this.@__Completed = value;
					this.SendPropertyChanged("_Completed");
					this.On_CompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_CheckList", Storage="_CheckLists", ThisKey="AuditId", OtherKey="AuditID")]
		public EntitySet<CheckList> CheckLists
		{
			get
			{
				return this._CheckLists;
			}
			set
			{
				this._CheckLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_Auditor", Storage="_Auditors", ThisKey="AuditId", OtherKey="AuditID")]
		public EntitySet<Auditor> Auditors
		{
			get
			{
				return this._Auditors;
			}
			set
			{
				this._Auditors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_RelatedAuditUnit", Storage="_RelatedAuditUnits", ThisKey="AuditId", OtherKey="AuditID")]
		public EntitySet<RelatedAuditUnit> RelatedAuditUnits
		{
			get
			{
				return this._RelatedAuditUnits;
			}
			set
			{
				this._RelatedAuditUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_Finding", Storage="_Findings", ThisKey="AuditId", OtherKey="AuditId")]
		public EntitySet<Finding> Findings
		{
			get
			{
				return this._Findings;
			}
			set
			{
				this._Findings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_Recipient", Storage="_Recipients", ThisKey="AuditId", OtherKey="AuditID")]
		public EntitySet<Recipient> Recipients
		{
			get
			{
				return this._Recipients;
			}
			set
			{
				this._Recipients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditType_Audit", Storage="_AuditType", ThisKey="AuditTypeId", OtherKey="AuditTypeId", IsForeignKey=true)]
		public AuditType AuditType
		{
			get
			{
				return this._AuditType.Entity;
			}
			set
			{
				AuditType previousValue = this._AuditType.Entity;
				if (((previousValue != value) 
							|| (this._AuditType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditType.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._AuditType.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._AuditTypeId = value.AuditTypeId;
					}
					else
					{
						this._AuditTypeId = default(long);
					}
					this.SendPropertyChanged("AuditType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Audit", Storage="_Document", ThisKey="ProcessDocumentID", OtherKey="DocumentId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._ProcessDocumentID = value.DocumentId;
					}
					else
					{
						this._ProcessDocumentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectInformation_Audit", Storage="_ProjectInformation", ThisKey="ProjectID", OtherKey="ProjectId", IsForeignKey=true, DeleteRule="SET NULL")]
		public ProjectInformation ProjectInformation
		{
			get
			{
				return this._ProjectInformation.Entity;
			}
			set
			{
				ProjectInformation previousValue = this._ProjectInformation.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInformation.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._ProjectInformation.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._ProjectID = value.ProjectId;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Audit", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuditStatus_Audit", Storage="_AuditStatus", ThisKey="AuditStatusID", OtherKey="AuditStatusID", IsForeignKey=true)]
		public AuditStatus AuditStatus
		{
			get
			{
				return this._AuditStatus.Entity;
			}
			set
			{
				AuditStatus previousValue = this._AuditStatus.Entity;
				if (((previousValue != value) 
							|| (this._AuditStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuditStatus.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._AuditStatus.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._AuditStatusID = value.AuditStatusID;
					}
					else
					{
						this._AuditStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AuditStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Audit", Storage="_Customer", ThisKey="SupplierID", OtherKey="CustomerID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._SupplierID = value.CustomerID;
					}
					else
					{
						this._SupplierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CheckLists(CheckList entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_CheckLists(CheckList entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_Auditors(Auditor entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_Auditors(Auditor entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_RelatedAuditUnits(RelatedAuditUnit entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_RelatedAuditUnits(RelatedAuditUnit entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_Findings(Finding entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_Findings(Finding entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
		
		private void attach_Recipients(Recipient entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_Recipients(Recipient entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ManagementReviews.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _TaskName;
		
		private string _Description;
		
		private int _OwnerID;
		
		private System.DateTime _PlannedCloseDate;
		
		private System.Nullable<System.DateTime> _ActualCloseDate;
		
		private int _ReviewID;
		
		private bool _IsClosed;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<ReviewAction> _ReviewActions;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Review> _Review;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnPlannedCloseDateChanging(System.DateTime value);
    partial void OnPlannedCloseDateChanged();
    partial void OnActualCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualCloseDateChanged();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Task()
		{
			this._ReviewActions = new EntitySet<ReviewAction>(new Action<ReviewAction>(this.attach_ReviewActions), new Action<ReviewAction>(this.detach_ReviewActions));
			this._Employee = default(EntityRef<Employee>);
			this._Review = default(EntityRef<Review>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedCloseDate", DbType="DateTime NOT NULL")]
		public System.DateTime PlannedCloseDate
		{
			get
			{
				return this._PlannedCloseDate;
			}
			set
			{
				if ((this._PlannedCloseDate != value))
				{
					this.OnPlannedCloseDateChanging(value);
					this.SendPropertyChanging();
					this._PlannedCloseDate = value;
					this.SendPropertyChanged("PlannedCloseDate");
					this.OnPlannedCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCloseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualCloseDate
		{
			get
			{
				return this._ActualCloseDate;
			}
			set
			{
				if ((this._ActualCloseDate != value))
				{
					this.OnActualCloseDateChanging(value);
					this.SendPropertyChanging();
					this._ActualCloseDate = value;
					this.SendPropertyChanged("ActualCloseDate");
					this.OnActualCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", DbType="Int NOT NULL")]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ReviewAction", Storage="_ReviewActions", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<ReviewAction> ReviewActions
		{
			get
			{
				return this._ReviewActions;
			}
			set
			{
				this._ReviewActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Task", Storage="_Employee", ThisKey="OwnerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._OwnerID = value.EmployeeID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_Task", Storage="_Review", ThisKey="ReviewID", OtherKey="ReviewID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._ReviewID = value.ReviewID;
					}
					else
					{
						this._ReviewID = default(int);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReviewActions(ReviewAction entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_ReviewActions(ReviewAction entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostCentre")]
	public partial class CostCentre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostCentreID;
		
		private string _CostCentreNo;
		
		private string _CostCentreName;
		
		private int _UnitID;
		
		private int _ManagerID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<Risk> _Risks;
		
		private EntitySet<Risk> _Risks1;
		
		private EntitySet<Asset> _Assets;
		
		private EntitySet<Asset> _Assets1;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostCentreIDChanging(int value);
    partial void OnCostCentreIDChanged();
    partial void OnCostCentreNoChanging(string value);
    partial void OnCostCentreNoChanged();
    partial void OnCostCentreNameChanging(string value);
    partial void OnCostCentreNameChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnManagerIDChanging(int value);
    partial void OnManagerIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CostCentre()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			this._Risks1 = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks1), new Action<Risk>(this.detach_Risks1));
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._Assets1 = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets1), new Action<Asset>(this.detach_Assets1));
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCentreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CostCentreID
		{
			get
			{
				return this._CostCentreID;
			}
			set
			{
				if ((this._CostCentreID != value))
				{
					this.OnCostCentreIDChanging(value);
					this.SendPropertyChanging();
					this._CostCentreID = value;
					this.SendPropertyChanged("CostCentreID");
					this.OnCostCentreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCentreNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CostCentreNo
		{
			get
			{
				return this._CostCentreNo;
			}
			set
			{
				if ((this._CostCentreNo != value))
				{
					this.OnCostCentreNoChanging(value);
					this.SendPropertyChanging();
					this._CostCentreNo = value;
					this.SendPropertyChanged("CostCentreNo");
					this.OnCostCentreNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCentreName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CostCentreName
		{
			get
			{
				return this._CostCentreName;
			}
			set
			{
				if ((this._CostCentreName != value))
				{
					this.OnCostCentreNameChanging(value);
					this.SendPropertyChanging();
					this._CostCentreName = value;
					this.SendPropertyChanged("CostCentreName");
					this.OnCostCentreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Int NOT NULL")]
		public int ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Risk", Storage="_Risks", ThisKey="CostCentreID", OtherKey="CostCentre1ID")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Risk1", Storage="_Risks1", ThisKey="CostCentreID", OtherKey="CostCentre2ID")]
		public EntitySet<Risk> Risks1
		{
			get
			{
				return this._Risks1;
			}
			set
			{
				this._Risks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Asset", Storage="_Assets", ThisKey="CostCentreID", OtherKey="CostCentreId")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Asset1", Storage="_Assets1", ThisKey="CostCentreID", OtherKey="OtherCostCentreId")]
		public EntitySet<Asset> Assets1
		{
			get
			{
				return this._Assets1;
			}
			set
			{
				this._Assets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_CostCentre", Storage="_OrganizationUnit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.CostCentres.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.CostCentres.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CostCentre", Storage="_Employee", ThisKey="ManagerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CostCentres.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CostCentres.Add(this);
						this._ManagerID = value.EmployeeID;
					}
					else
					{
						this._ManagerID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre = null;
		}
		
		private void attach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre1 = this;
		}
		
		private void detach_Risks1(Risk entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre1 = null;
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre = null;
		}
		
		private void attach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre1 = this;
		}
		
		private void detach_Assets1(Asset entity)
		{
			this.SendPropertyChanging();
			entity.CostCentre1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AssetManagement.Asset")]
	public partial class Asset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AssetId;
		
		private string _Tag;
		
		private string _OtherTag;
		
		private string _Description;
		
		private string _SerialNumber;
		
		private string _BarCode;
		
		private string _Model;
		
		private System.Nullable<long> _AssetCategoryId;
		
		private System.Nullable<int> _SupplierId;
		
		private int _OwnerId;
		
		private System.Nullable<int> _DepartmentID;
		
		private string _RoomNo;
		
		private string _FloorNo;
		
		private decimal _PurchasePrice;
		
		private int _CurrencyID;
		
		private System.Nullable<System.DateTime> _DisposeDate;
		
		private System.DateTime _InstallationDate;
		
		private System.DateTime _PurchaseDate;
		
		private System.DateTime _AcquistionDate;
		
		private int _DepreciableLife;
		
		private int _PeriodID;
		
		private System.Nullable<long> _DepreciationMethodId;
		
		private decimal _CurrentAssetValue;
		
		private System.Nullable<int> _AssetStatusId;
		
		private string _Remarks;
		
		private int _CostCentreId;
		
		private System.Nullable<int> _OtherCostCentreId;
		
		private System.Nullable<long> _BillingCategoryId;
		
		private bool _Billable;
		
		private string _Retirement;
		
		private string _RetirementRemarks;
		
		private System.Nullable<long> _AssetAcquisitionMethodId;
		
		private string _AccountingCode;
		
		private string _ExternalPurchaseOrder;
		
		private string _WorkRequestNumber;
		
		private string _Manufacturer;
		
		private System.Nullable<int> _CalibrationFrequancy;
		
		private System.Nullable<int> _CalibrationPeriodID;
		
		private bool _HasElectricalTest;
		
		private System.Nullable<int> _ElectricalTestFrequancy;
		
		private System.Nullable<int> _ElectricalTestPeriodID;
		
		private System.Nullable<long> _ElectricalTestDocumentId;
		
		private System.Nullable<long> _ElectricalTestStatusId;
		
		private bool _HasCalibration;
		
		private System.Nullable<long> _CalibrationDocumentId;
		
		private System.Nullable<long> _CalibrationStatusId;
		
		private System.Nullable<int> _AnotherOwnerId;
		
		private System.Nullable<int> _AnotherExternalOwnerID;
		
		private bool _HasMaintenance;
		
		private System.Nullable<int> _MaintenanceFrequancy;
		
		private System.Nullable<int> _MaintenancePeriodID;
		
		private System.Nullable<long> _MaintenanceDocumentId;
		
		private System.Nullable<long> _MaintenanceStatusId;
		
		private int _RecordModeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntitySet<AssetDepreciation> _AssetDepreciations;
		
		private EntitySet<AssetCalibration> _AssetCalibrations;
		
		private EntitySet<AssetMaintenance> _AssetMaintenances;
		
		private EntitySet<AssetElectricalTest> _AssetElectricalTests;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<AssetAcquisitionMethod> _AssetAcquisitionMethod;
		
		private EntityRef<AssetCalibrationStatus> _AssetCalibrationStatus;
		
		private EntityRef<AssetCategory> _AssetCategory;
		
		private EntityRef<AssetDepreciationMethod> _AssetDepreciationMethod;
		
		private EntityRef<AssetElectricalTestStatus> _AssetElectricalTestStatus;
		
		private EntityRef<AssetMaintenanceStatus> _AssetMaintenanceStatus;
		
		private EntityRef<AssetStatus> _AssetStatus;
		
		private EntityRef<BillingCategory> _BillingCategory;
		
		private EntityRef<Period> _Period;
		
		private EntityRef<CostCentre> _CostCentre;
		
		private EntityRef<CostCentre> _CostCentre1;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Document> _Document1;
		
		private EntityRef<Document> _Document2;
		
		private EntityRef<Period> _Period1;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Period> _Period2;
		
		private EntityRef<OrganizationUnit> _OrganizationUnit;
		
		private EntityRef<Period> _Period3;
		
		private EntityRef<RecordMode> _RecordMode;
		
		private EntityRef<Customer> _Customer1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetIdChanging(long value);
    partial void OnAssetIdChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnOtherTagChanging(string value);
    partial void OnOtherTagChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnAssetCategoryIdChanging(System.Nullable<long> value);
    partial void OnAssetCategoryIdChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnRoomNoChanging(string value);
    partial void OnRoomNoChanged();
    partial void OnFloorNoChanging(string value);
    partial void OnFloorNoChanged();
    partial void OnPurchasePriceChanging(decimal value);
    partial void OnPurchasePriceChanged();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnDisposeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDisposeDateChanged();
    partial void OnInstallationDateChanging(System.DateTime value);
    partial void OnInstallationDateChanged();
    partial void OnPurchaseDateChanging(System.DateTime value);
    partial void OnPurchaseDateChanged();
    partial void OnAcquistionDateChanging(System.DateTime value);
    partial void OnAcquistionDateChanged();
    partial void OnDepreciableLifeChanging(int value);
    partial void OnDepreciableLifeChanged();
    partial void OnPeriodIDChanging(int value);
    partial void OnPeriodIDChanged();
    partial void OnDepreciationMethodIdChanging(System.Nullable<long> value);
    partial void OnDepreciationMethodIdChanged();
    partial void OnCurrentAssetValueChanging(decimal value);
    partial void OnCurrentAssetValueChanged();
    partial void OnAssetStatusIdChanging(System.Nullable<int> value);
    partial void OnAssetStatusIdChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnCostCentreIdChanging(int value);
    partial void OnCostCentreIdChanged();
    partial void OnOtherCostCentreIdChanging(System.Nullable<int> value);
    partial void OnOtherCostCentreIdChanged();
    partial void OnBillingCategoryIdChanging(System.Nullable<long> value);
    partial void OnBillingCategoryIdChanged();
    partial void OnBillableChanging(bool value);
    partial void OnBillableChanged();
    partial void OnRetirementChanging(string value);
    partial void OnRetirementChanged();
    partial void OnRetirementRemarksChanging(string value);
    partial void OnRetirementRemarksChanged();
    partial void OnAssetAcquisitionMethodIdChanging(System.Nullable<long> value);
    partial void OnAssetAcquisitionMethodIdChanged();
    partial void OnAccountingCodeChanging(string value);
    partial void OnAccountingCodeChanged();
    partial void OnExternalPurchaseOrderChanging(string value);
    partial void OnExternalPurchaseOrderChanged();
    partial void OnWorkRequestNumberChanging(string value);
    partial void OnWorkRequestNumberChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnCalibrationFrequancyChanging(System.Nullable<int> value);
    partial void OnCalibrationFrequancyChanged();
    partial void OnCalibrationPeriodIDChanging(System.Nullable<int> value);
    partial void OnCalibrationPeriodIDChanged();
    partial void OnHasElectricalTestChanging(bool value);
    partial void OnHasElectricalTestChanged();
    partial void OnElectricalTestFrequancyChanging(System.Nullable<int> value);
    partial void OnElectricalTestFrequancyChanged();
    partial void OnElectricalTestPeriodIDChanging(System.Nullable<int> value);
    partial void OnElectricalTestPeriodIDChanged();
    partial void OnElectricalTestDocumentIdChanging(System.Nullable<long> value);
    partial void OnElectricalTestDocumentIdChanged();
    partial void OnElectricalTestStatusIdChanging(System.Nullable<long> value);
    partial void OnElectricalTestStatusIdChanged();
    partial void OnHasCalibrationChanging(bool value);
    partial void OnHasCalibrationChanged();
    partial void OnCalibrationDocumentIdChanging(System.Nullable<long> value);
    partial void OnCalibrationDocumentIdChanged();
    partial void OnCalibrationStatusIdChanging(System.Nullable<long> value);
    partial void OnCalibrationStatusIdChanged();
    partial void OnAnotherOwnerIdChanging(System.Nullable<int> value);
    partial void OnAnotherOwnerIdChanged();
    partial void OnAnotherExternalOwnerIDChanging(System.Nullable<int> value);
    partial void OnAnotherExternalOwnerIDChanged();
    partial void OnHasMaintenanceChanging(bool value);
    partial void OnHasMaintenanceChanged();
    partial void OnMaintenanceFrequancyChanging(System.Nullable<int> value);
    partial void OnMaintenanceFrequancyChanged();
    partial void OnMaintenancePeriodIDChanging(System.Nullable<int> value);
    partial void OnMaintenancePeriodIDChanged();
    partial void OnMaintenanceDocumentIdChanging(System.Nullable<long> value);
    partial void OnMaintenanceDocumentIdChanged();
    partial void OnMaintenanceStatusIdChanging(System.Nullable<long> value);
    partial void OnMaintenanceStatusIdChanged();
    partial void OnRecordModeIDChanging(int value);
    partial void OnRecordModeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Asset()
		{
			this._AssetDepreciations = new EntitySet<AssetDepreciation>(new Action<AssetDepreciation>(this.attach_AssetDepreciations), new Action<AssetDepreciation>(this.detach_AssetDepreciations));
			this._AssetCalibrations = new EntitySet<AssetCalibration>(new Action<AssetCalibration>(this.attach_AssetCalibrations), new Action<AssetCalibration>(this.detach_AssetCalibrations));
			this._AssetMaintenances = new EntitySet<AssetMaintenance>(new Action<AssetMaintenance>(this.attach_AssetMaintenances), new Action<AssetMaintenance>(this.detach_AssetMaintenances));
			this._AssetElectricalTests = new EntitySet<AssetElectricalTest>(new Action<AssetElectricalTest>(this.attach_AssetElectricalTests), new Action<AssetElectricalTest>(this.detach_AssetElectricalTests));
			this._Employee = default(EntityRef<Employee>);
			this._AssetAcquisitionMethod = default(EntityRef<AssetAcquisitionMethod>);
			this._AssetCalibrationStatus = default(EntityRef<AssetCalibrationStatus>);
			this._AssetCategory = default(EntityRef<AssetCategory>);
			this._AssetDepreciationMethod = default(EntityRef<AssetDepreciationMethod>);
			this._AssetElectricalTestStatus = default(EntityRef<AssetElectricalTestStatus>);
			this._AssetMaintenanceStatus = default(EntityRef<AssetMaintenanceStatus>);
			this._AssetStatus = default(EntityRef<AssetStatus>);
			this._BillingCategory = default(EntityRef<BillingCategory>);
			this._Period = default(EntityRef<Period>);
			this._CostCentre = default(EntityRef<CostCentre>);
			this._CostCentre1 = default(EntityRef<CostCentre>);
			this._Currency = default(EntityRef<Currency>);
			this._Document = default(EntityRef<Document>);
			this._Document1 = default(EntityRef<Document>);
			this._Document2 = default(EntityRef<Document>);
			this._Period1 = default(EntityRef<Period>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Customer = default(EntityRef<Customer>);
			this._Period2 = default(EntityRef<Period>);
			this._OrganizationUnit = default(EntityRef<OrganizationUnit>);
			this._Period3 = default(EntityRef<Period>);
			this._RecordMode = default(EntityRef<RecordMode>);
			this._Customer1 = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AssetId
		{
			get
			{
				return this._AssetId;
			}
			set
			{
				if ((this._AssetId != value))
				{
					this.OnAssetIdChanging(value);
					this.SendPropertyChanging();
					this._AssetId = value;
					this.SendPropertyChanged("AssetId");
					this.OnAssetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherTag", DbType="NVarChar(50)")]
		public string OtherTag
		{
			get
			{
				return this._OtherTag;
			}
			set
			{
				if ((this._OtherTag != value))
				{
					this.OnOtherTagChanging(value);
					this.SendPropertyChanging();
					this._OtherTag = value;
					this.SendPropertyChanged("OtherTag");
					this.OnOtherTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NVarChar(50)")]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(50)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetCategoryId", DbType="BigInt")]
		public System.Nullable<long> AssetCategoryId
		{
			get
			{
				return this._AssetCategoryId;
			}
			set
			{
				if ((this._AssetCategoryId != value))
				{
					if (this._AssetCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AssetCategoryId = value;
					this.SendPropertyChanged("AssetCategoryId");
					this.OnAssetCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int")]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Customer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int NOT NULL")]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._OrganizationUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNo", DbType="NVarChar(300)")]
		public string RoomNo
		{
			get
			{
				return this._RoomNo;
			}
			set
			{
				if ((this._RoomNo != value))
				{
					this.OnRoomNoChanging(value);
					this.SendPropertyChanging();
					this._RoomNo = value;
					this.SendPropertyChanged("RoomNo");
					this.OnRoomNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloorNo", DbType="NVarChar(300)")]
		public string FloorNo
		{
			get
			{
				return this._FloorNo;
			}
			set
			{
				if ((this._FloorNo != value))
				{
					this.OnFloorNoChanging(value);
					this.SendPropertyChanging();
					this._FloorNo = value;
					this.SendPropertyChanged("FloorNo");
					this.OnFloorNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL")]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisposeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DisposeDate
		{
			get
			{
				return this._DisposeDate;
			}
			set
			{
				if ((this._DisposeDate != value))
				{
					this.OnDisposeDateChanging(value);
					this.SendPropertyChanging();
					this._DisposeDate = value;
					this.SendPropertyChanged("DisposeDate");
					this.OnDisposeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallationDate", DbType="DateTime NOT NULL")]
		public System.DateTime InstallationDate
		{
			get
			{
				return this._InstallationDate;
			}
			set
			{
				if ((this._InstallationDate != value))
				{
					this.OnInstallationDateChanging(value);
					this.SendPropertyChanging();
					this._InstallationDate = value;
					this.SendPropertyChanged("InstallationDate");
					this.OnInstallationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseDate", DbType="DateTime NOT NULL")]
		public System.DateTime PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if ((this._PurchaseDate != value))
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcquistionDate", DbType="DateTime NOT NULL")]
		public System.DateTime AcquistionDate
		{
			get
			{
				return this._AcquistionDate;
			}
			set
			{
				if ((this._AcquistionDate != value))
				{
					this.OnAcquistionDateChanging(value);
					this.SendPropertyChanging();
					this._AcquistionDate = value;
					this.SendPropertyChanged("AcquistionDate");
					this.OnAcquistionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepreciableLife", DbType="Int NOT NULL")]
		public int DepreciableLife
		{
			get
			{
				return this._DepreciableLife;
			}
			set
			{
				if ((this._DepreciableLife != value))
				{
					this.OnDepreciableLifeChanging(value);
					this.SendPropertyChanging();
					this._DepreciableLife = value;
					this.SendPropertyChanged("DepreciableLife");
					this.OnDepreciableLifeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int NOT NULL")]
		public int PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					if (this._Period3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepreciationMethodId", DbType="BigInt")]
		public System.Nullable<long> DepreciationMethodId
		{
			get
			{
				return this._DepreciationMethodId;
			}
			set
			{
				if ((this._DepreciationMethodId != value))
				{
					if (this._AssetDepreciationMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepreciationMethodIdChanging(value);
					this.SendPropertyChanging();
					this._DepreciationMethodId = value;
					this.SendPropertyChanged("DepreciationMethodId");
					this.OnDepreciationMethodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentAssetValue", DbType="Decimal(10,2) NOT NULL")]
		public decimal CurrentAssetValue
		{
			get
			{
				return this._CurrentAssetValue;
			}
			set
			{
				if ((this._CurrentAssetValue != value))
				{
					this.OnCurrentAssetValueChanging(value);
					this.SendPropertyChanging();
					this._CurrentAssetValue = value;
					this.SendPropertyChanged("CurrentAssetValue");
					this.OnCurrentAssetValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetStatusId", DbType="Int")]
		public System.Nullable<int> AssetStatusId
		{
			get
			{
				return this._AssetStatusId;
			}
			set
			{
				if ((this._AssetStatusId != value))
				{
					if (this._AssetStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AssetStatusId = value;
					this.SendPropertyChanged("AssetStatusId");
					this.OnAssetStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCentreId", DbType="Int NOT NULL")]
		public int CostCentreId
		{
			get
			{
				return this._CostCentreId;
			}
			set
			{
				if ((this._CostCentreId != value))
				{
					if (this._CostCentre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCentreIdChanging(value);
					this.SendPropertyChanging();
					this._CostCentreId = value;
					this.SendPropertyChanged("CostCentreId");
					this.OnCostCentreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherCostCentreId", DbType="Int")]
		public System.Nullable<int> OtherCostCentreId
		{
			get
			{
				return this._OtherCostCentreId;
			}
			set
			{
				if ((this._OtherCostCentreId != value))
				{
					if (this._CostCentre1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOtherCostCentreIdChanging(value);
					this.SendPropertyChanging();
					this._OtherCostCentreId = value;
					this.SendPropertyChanged("OtherCostCentreId");
					this.OnOtherCostCentreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCategoryId", DbType="BigInt")]
		public System.Nullable<long> BillingCategoryId
		{
			get
			{
				return this._BillingCategoryId;
			}
			set
			{
				if ((this._BillingCategoryId != value))
				{
					if (this._BillingCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._BillingCategoryId = value;
					this.SendPropertyChanged("BillingCategoryId");
					this.OnBillingCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Billable", DbType="Bit NOT NULL")]
		public bool Billable
		{
			get
			{
				return this._Billable;
			}
			set
			{
				if ((this._Billable != value))
				{
					this.OnBillableChanging(value);
					this.SendPropertyChanging();
					this._Billable = value;
					this.SendPropertyChanged("Billable");
					this.OnBillableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Retirement", DbType="NVarChar(50)")]
		public string Retirement
		{
			get
			{
				return this._Retirement;
			}
			set
			{
				if ((this._Retirement != value))
				{
					this.OnRetirementChanging(value);
					this.SendPropertyChanging();
					this._Retirement = value;
					this.SendPropertyChanged("Retirement");
					this.OnRetirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetirementRemarks", DbType="NVarChar(MAX)")]
		public string RetirementRemarks
		{
			get
			{
				return this._RetirementRemarks;
			}
			set
			{
				if ((this._RetirementRemarks != value))
				{
					this.OnRetirementRemarksChanging(value);
					this.SendPropertyChanging();
					this._RetirementRemarks = value;
					this.SendPropertyChanged("RetirementRemarks");
					this.OnRetirementRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetAcquisitionMethodId", DbType="BigInt")]
		public System.Nullable<long> AssetAcquisitionMethodId
		{
			get
			{
				return this._AssetAcquisitionMethodId;
			}
			set
			{
				if ((this._AssetAcquisitionMethodId != value))
				{
					if (this._AssetAcquisitionMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetAcquisitionMethodIdChanging(value);
					this.SendPropertyChanging();
					this._AssetAcquisitionMethodId = value;
					this.SendPropertyChanged("AssetAcquisitionMethodId");
					this.OnAssetAcquisitionMethodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingCode", DbType="NVarChar(50)")]
		public string AccountingCode
		{
			get
			{
				return this._AccountingCode;
			}
			set
			{
				if ((this._AccountingCode != value))
				{
					this.OnAccountingCodeChanging(value);
					this.SendPropertyChanging();
					this._AccountingCode = value;
					this.SendPropertyChanged("AccountingCode");
					this.OnAccountingCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalPurchaseOrder", DbType="NVarChar(50)")]
		public string ExternalPurchaseOrder
		{
			get
			{
				return this._ExternalPurchaseOrder;
			}
			set
			{
				if ((this._ExternalPurchaseOrder != value))
				{
					this.OnExternalPurchaseOrderChanging(value);
					this.SendPropertyChanging();
					this._ExternalPurchaseOrder = value;
					this.SendPropertyChanged("ExternalPurchaseOrder");
					this.OnExternalPurchaseOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkRequestNumber", DbType="NVarChar(50)")]
		public string WorkRequestNumber
		{
			get
			{
				return this._WorkRequestNumber;
			}
			set
			{
				if ((this._WorkRequestNumber != value))
				{
					this.OnWorkRequestNumberChanging(value);
					this.SendPropertyChanging();
					this._WorkRequestNumber = value;
					this.SendPropertyChanged("WorkRequestNumber");
					this.OnWorkRequestNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NVarChar(50)")]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationFrequancy", DbType="Int")]
		public System.Nullable<int> CalibrationFrequancy
		{
			get
			{
				return this._CalibrationFrequancy;
			}
			set
			{
				if ((this._CalibrationFrequancy != value))
				{
					this.OnCalibrationFrequancyChanging(value);
					this.SendPropertyChanging();
					this._CalibrationFrequancy = value;
					this.SendPropertyChanged("CalibrationFrequancy");
					this.OnCalibrationFrequancyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationPeriodID", DbType="Int")]
		public System.Nullable<int> CalibrationPeriodID
		{
			get
			{
				return this._CalibrationPeriodID;
			}
			set
			{
				if ((this._CalibrationPeriodID != value))
				{
					if (this._Period.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalibrationPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._CalibrationPeriodID = value;
					this.SendPropertyChanged("CalibrationPeriodID");
					this.OnCalibrationPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasElectricalTest", DbType="Bit NOT NULL")]
		public bool HasElectricalTest
		{
			get
			{
				return this._HasElectricalTest;
			}
			set
			{
				if ((this._HasElectricalTest != value))
				{
					this.OnHasElectricalTestChanging(value);
					this.SendPropertyChanging();
					this._HasElectricalTest = value;
					this.SendPropertyChanged("HasElectricalTest");
					this.OnHasElectricalTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestFrequancy", DbType="Int")]
		public System.Nullable<int> ElectricalTestFrequancy
		{
			get
			{
				return this._ElectricalTestFrequancy;
			}
			set
			{
				if ((this._ElectricalTestFrequancy != value))
				{
					this.OnElectricalTestFrequancyChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestFrequancy = value;
					this.SendPropertyChanged("ElectricalTestFrequancy");
					this.OnElectricalTestFrequancyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestPeriodID", DbType="Int")]
		public System.Nullable<int> ElectricalTestPeriodID
		{
			get
			{
				return this._ElectricalTestPeriodID;
			}
			set
			{
				if ((this._ElectricalTestPeriodID != value))
				{
					if (this._Period1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalTestPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestPeriodID = value;
					this.SendPropertyChanged("ElectricalTestPeriodID");
					this.OnElectricalTestPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestDocumentId", DbType="BigInt")]
		public System.Nullable<long> ElectricalTestDocumentId
		{
			get
			{
				return this._ElectricalTestDocumentId;
			}
			set
			{
				if ((this._ElectricalTestDocumentId != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalTestDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestDocumentId = value;
					this.SendPropertyChanged("ElectricalTestDocumentId");
					this.OnElectricalTestDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricalTestStatusId", DbType="BigInt")]
		public System.Nullable<long> ElectricalTestStatusId
		{
			get
			{
				return this._ElectricalTestStatusId;
			}
			set
			{
				if ((this._ElectricalTestStatusId != value))
				{
					if (this._AssetElectricalTestStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectricalTestStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ElectricalTestStatusId = value;
					this.SendPropertyChanged("ElectricalTestStatusId");
					this.OnElectricalTestStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasCalibration", DbType="Bit NOT NULL")]
		public bool HasCalibration
		{
			get
			{
				return this._HasCalibration;
			}
			set
			{
				if ((this._HasCalibration != value))
				{
					this.OnHasCalibrationChanging(value);
					this.SendPropertyChanging();
					this._HasCalibration = value;
					this.SendPropertyChanged("HasCalibration");
					this.OnHasCalibrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDocumentId", DbType="BigInt")]
		public System.Nullable<long> CalibrationDocumentId
		{
			get
			{
				return this._CalibrationDocumentId;
			}
			set
			{
				if ((this._CalibrationDocumentId != value))
				{
					if (this._Document1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalibrationDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDocumentId = value;
					this.SendPropertyChanged("CalibrationDocumentId");
					this.OnCalibrationDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationStatusId", DbType="BigInt")]
		public System.Nullable<long> CalibrationStatusId
		{
			get
			{
				return this._CalibrationStatusId;
			}
			set
			{
				if ((this._CalibrationStatusId != value))
				{
					if (this._AssetCalibrationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalibrationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CalibrationStatusId = value;
					this.SendPropertyChanged("CalibrationStatusId");
					this.OnCalibrationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnotherOwnerId", DbType="Int")]
		public System.Nullable<int> AnotherOwnerId
		{
			get
			{
				return this._AnotherOwnerId;
			}
			set
			{
				if ((this._AnotherOwnerId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnotherOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._AnotherOwnerId = value;
					this.SendPropertyChanged("AnotherOwnerId");
					this.OnAnotherOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnotherExternalOwnerID", DbType="Int")]
		public System.Nullable<int> AnotherExternalOwnerID
		{
			get
			{
				return this._AnotherExternalOwnerID;
			}
			set
			{
				if ((this._AnotherExternalOwnerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnotherExternalOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._AnotherExternalOwnerID = value;
					this.SendPropertyChanged("AnotherExternalOwnerID");
					this.OnAnotherExternalOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasMaintenance", DbType="Bit NOT NULL")]
		public bool HasMaintenance
		{
			get
			{
				return this._HasMaintenance;
			}
			set
			{
				if ((this._HasMaintenance != value))
				{
					this.OnHasMaintenanceChanging(value);
					this.SendPropertyChanging();
					this._HasMaintenance = value;
					this.SendPropertyChanged("HasMaintenance");
					this.OnHasMaintenanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceFrequancy", DbType="Int")]
		public System.Nullable<int> MaintenanceFrequancy
		{
			get
			{
				return this._MaintenanceFrequancy;
			}
			set
			{
				if ((this._MaintenanceFrequancy != value))
				{
					this.OnMaintenanceFrequancyChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceFrequancy = value;
					this.SendPropertyChanged("MaintenanceFrequancy");
					this.OnMaintenanceFrequancyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenancePeriodID", DbType="Int")]
		public System.Nullable<int> MaintenancePeriodID
		{
			get
			{
				return this._MaintenancePeriodID;
			}
			set
			{
				if ((this._MaintenancePeriodID != value))
				{
					if (this._Period2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaintenancePeriodIDChanging(value);
					this.SendPropertyChanging();
					this._MaintenancePeriodID = value;
					this.SendPropertyChanged("MaintenancePeriodID");
					this.OnMaintenancePeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceDocumentId", DbType="BigInt")]
		public System.Nullable<long> MaintenanceDocumentId
		{
			get
			{
				return this._MaintenanceDocumentId;
			}
			set
			{
				if ((this._MaintenanceDocumentId != value))
				{
					if (this._Document2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaintenanceDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceDocumentId = value;
					this.SendPropertyChanged("MaintenanceDocumentId");
					this.OnMaintenanceDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceStatusId", DbType="BigInt")]
		public System.Nullable<long> MaintenanceStatusId
		{
			get
			{
				return this._MaintenanceStatusId;
			}
			set
			{
				if ((this._MaintenanceStatusId != value))
				{
					if (this._AssetMaintenanceStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaintenanceStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceStatusId = value;
					this.SendPropertyChanged("MaintenanceStatusId");
					this.OnMaintenanceStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordModeID", DbType="Int NOT NULL")]
		public int RecordModeID
		{
			get
			{
				return this._RecordModeID;
			}
			set
			{
				if ((this._RecordModeID != value))
				{
					if (this._RecordMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordModeIDChanging(value);
					this.SendPropertyChanging();
					this._RecordModeID = value;
					this.SendPropertyChanged("RecordModeID");
					this.OnRecordModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetDepreciation", Storage="_AssetDepreciations", ThisKey="AssetId", OtherKey="AssetId")]
		public EntitySet<AssetDepreciation> AssetDepreciations
		{
			get
			{
				return this._AssetDepreciations;
			}
			set
			{
				this._AssetDepreciations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetCalibration", Storage="_AssetCalibrations", ThisKey="AssetId", OtherKey="AssetId")]
		public EntitySet<AssetCalibration> AssetCalibrations
		{
			get
			{
				return this._AssetCalibrations;
			}
			set
			{
				this._AssetCalibrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetMaintenance", Storage="_AssetMaintenances", ThisKey="AssetId", OtherKey="AssetId")]
		public EntitySet<AssetMaintenance> AssetMaintenances
		{
			get
			{
				return this._AssetMaintenances;
			}
			set
			{
				this._AssetMaintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AssetElectricalTest", Storage="_AssetElectricalTests", ThisKey="AssetId", OtherKey="AssetId")]
		public EntitySet<AssetElectricalTest> AssetElectricalTests
		{
			get
			{
				return this._AssetElectricalTests;
			}
			set
			{
				this._AssetElectricalTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Asset", Storage="_Employee", ThisKey="AnotherOwnerId", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._AnotherOwnerId = value.EmployeeID;
					}
					else
					{
						this._AnotherOwnerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetAcquisitionMethod_Asset", Storage="_AssetAcquisitionMethod", ThisKey="AssetAcquisitionMethodId", OtherKey="AssetAcquisitionMethodId", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetAcquisitionMethod AssetAcquisitionMethod
		{
			get
			{
				return this._AssetAcquisitionMethod.Entity;
			}
			set
			{
				AssetAcquisitionMethod previousValue = this._AssetAcquisitionMethod.Entity;
				if (((previousValue != value) 
							|| (this._AssetAcquisitionMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetAcquisitionMethod.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetAcquisitionMethod.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._AssetAcquisitionMethodId = value.AssetAcquisitionMethodId;
					}
					else
					{
						this._AssetAcquisitionMethodId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AssetAcquisitionMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetCalibrationStatus_Asset", Storage="_AssetCalibrationStatus", ThisKey="CalibrationStatusId", OtherKey="AssetCalibrationStatusId", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetCalibrationStatus AssetCalibrationStatus
		{
			get
			{
				return this._AssetCalibrationStatus.Entity;
			}
			set
			{
				AssetCalibrationStatus previousValue = this._AssetCalibrationStatus.Entity;
				if (((previousValue != value) 
							|| (this._AssetCalibrationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetCalibrationStatus.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetCalibrationStatus.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._CalibrationStatusId = value.AssetCalibrationStatusId;
					}
					else
					{
						this._CalibrationStatusId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AssetCalibrationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetCategory_Asset", Storage="_AssetCategory", ThisKey="AssetCategoryId", OtherKey="AssetCategoryId", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetCategory AssetCategory
		{
			get
			{
				return this._AssetCategory.Entity;
			}
			set
			{
				AssetCategory previousValue = this._AssetCategory.Entity;
				if (((previousValue != value) 
							|| (this._AssetCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetCategory.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetCategory.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._AssetCategoryId = value.AssetCategoryId;
					}
					else
					{
						this._AssetCategoryId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AssetCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetDepreciationMethod_Asset", Storage="_AssetDepreciationMethod", ThisKey="DepreciationMethodId", OtherKey="AssetDepreciationMethodId", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetDepreciationMethod AssetDepreciationMethod
		{
			get
			{
				return this._AssetDepreciationMethod.Entity;
			}
			set
			{
				AssetDepreciationMethod previousValue = this._AssetDepreciationMethod.Entity;
				if (((previousValue != value) 
							|| (this._AssetDepreciationMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetDepreciationMethod.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetDepreciationMethod.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._DepreciationMethodId = value.AssetDepreciationMethodId;
					}
					else
					{
						this._DepreciationMethodId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AssetDepreciationMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetElectricalTestStatus_Asset", Storage="_AssetElectricalTestStatus", ThisKey="ElectricalTestStatusId", OtherKey="AssetElectricalTestStatusId", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetElectricalTestStatus AssetElectricalTestStatus
		{
			get
			{
				return this._AssetElectricalTestStatus.Entity;
			}
			set
			{
				AssetElectricalTestStatus previousValue = this._AssetElectricalTestStatus.Entity;
				if (((previousValue != value) 
							|| (this._AssetElectricalTestStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetElectricalTestStatus.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetElectricalTestStatus.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._ElectricalTestStatusId = value.AssetElectricalTestStatusId;
					}
					else
					{
						this._ElectricalTestStatusId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AssetElectricalTestStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetMaintenanceStatus_Asset", Storage="_AssetMaintenanceStatus", ThisKey="MaintenanceStatusId", OtherKey="AssetMaintenanceStatusId", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetMaintenanceStatus AssetMaintenanceStatus
		{
			get
			{
				return this._AssetMaintenanceStatus.Entity;
			}
			set
			{
				AssetMaintenanceStatus previousValue = this._AssetMaintenanceStatus.Entity;
				if (((previousValue != value) 
							|| (this._AssetMaintenanceStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetMaintenanceStatus.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetMaintenanceStatus.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._MaintenanceStatusId = value.AssetMaintenanceStatusId;
					}
					else
					{
						this._MaintenanceStatusId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AssetMaintenanceStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssetStatus_Asset", Storage="_AssetStatus", ThisKey="AssetStatusId", OtherKey="AssetStatusID", IsForeignKey=true, DeleteRule="SET NULL")]
		public AssetStatus AssetStatus
		{
			get
			{
				return this._AssetStatus.Entity;
			}
			set
			{
				AssetStatus previousValue = this._AssetStatus.Entity;
				if (((previousValue != value) 
							|| (this._AssetStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssetStatus.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._AssetStatus.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._AssetStatusId = value.AssetStatusID;
					}
					else
					{
						this._AssetStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AssetStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillingCategory_Asset", Storage="_BillingCategory", ThisKey="BillingCategoryId", OtherKey="BillingCategoryId", IsForeignKey=true, DeleteRule="SET NULL")]
		public BillingCategory BillingCategory
		{
			get
			{
				return this._BillingCategory.Entity;
			}
			set
			{
				BillingCategory previousValue = this._BillingCategory.Entity;
				if (((previousValue != value) 
							|| (this._BillingCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingCategory.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._BillingCategory.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._BillingCategoryId = value.BillingCategoryId;
					}
					else
					{
						this._BillingCategoryId = default(Nullable<long>);
					}
					this.SendPropertyChanged("BillingCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset", Storage="_Period", ThisKey="CalibrationPeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period
		{
			get
			{
				return this._Period.Entity;
			}
			set
			{
				Period previousValue = this._Period.Entity;
				if (((previousValue != value) 
							|| (this._Period.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Period.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._CalibrationPeriodID = value.PeriodID;
					}
					else
					{
						this._CalibrationPeriodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Period");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Asset", Storage="_CostCentre", ThisKey="CostCentreId", OtherKey="CostCentreID", IsForeignKey=true)]
		public CostCentre CostCentre
		{
			get
			{
				return this._CostCentre.Entity;
			}
			set
			{
				CostCentre previousValue = this._CostCentre.Entity;
				if (((previousValue != value) 
							|| (this._CostCentre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCentre.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._CostCentre.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._CostCentreId = value.CostCentreID;
					}
					else
					{
						this._CostCentreId = default(int);
					}
					this.SendPropertyChanged("CostCentre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCentre_Asset1", Storage="_CostCentre1", ThisKey="OtherCostCentreId", OtherKey="CostCentreID", IsForeignKey=true)]
		public CostCentre CostCentre1
		{
			get
			{
				return this._CostCentre1.Entity;
			}
			set
			{
				CostCentre previousValue = this._CostCentre1.Entity;
				if (((previousValue != value) 
							|| (this._CostCentre1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCentre1.Entity = null;
						previousValue.Assets1.Remove(this);
					}
					this._CostCentre1.Entity = value;
					if ((value != null))
					{
						value.Assets1.Add(this);
						this._OtherCostCentreId = value.CostCentreID;
					}
					else
					{
						this._OtherCostCentreId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CostCentre1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Asset", Storage="_Currency", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Asset", Storage="_Document", ThisKey="ElectricalTestDocumentId", OtherKey="DocumentId", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._ElectricalTestDocumentId = value.DocumentId;
					}
					else
					{
						this._ElectricalTestDocumentId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Asset1", Storage="_Document1", ThisKey="CalibrationDocumentId", OtherKey="DocumentId", IsForeignKey=true)]
		public Document Document1
		{
			get
			{
				return this._Document1.Entity;
			}
			set
			{
				Document previousValue = this._Document1.Entity;
				if (((previousValue != value) 
							|| (this._Document1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document1.Entity = null;
						previousValue.Assets1.Remove(this);
					}
					this._Document1.Entity = value;
					if ((value != null))
					{
						value.Assets1.Add(this);
						this._CalibrationDocumentId = value.DocumentId;
					}
					else
					{
						this._CalibrationDocumentId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Document1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Asset2", Storage="_Document2", ThisKey="MaintenanceDocumentId", OtherKey="DocumentId", IsForeignKey=true)]
		public Document Document2
		{
			get
			{
				return this._Document2.Entity;
			}
			set
			{
				Document previousValue = this._Document2.Entity;
				if (((previousValue != value) 
							|| (this._Document2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document2.Entity = null;
						previousValue.Assets2.Remove(this);
					}
					this._Document2.Entity = value;
					if ((value != null))
					{
						value.Assets2.Add(this);
						this._MaintenanceDocumentId = value.DocumentId;
					}
					else
					{
						this._MaintenanceDocumentId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Document2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset1", Storage="_Period1", ThisKey="ElectricalTestPeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period1
		{
			get
			{
				return this._Period1.Entity;
			}
			set
			{
				Period previousValue = this._Period1.Entity;
				if (((previousValue != value) 
							|| (this._Period1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period1.Entity = null;
						previousValue.Assets1.Remove(this);
					}
					this._Period1.Entity = value;
					if ((value != null))
					{
						value.Assets1.Add(this);
						this._ElectricalTestPeriodID = value.PeriodID;
					}
					else
					{
						this._ElectricalTestPeriodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Period1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Asset1", Storage="_Employee1", ThisKey="OwnerId", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Assets1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Assets1.Add(this);
						this._OwnerId = value.EmployeeID;
					}
					else
					{
						this._OwnerId = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Asset", Storage="_Customer", ThisKey="AnotherExternalOwnerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._AnotherExternalOwnerID = value.CustomerID;
					}
					else
					{
						this._AnotherExternalOwnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset2", Storage="_Period2", ThisKey="MaintenancePeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period2
		{
			get
			{
				return this._Period2.Entity;
			}
			set
			{
				Period previousValue = this._Period2.Entity;
				if (((previousValue != value) 
							|| (this._Period2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period2.Entity = null;
						previousValue.Assets2.Remove(this);
					}
					this._Period2.Entity = value;
					if ((value != null))
					{
						value.Assets2.Add(this);
						this._MaintenancePeriodID = value.PeriodID;
					}
					else
					{
						this._MaintenancePeriodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Period2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrganizationUnit_Asset", Storage="_OrganizationUnit", ThisKey="DepartmentID", OtherKey="UnitID", IsForeignKey=true)]
		public OrganizationUnit OrganizationUnit
		{
			get
			{
				return this._OrganizationUnit.Entity;
			}
			set
			{
				OrganizationUnit previousValue = this._OrganizationUnit.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUnit.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._OrganizationUnit.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._DepartmentID = value.UnitID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrganizationUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Period_Asset3", Storage="_Period3", ThisKey="PeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public Period Period3
		{
			get
			{
				return this._Period3.Entity;
			}
			set
			{
				Period previousValue = this._Period3.Entity;
				if (((previousValue != value) 
							|| (this._Period3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Period3.Entity = null;
						previousValue.Assets3.Remove(this);
					}
					this._Period3.Entity = value;
					if ((value != null))
					{
						value.Assets3.Add(this);
						this._PeriodID = value.PeriodID;
					}
					else
					{
						this._PeriodID = default(int);
					}
					this.SendPropertyChanged("Period3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordMode_Asset", Storage="_RecordMode", ThisKey="RecordModeID", OtherKey="RecordModeID", IsForeignKey=true)]
		public RecordMode RecordMode
		{
			get
			{
				return this._RecordMode.Entity;
			}
			set
			{
				RecordMode previousValue = this._RecordMode.Entity;
				if (((previousValue != value) 
							|| (this._RecordMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordMode.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._RecordMode.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._RecordModeID = value.RecordModeID;
					}
					else
					{
						this._RecordModeID = default(int);
					}
					this.SendPropertyChanged("RecordMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Asset1", Storage="_Customer1", ThisKey="SupplierId", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer1
		{
			get
			{
				return this._Customer1.Entity;
			}
			set
			{
				Customer previousValue = this._Customer1.Entity;
				if (((previousValue != value) 
							|| (this._Customer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer1.Entity = null;
						previousValue.Assets1.Remove(this);
					}
					this._Customer1.Entity = value;
					if ((value != null))
					{
						value.Assets1.Add(this);
						this._SupplierId = value.CustomerID;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssetDepreciations(AssetDepreciation entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_AssetDepreciations(AssetDepreciation entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_AssetCalibrations(AssetCalibration entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_AssetMaintenances(AssetMaintenance entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_AssetElectricalTests(AssetElectricalTest entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AuditManagement.Recipients")]
	public partial class Recipient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RecipientID;
		
		private long _AuditID;
		
		private int _EmployeeID;
		
		private System.DateTime _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<Audit> _Audit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipientIDChanging(long value);
    partial void OnRecipientIDChanged();
    partial void OnAuditIDChanging(long value);
    partial void OnAuditIDChanged();
    partial void OnEmployeeIDChanging(long value);
    partial void OnEmployeeIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Recipient()
		{
			this._Audit = default(EntityRef<Audit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RecipientID
		{
			get
			{
				return this._RecipientID;
			}
			set
			{
				if ((this._RecipientID != value))
				{
					this.OnRecipientIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientID = value;
					this.SendPropertyChanged("RecipientID");
					this.OnRecipientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditID", DbType="BigInt NOT NULL")]
		public long AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_Recipient", Storage="_Audit", ThisKey="AuditID", OtherKey="AuditId", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.Recipients.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.Recipients.Add(this);
						this._AuditID = value.AuditId;
					}
					else
					{
						this._AuditID = default(long);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Territory.Region")]
    public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _RegionID;

        private string _RegionName;

        private string _RegionNameShort;

        private System.Nullable<int> _CountryID;

        private EntityRef<Country> _Country;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();
        partial void OnRegionNameChanging(string value);
        partial void OnRegionNameChanged();
        partial void OnRegionNameShortChanging(string value);
        partial void OnRegionNameShortChanged();
        partial void OnCountryIDChanging(System.Nullable<int> value);
        partial void OnCountryIDChanged();
        #endregion

        public Region()
        {
            this._Country = default(EntityRef<Country>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RegionID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int RegionID
        {
            get
            {
                return this._RegionID;
            }
            set
            {
                if ((this._RegionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.SendPropertyChanging();
                    this._RegionID = value;
                    this.SendPropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RegionName", DbType = "VarChar(50)")]
        public string RegionName
        {
            get
            {
                return this._RegionName;
            }
            set
            {
                if ((this._RegionName != value))
                {
                    this.OnRegionNameChanging(value);
                    this.SendPropertyChanging();
                    this._RegionName = value;
                    this.SendPropertyChanged("RegionName");
                    this.OnRegionNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RegionNameShort", DbType = "VarChar(50)")]
        public string RegionNameShort
        {
            get
            {
                return this._RegionNameShort;
            }
            set
            {
                if ((this._RegionNameShort != value))
                {
                    this.OnRegionNameShortChanging(value);
                    this.SendPropertyChanging();
                    this._RegionNameShort = value;
                    this.SendPropertyChanged("RegionNameShort");
                    this.OnRegionNameShortChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CountryID", DbType = "Int")]
        public System.Nullable<int> CountryID
        {
            get
            {
                return this._CountryID;
            }
            set
            {
                if ((this._CountryID != value))
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCountryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CountryID = value;
                    this.SendPropertyChanged("CountryID");
                    this.OnCountryIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Country_Region", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
        public Country Country
        {
            get
            {
                return this._Country.Entity;
            }
            set
            {
                Country previousValue = this._Country.Entity;
                if (((previousValue != value)
                            || (this._Country.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Country.Entity = null;
                        previousValue.Regions.Remove(this);
                    }
                    this._Country.Entity = value;
                    if ((value != null))
                    {
                        value.Regions.Add(this);
                        this._CountryID = value.CountryID;
                    }
                    else
                    {
                        this._CountryID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Country");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Territory.City")]
    public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _CityID;

        private string _CityName;

        private string _CityNameShort;

        private System.Nullable<int> _RegionID;

        private System.Nullable<int> _CountryID;

        private EntityRef<Country> _Country;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCityIDChanging(int value);
        partial void OnCityIDChanged();
        partial void OnCityNameChanging(string value);
        partial void OnCityNameChanged();
        partial void OnCityNameShortChanging(string value);
        partial void OnCityNameShortChanged();
        partial void OnRegionIDChanging(System.Nullable<int> value);
        partial void OnRegionIDChanged();
        partial void OnCountryIDChanging(System.Nullable<int> value);
        partial void OnCountryIDChanged();
        #endregion

        public City()
        {
            this._Country = default(EntityRef<Country>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CityID", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int CityID
        {
            get
            {
                return this._CityID;
            }
            set
            {
                if ((this._CityID != value))
                {
                    this.OnCityIDChanging(value);
                    this.SendPropertyChanging();
                    this._CityID = value;
                    this.SendPropertyChanged("CityID");
                    this.OnCityIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CityName", DbType = "VarChar(1000)")]
        public string CityName
        {
            get
            {
                return this._CityName;
            }
            set
            {
                if ((this._CityName != value))
                {
                    this.OnCityNameChanging(value);
                    this.SendPropertyChanging();
                    this._CityName = value;
                    this.SendPropertyChanged("CityName");
                    this.OnCityNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CityNameShort", DbType = "VarChar(1000)")]
        public string CityNameShort
        {
            get
            {
                return this._CityNameShort;
            }
            set
            {
                if ((this._CityNameShort != value))
                {
                    this.OnCityNameShortChanging(value);
                    this.SendPropertyChanging();
                    this._CityNameShort = value;
                    this.SendPropertyChanged("CityNameShort");
                    this.OnCityNameShortChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RegionID", DbType = "Int")]
        public System.Nullable<int> RegionID
        {
            get
            {
                return this._RegionID;
            }
            set
            {
                if ((this._RegionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.SendPropertyChanging();
                    this._RegionID = value;
                    this.SendPropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CountryID", DbType = "Int")]
        public System.Nullable<int> CountryID
        {
            get
            {
                return this._CountryID;
            }
            set
            {
                if ((this._CountryID != value))
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCountryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CountryID = value;
                    this.SendPropertyChanged("CountryID");
                    this.OnCountryIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Country_City", Storage = "_Country", ThisKey = "CountryID", OtherKey = "CountryID", IsForeignKey = true)]
        public Country Country
        {
            get
            {
                return this._Country.Entity;
            }
            set
            {
                Country previousValue = this._Country.Entity;
                if (((previousValue != value)
                            || (this._Country.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Country.Entity = null;
                        previousValue.Cities.Remove(this);
                    }
                    this._Country.Entity = value;
                    if ((value != null))
                    {
                        value.Cities.Add(this);
                        this._CountryID = value.CountryID;
                    }
                    else
                    {
                        this._CountryID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Country");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
	
	public partial class fn_GetRootDepartmentEmployeesResult
	{
		
		private string _EmployeeName;
		
		public fn_GetRootDepartmentEmployeesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetRootDepartmentPositionsResult
	{
		
		private string _PositionTitle;
		
		public fn_GetRootDepartmentPositionsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PositionTitle
		{
			get
			{
				return this._PositionTitle;
			}
			set
			{
				if ((this._PositionTitle != value))
				{
					this._PositionTitle = value;
				}
			}
		}
	}
	
	public partial class fn_GetDepartmentEmployeesResult
	{
		
		private string _EmployeeName;
		
		public fn_GetDepartmentEmployeesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_getCauseChildTreeResult
	{
		
		private System.Nullable<int> _CauseID;
		
		private string _Cause;
		
		private System.Nullable<int> _ParentID;
		
		private string _Description;
		
		private System.Nullable<int> _Depth;
		
         private System.Nullable<int> _SubCauseID;
		public fn_getCauseChildTreeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", DbType="Int")]
		public System.Nullable<int> CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					this._CauseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(100)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this._Cause = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Int")]
		public System.Nullable<int> Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this._Depth = value;
				}
			}
		}
	}
	
	public partial class fn_GetEmployeesResult
	{
		
		private string _EmployeeName;
		
		public fn_GetEmployeesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetTableColumnsResult
	{
		
		private string _ParameterValue;
		
		public fn_GetTableColumnsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterValue", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ParameterValue
		{
			get
			{
				return this._ParameterValue;
			}
			set
			{
				if ((this._ParameterValue != value))
				{
					this._ParameterValue = value;
				}
			}
		}
	}
	
	public partial class fn_GetOriginationDateByMonthResult
	{
		
		private string _Month;
		
		public fn_GetOriginationDateByMonthResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="NVarChar(100)")]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
	}
	
	public partial class fn_getProblemCauseChildTreeResult
	{
		
		private System.Nullable<int> _CauseID;
		
		private string _Cause;
		
		private System.Nullable<int> _ParentID;
		
		private string _Description;
		
		private System.Nullable<int> _Depth;

        private System.Nullable<int> _SelectedCauseID;

        public fn_getProblemCauseChildTreeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", DbType="Int")]
		public System.Nullable<int> CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					this._CauseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(100)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this._Cause = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Int")]
		public System.Nullable<int> Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this._Depth = value;
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SelectedCauseID", DbType = "Int")]
        public System.Nullable<int> SelectedCauseID
        {
            get
            {
                return this._SelectedCauseID;
            }
            set
            {
                if ((this._SelectedCauseID != value))
                {
                    this._SelectedCauseID = value;
                }
            }
        }
    }
	
	public partial class fn_GetExecutivesResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetExecutivesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetOriginatorsResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetOriginatorsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetOwnersResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetOwnersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetDepartmentManagersResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetDepartmentManagersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetLeadersResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetLeadersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetAuditorsResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetAuditorsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_getFindingCauseChildTreeResult
	{
		
		private System.Nullable<int> _CauseID;
		
		private string _Cause;
		
		private System.Nullable<int> _ParentID;
		
		private string _Description;
		
		private System.Nullable<int> _Depth;

        private System.Nullable<int> _SelectedCauseID;
		
		public fn_getFindingCauseChildTreeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", DbType="Int")]
		public System.Nullable<int> CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					this._CauseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(100)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this._Cause = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Int")]
		public System.Nullable<int> Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this._Depth = value;
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SelectedCauseID", DbType = "Int")]
        public System.Nullable<int> SelectedCauseID
        {
            get
            {
                return this._SelectedCauseID;
            }
            set
            {
                if ((this._SelectedCauseID != value))
                {
                    this._SelectedCauseID = value;
                }
            }
        }
	}
	
	public partial class fn_GetActioneesResult1
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetActioneesResult1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetActioneesResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetActioneesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetStartDateByYearResult
	{
		
		private System.Nullable<int> _Year;
		
		public fn_GetStartDateByYearResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
	}
	
	public partial class fn_GetRepresentativesResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetRepresentativesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetActioneesResult2
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetActioneesResult2()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_GetPlannedClosedTasksByYearResult
	{
		
		private System.Nullable<int> _Year;
		
		public fn_GetPlannedClosedTasksByYearResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
	}
	
	public partial class fn_GetAssetOwnerResult
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetAssetOwnerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
	
	public partial class fn_getRootCauseChildTreeResult
	{
		
		private System.Nullable<int> _CauseID;
		
		private string _Cause;
		
		private System.Nullable<int> _ParentID;
		
		private string _Description;
		
		private System.Nullable<int> _Depth;
		
		public fn_getRootCauseChildTreeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", DbType="Int")]
		public System.Nullable<int> CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					this._CauseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(100)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this._Cause = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Int")]
		public System.Nullable<int> Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this._Depth = value;
				}
			}
		}
	}
	
	public partial class fn_getCauseTreeHierarchyResult
	{
		
		private System.Nullable<int> _CauseID;
		
		private string _Cause;
		
		private System.Nullable<int> _ParentID;
		
		private string _Description;
		
		private System.Nullable<int> _Depth;
		
		public fn_getCauseTreeHierarchyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseID", DbType="Int")]
		public System.Nullable<int> CauseID
		{
			get
			{
				return this._CauseID;
			}
			set
			{
				if ((this._CauseID != value))
				{
					this._CauseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(100)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this._Cause = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Int")]
		public System.Nullable<int> Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this._Depth = value;
				}
			}
		}
	}
	
	public partial class fn_GetActioneesResult3
	{
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		public fn_GetActioneesResult3()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this._EmployeeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this._EmployeeName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
